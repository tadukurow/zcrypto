diff --git a/ct/asn1/asn1.go b/ct/asn1/asn1.go
index e987477..1ba54fe 100755
--- a/ct/asn1/asn1.go
+++ b/ct/asn1/asn1.go
@@ -30,6 +30,7 @@ import (
 	// START CT CHANGES
 	"errors"
 	"fmt"
+	"strconv"
 	// END CT CHANGES
 	"math/big"
 	"reflect"
@@ -209,6 +210,16 @@ func (oi ObjectIdentifier) Equal(other ObjectIdentifier) bool {
 
 	return true
 }
+func (oi ObjectIdentifier) String() string {
+	var s string
+	for i, v := range oi {
+		if i > 0 {
+			s += "."
+		}
+		s += strconv.Itoa(v)
+	}
+	return s
+}
 
 // parseObjectIdentifier parses an OBJECT IDENTIFIER from the given bytes and
 // returns it. An object identifier is a sequence of variable length integers
diff --git a/ct/asn1/marshal.go b/ct/asn1/marshal.go
index ed17e41..8522478 100755
--- a/ct/asn1/marshal.go
+++ b/ct/asn1/marshal.go
@@ -577,5 +577,8 @@ func Marshal(val interface{}) ([]byte, error) {
 		return nil, err
 	}
 	_, err = f.writeTo(&out)
+	if err != nil {
+		return nil, err
+	}
 	return out.Bytes(), nil
 }
diff --git a/ct/client/logclient.go b/ct/client/logclient.go
index 914bfca..0b7ef01 100644
--- a/ct/client/logclient.go
+++ b/ct/client/logclient.go
@@ -6,6 +6,7 @@ package client
 import (
 	"bytes"
 	"crypto/sha256"
+	"crypto/tls"
 	"encoding/base64"
 	"encoding/json"
 	"errors"
@@ -16,8 +17,8 @@ import (
 	"strconv"
 	"time"
 
-	"github.com/google/certificate-transparency/go"
 	"github.com/mreiferson/go-httpclient"
+	"github.com/zmap/zcrypto/ct"
 	"golang.org/x/net/context"
 )
 
@@ -32,7 +33,7 @@ const (
 
 // LogClient represents a client for a given CT Log instance
 type LogClient struct {
-	uri        string       // the base URI of the log. e.g. http://ct.googleapis/pilot
+	Uri        string       // the base URI of the log. e.g. http://ct.googleapis/pilot
 	httpClient *http.Client // used to interact with the log via HTTP
 }
 
@@ -111,13 +112,14 @@ type getEntryAndProofResponse struct {
 // http://ct.googleapis.com/pilot
 func New(uri string) *LogClient {
 	var c LogClient
-	c.uri = uri
+	c.Uri = uri
 	transport := &httpclient.Transport{
 		ConnectTimeout:        10 * time.Second,
 		RequestTimeout:        30 * time.Second,
 		ResponseHeaderTimeout: 30 * time.Second,
 		MaxIdleConnsPerHost:   10,
 		DisableKeepAlives:     false,
+		TLSClientConfig:       &tls.Config{InsecureSkipVerify: true},
 	}
 	c.httpClient = &http.Client{Transport: transport}
 	return &c
@@ -134,6 +136,9 @@ func (c *LogClient) fetchAndParse(uri string, res interface{}) error {
 	resp, err := c.httpClient.Do(req)
 	var body []byte
 	if resp != nil {
+		if resp.StatusCode > 399 {
+			return errors.New("HTTP error: " + resp.Status)
+		}
 		body, err = ioutil.ReadAll(resp.Body)
 		resp.Body.Close()
 		if err != nil {
@@ -144,6 +149,7 @@ func (c *LogClient) fetchAndParse(uri string, res interface{}) error {
 		return err
 	}
 	if err = json.Unmarshal(body, &res); err != nil {
+		fmt.Println(string(body))
 		return err
 	}
 	return nil
@@ -161,7 +167,7 @@ func (c *LogClient) postAndParse(uri string, req interface{}, res interface{}) (
 	if err != nil {
 		return nil, "", err
 	}
-	httpReq.Header.Set("Keep-Alive", "timeout=15, max=100")
+	//httpReq.Header.Set("Keep-Alive", "timeout=15, max=100")
 	httpReq.Header.Set("Content-Type", "application/json")
 	resp, err := c.httpClient.Do(httpReq)
 	// Read all of the body, if there is one, so that the http.Client can do
@@ -202,13 +208,14 @@ func backoffForRetry(ctx context.Context, d time.Duration) error {
 // Attempts to add |chain| to the log, using the api end-point specified by
 // |path|. If provided context expires before submission is complete an
 // error will be returned.
-func (c *LogClient) addChainWithRetry(ctx context.Context, path string, chain []ct.ASN1Cert) (*ct.SignedCertificateTimestamp, error) {
+func (c *LogClient) addChainWithRetry(ctx context.Context, path string, chain []ct.ASN1Cert) (*ct.SignedCertificateTimestamp, error, int) {
 	var resp addChainResponse
 	var req addChainRequest
 	for _, link := range chain {
 		req.Chain = append(req.Chain, base64.StdEncoding.EncodeToString(link))
 	}
 	httpStatus := "Unknown"
+	httpCode := 0
 	backoffSeconds := 0
 	done := false
 	for !done {
@@ -217,12 +224,12 @@ func (c *LogClient) addChainWithRetry(ctx context.Context, path string, chain []
 		}
 		err := backoffForRetry(ctx, time.Second*time.Duration(backoffSeconds))
 		if err != nil {
-			return nil, err
+			return nil, err, 0
 		}
 		if backoffSeconds > 0 {
 			backoffSeconds = 0
 		}
-		httpResp, errorBody, err := c.postAndParse(c.uri+path, &req, &resp)
+		httpResp, errorBody, err := c.postAndParse(c.Uri+path, &req, &resp)
 		if err != nil {
 			backoffSeconds = 10
 			continue
@@ -241,22 +248,23 @@ func (c *LogClient) addChainWithRetry(ctx context.Context, path string, chain []
 				}
 			}
 		default:
-			return nil, fmt.Errorf("got HTTP Status %s: %s", httpResp.Status, errorBody)
+			return nil, fmt.Errorf("got HTTP Status %s: %s", httpResp.Status, errorBody), httpResp.StatusCode
 		}
 		httpStatus = httpResp.Status
+		httpCode = httpResp.StatusCode
 	}
 
 	rawLogID, err := base64.StdEncoding.DecodeString(resp.ID)
 	if err != nil {
-		return nil, err
+		return nil, err, httpCode
 	}
 	rawSignature, err := base64.StdEncoding.DecodeString(resp.Signature)
 	if err != nil {
-		return nil, err
+		return nil, err, httpCode
 	}
 	ds, err := ct.UnmarshalDigitallySigned(bytes.NewReader(rawSignature))
 	if err != nil {
-		return nil, err
+		return nil, err, httpCode
 	}
 	var logID ct.SHA256Hash
 	copy(logID[:], rawLogID)
@@ -265,22 +273,22 @@ func (c *LogClient) addChainWithRetry(ctx context.Context, path string, chain []
 		LogID:      logID,
 		Timestamp:  resp.Timestamp,
 		Extensions: ct.CTExtensions(resp.Extensions),
-		Signature:  *ds}, nil
+		Signature:  *ds}, nil, httpCode
 }
 
 // AddChain adds the (DER represented) X509 |chain| to the log.
-func (c *LogClient) AddChain(chain []ct.ASN1Cert) (*ct.SignedCertificateTimestamp, error) {
+func (c *LogClient) AddChain(chain []ct.ASN1Cert) (*ct.SignedCertificateTimestamp, error, int) {
 	return c.addChainWithRetry(nil, AddChainPath, chain)
 }
 
 // AddPreChain adds the (DER represented) Precertificate |chain| to the log.
-func (c *LogClient) AddPreChain(chain []ct.ASN1Cert) (*ct.SignedCertificateTimestamp, error) {
+func (c *LogClient) AddPreChain(chain []ct.ASN1Cert) (*ct.SignedCertificateTimestamp, error, int) {
 	return c.addChainWithRetry(nil, AddPreChainPath, chain)
 }
 
 // AddChainWithContext adds the (DER represented) X509 |chain| to the log and
 // fails if the provided context expires before the chain is submitted.
-func (c *LogClient) AddChainWithContext(ctx context.Context, chain []ct.ASN1Cert) (*ct.SignedCertificateTimestamp, error) {
+func (c *LogClient) AddChainWithContext(ctx context.Context, chain []ct.ASN1Cert) (*ct.SignedCertificateTimestamp, error, int) {
 	return c.addChainWithRetry(ctx, AddChainPath, chain)
 }
 
@@ -289,7 +297,7 @@ func (c *LogClient) AddJSON(data interface{}) (*ct.SignedCertificateTimestamp, e
 		Data: data,
 	}
 	var resp addChainResponse
-	_, _, err := c.postAndParse(c.uri+AddJSONPath, &req, &resp)
+	_, _, err := c.postAndParse(c.Uri+AddJSONPath, &req, &resp)
 	if err != nil {
 		return nil, err
 	}
@@ -319,7 +327,7 @@ func (c *LogClient) AddJSON(data interface{}) (*ct.SignedCertificateTimestamp, e
 // Returns a populated SignedTreeHead, or a non-nil error.
 func (c *LogClient) GetSTH() (sth *ct.SignedTreeHead, err error) {
 	var resp getSTHResponse
-	if err = c.fetchAndParse(c.uri+GetSTHPath, &resp); err != nil {
+	if err = c.fetchAndParse(c.Uri+GetSTHPath, &resp); err != nil {
 		return
 	}
 	sth = &ct.SignedTreeHead{
@@ -360,7 +368,7 @@ func (c *LogClient) GetEntries(start, end int64) ([]ct.LogEntry, error) {
 		return nil, errors.New("start should be <= end")
 	}
 	var resp getEntriesResponse
-	err := c.fetchAndParse(fmt.Sprintf("%s%s?start=%d&end=%d", c.uri, GetEntriesPath, start, end), &resp)
+	err := c.fetchAndParse(fmt.Sprintf("%s%s?start=%d&end=%d", c.Uri, GetEntriesPath, start, end), &resp)
 	if err != nil {
 		return nil, err
 	}
diff --git a/ct/client/logclient_test.go b/ct/client/logclient_test.go
index 2419b1c..474730c 100644
--- a/ct/client/logclient_test.go
+++ b/ct/client/logclient_test.go
@@ -12,7 +12,7 @@ import (
 	"testing"
 	"time"
 
-	"github.com/google/certificate-transparency/go"
+	"github.com/zmap/zcrypto/ct"
 	"golang.org/x/net/context"
 )
 
@@ -168,7 +168,7 @@ func TestAddChainWithContext(t *testing.T) {
 		currentFailures = 0
 
 		started := time.Now()
-		sct, err := c.AddChainWithContext(deadline, chain)
+		sct, err, _ := c.AddChainWithContext(deadline, chain)
 		took := time.Since(started)
 		if math.Abs(float64(took-tc.expected)) > float64(leeway) {
 			t.Fatalf("Submission took an unexpected length of time: %s, expected ~%s", took, tc.expected)
diff --git a/ct/client/main/main.go b/ct/client/main/main.go
new file mode 100644
index 0000000..215281c
--- /dev/null
+++ b/ct/client/main/main.go
@@ -0,0 +1,52 @@
+package main
+
+import (
+	"flag"
+	"fmt"
+	"log"
+
+	"encoding/json"
+	ct "github.com/zmap/zcrypto/ct"
+	"github.com/zmap/zcrypto/ct/client"
+	"github.com/zmap/zcrypto/x509"
+)
+
+// Processes the given entry in the specified log.
+func processEntry(entry ct.LogEntry) (*x509.Certificate, error) {
+	cert := &x509.Certificate{}
+	switch entry.Leaf.TimestampedEntry.EntryType {
+	case ct.X509LogEntryType:
+		innerCert, err := x509.ParseCertificate(entry.Leaf.TimestampedEntry.X509Entry)
+		if err != nil {
+			return nil, err
+		}
+		cert = innerCert
+	case ct.PrecertLogEntryType:
+		innerCert, err := x509.ParseCertificate(entry.Leaf.TimestampedEntry.PrecertEntry.TBSCertificate)
+		if err != nil {
+			return nil, err
+		}
+		cert = innerCert
+	}
+	return cert, nil
+}
+
+func main() {
+	var logURI = flag.String("log_uri", "http://ct.googleapis.com/aviator", "CT log base URI")
+	var indexToParse = flag.Int64("index", 1, "Index to parse")
+	flag.Parse()
+	logClient := client.New(*logURI)
+	entries, err := logClient.GetEntries(*indexToParse, *indexToParse)
+	if err != nil {
+		log.Fatal(err)
+	}
+	for _, entry := range entries {
+		cert, err := processEntry(entry)
+		if err != nil {
+			fmt.Printf("%d %s\n", entry.Index, err.Error())
+			continue
+		}
+		finalJSON, _ := json.Marshal(cert)
+		fmt.Printf("%d %s\n", entry.Index, string(finalJSON))
+	}
+}
diff --git a/ct/fixchain/containers.go b/ct/fixchain/containers.go
deleted file mode 100644
index 2aaed6d..0000000
--- a/ct/fixchain/containers.go
+++ /dev/null
@@ -1,60 +0,0 @@
-package fixchain
-
-import (
-	"sync"
-
-	"github.com/google/certificate-transparency/go/x509"
-)
-
-type dedupedChain struct {
-	certs []*x509.Certificate
-}
-
-func (d *dedupedChain) addCert(cert *x509.Certificate) {
-	// Check that the certificate isn't being added twice.
-	for _, c := range d.certs {
-		if c.Equal(cert) {
-			return
-		}
-	}
-	d.certs = append(d.certs, cert)
-}
-
-func (d *dedupedChain) addCertToFront(cert *x509.Certificate) {
-	// Check that the certificate isn't being added twice.
-	for _, c := range d.certs {
-		if c.Equal(cert) {
-			return
-		}
-	}
-	d.certs = append([]*x509.Certificate{cert}, d.certs...)
-}
-
-func newDedupedChain(chain []*x509.Certificate) *dedupedChain {
-	d := &dedupedChain{}
-	for _, cert := range chain {
-		d.addCert(cert)
-	}
-	return d
-}
-
-type lockedMap struct {
-	m map[[hashSize]byte]bool
-	sync.RWMutex
-}
-
-func newLockedMap() *lockedMap {
-	return &lockedMap{m: make(map[[hashSize]byte]bool)}
-}
-
-func (m *lockedMap) get(hash [hashSize]byte) bool {
-	m.RLock()
-	defer m.RUnlock()
-	return m.m[hash]
-}
-
-func (m *lockedMap) set(hash [hashSize]byte, b bool) {
-	m.Lock()
-	defer m.Unlock()
-	m.m[hash] = b
-}
diff --git a/ct/fixchain/fix.go b/ct/fixchain/fix.go
deleted file mode 100644
index d9a1fc5..0000000
--- a/ct/fixchain/fix.go
+++ /dev/null
@@ -1,239 +0,0 @@
-package fixchain
-
-import (
-	"encoding/pem"
-	"net/http"
-
-	"github.com/google/certificate-transparency/go/x509"
-)
-
-// Fix attempts to fix the certificate chain for the certificate that is passed
-// to it, with respect to the given roots.  Fix returns a list of successfully
-// constructed chains, and a list of errors it encountered along the way.  The
-// presence of FixErrors does not mean the fix was unsuccessful.  Callers should
-// check for returned chains to determine success.
-func Fix(cert *x509.Certificate, chain []*x509.Certificate, roots *x509.CertPool, client *http.Client) ([][]*x509.Certificate, []*FixError) {
-	fix := &toFix{
-		cert:  cert,
-		chain: newDedupedChain(chain),
-		roots: roots,
-		cache: newURLCache(client, false),
-	}
-	return fix.handleChain()
-}
-
-const maxChainLength = 20
-
-type toFix struct {
-	cert  *x509.Certificate
-	chain *dedupedChain
-	roots *x509.CertPool
-	opts  *x509.VerifyOptions
-	cache *urlCache
-}
-
-func (fix *toFix) handleChain() ([][]*x509.Certificate, []*FixError) {
-	intermediates := x509.NewCertPool()
-	for _, c := range fix.chain.certs {
-		intermediates.AddCert(c)
-	}
-
-	fix.opts = &x509.VerifyOptions{
-		Intermediates:     intermediates,
-		Roots:             fix.roots,
-		DisableTimeChecks: true,
-		KeyUsages:         []x509.ExtKeyUsage{x509.ExtKeyUsageAny},
-	}
-
-	var retferrs []*FixError
-	chains, ferrs := fix.constructChain()
-	if ferrs != nil {
-		retferrs = append(retferrs, ferrs...)
-		chains, ferrs = fix.fixChain()
-		if ferrs != nil {
-			retferrs = append(retferrs, ferrs...)
-		}
-	}
-	return chains, retferrs
-}
-
-func (fix *toFix) constructChain() ([][]*x509.Certificate, []*FixError) {
-	chains, err := fix.cert.Verify(*fix.opts)
-	if err != nil {
-		return chains, []*FixError{
-			&FixError{
-				Type:  VerifyFailed,
-				Cert:  fix.cert,
-				Chain: fix.chain.certs,
-				Error: err,
-			},
-		}
-	}
-	return chains, nil
-}
-
-// toFix.fixChain() tries to fix the certificate chain in the toFix struct for
-// the cert in the toFix struct wrt the roots in the toFix struct.
-// toFix.fixChain() uses the opts provided in the toFix struct to verify the
-// chain, and uses the cache in the toFix struct to go and get any potentially
-// missing intermediate certs.
-// toFix.fixChain() returns a slice of valid and verified chains for this cert
-// to the roots in the toFix struct, and a slice of the errors encountered
-// during the fixing process.
-func (fix *toFix) fixChain() ([][]*x509.Certificate, []*FixError) {
-	var retferrs []*FixError
-
-	// Ensure the leaf certificate is included as part of the certificate chain.
-	dchain := *fix.chain
-	dchain.addCertToFront(fix.cert)
-
-	explored := make([]bool, len(dchain.certs))
-	lookup := make(map[[hashSize]byte]int)
-	for i, cert := range dchain.certs {
-		lookup[hash(cert)] = i
-	}
-
-	// For each certificate in the given certificate chain...
-	for i, cert := range dchain.certs {
-		// If the chains from this certificate have already been built and
-		// added to the pool of intermediates, skip.
-		if explored[i] {
-			continue
-		}
-
-		seen := make(map[[hashSize]byte]bool)
-		// Build all the chains possible that begin from this certificate,
-		// and add each certificate found along the way to the pool of
-		// intermediates against which to verify fix.cert.  If the addition of
-		// these intermediates causes chains for fix.cert to be verified,
-		// fix.augmentIntermediates() will return those chains.
-		chains, ferrs := fix.augmentIntermediates(cert, 1, seen)
-		if ferrs != nil {
-			retferrs = append(retferrs, ferrs...)
-		}
-		// If adding certs from the chains steming from this cert resulted in
-		// successful verification of chains for fix.cert to fix.root, return
-		// the chains.
-		if chains != nil {
-			return chains, retferrs
-		}
-
-		// Mark any seen certs that match certs in the original chain as already
-		// explored.
-		for certHash := range seen {
-			index, ok := lookup[certHash]
-			if ok {
-				explored[index] = true
-			}
-		}
-	}
-
-	return nil, append(retferrs, &FixError{
-		Type:  FixFailed,
-		Cert:  fix.cert,
-		Chain: fix.chain.certs,
-	})
-}
-
-// TODO(katjoyce): Extend fixing algorithm to build all of the chains for
-// toFix.cert and log all of the resulting intermediates.
-
-// toFix.augmentIntermediates() builds all possible chains that stem from the
-// given cert, and adds every certificate it finds in these chains to the pool
-// of intermediate certs in toFix.opts.  Every time a new certificate is added
-// to this pool, it tries to re-verify toFix.cert wrt toFix.roots.
-// If this verification is ever successful, toFix.augmentIntermediates() returns
-// the verified chains for toFix.cert wrt toFix.roots.  Also returned are any
-// errors that were encountered along the way.
-//
-// toFix.augmentIntermediates() builds all possible chains from cert by using a
-// recursive algorithm on the urls in the AIA information of each certificate
-// discovered. length represents the position of the current given cert in the
-// larger chain, and is used to impose a max length to which chains can be
-// explored.  seen is a slice in which all certs that are encountered during the
-// search are noted down.
-func (fix *toFix) augmentIntermediates(cert *x509.Certificate, length int, seen map[[hashSize]byte]bool) ([][]*x509.Certificate, []*FixError) {
-	// If this cert takes the chain past maxChainLength, or if this cert has
-	// already been explored, return.
-	if length > maxChainLength || seen[hash(cert)] {
-		return nil, nil
-	}
-	// Mark this cert as already explored.
-	seen[hash(cert)] = true
-
-	// Add this cert to the pool of intermediates.  If this results in successful
-	// verification of one or more chains for fix.cert, return the chains.
-	fix.opts.Intermediates.AddCert(cert)
-	chains, err := fix.cert.Verify(*fix.opts)
-	if err == nil {
-		return chains, nil
-	}
-
-	// For each url in the AIA information of cert, get the corresponding
-	// certificates and recursively build the chains from those certificates,
-	// adding every cert to the pool of intermdiates, running the verifier at
-	// every cert addition, and returning verified chains of fix.cert as soon
-	// as thay are found.
-	var retferrs []*FixError
-	for _, url := range cert.IssuingCertificateURL {
-		icerts, ferr := fix.getIntermediates(url)
-		if ferr != nil {
-			retferrs = append(retferrs, ferr)
-		}
-
-		for _, icert := range icerts {
-			chains, ferrs := fix.augmentIntermediates(icert, length+1, seen)
-			if ferrs != nil {
-				retferrs = append(retferrs, ferrs...)
-			}
-			if chains != nil {
-				return chains, retferrs
-			}
-		}
-	}
-	return nil, retferrs
-}
-
-// Get the certs that correspond to the given url.
-func (fix *toFix) getIntermediates(url string) ([]*x509.Certificate, *FixError) {
-	var icerts []*x509.Certificate
-	// PKCS#7 additions as (at time of writing) there is no standard Go PKCS#7
-	// implementation
-	r := urlReplacement(url)
-	if r != nil {
-		return r, nil
-	}
-
-	body, err := fix.cache.getURL(url)
-	if err != nil {
-		return nil, &FixError{
-			Type:  CannotFetchURL,
-			Cert:  fix.cert,
-			Chain: fix.chain.certs,
-			URL:   url,
-			Error: err,
-		}
-	}
-
-	icert, err := x509.ParseCertificate(body)
-	if err != nil {
-		s, _ := pem.Decode(body)
-		if s != nil {
-			icert, err = x509.ParseCertificate(s.Bytes)
-		}
-	}
-
-	if err != nil {
-		return nil, &FixError{
-			Type:  ParseFailure,
-			Cert:  fix.cert,
-			Chain: fix.chain.certs,
-			URL:   url,
-			Bad:   body,
-			Error: err,
-		}
-	}
-
-	icerts = append(icerts, icert)
-	return icerts, nil
-}
diff --git a/ct/fixchain/fix_and_log.go b/ct/fixchain/fix_and_log.go
deleted file mode 100644
index 0431f67..0000000
--- a/ct/fixchain/fix_and_log.go
+++ /dev/null
@@ -1,104 +0,0 @@
-package fixchain
-
-import (
-	"log"
-	"net/http"
-	"sync"
-	"sync/atomic"
-	"time"
-
-	"github.com/google/certificate-transparency/go/x509"
-)
-
-// FixAndLog contains a Fixer and a Logger, for all your fix-then-log-chain needs!
-type FixAndLog struct {
-	fixer  *Fixer
-	chains chan []*x509.Certificate
-	logger *Logger
-	wg     sync.WaitGroup
-
-	queued      uint32     // Whole chains queued - before checking cache.
-	done        *lockedMap // Cache of chains that QueueAllCertsInChain() has already been called on.
-	alreadyDone uint32
-	chainsSent  uint32
-}
-
-// QueueAllCertsInChain adds every cert in the chain and the chain to the queue
-// to be fixed and logged.
-func (fl *FixAndLog) QueueAllCertsInChain(chain []*x509.Certificate) {
-	if chain != nil {
-		atomic.AddUint32(&fl.queued, 1)
-		dchain := newDedupedChain(chain)
-		// Caching check
-		h := hashBag(dchain.certs)
-		if fl.done.get(h) {
-			atomic.AddUint32(&fl.alreadyDone, 1)
-			return
-		}
-		fl.done.set(h, true)
-
-		for _, cert := range dchain.certs {
-			if fl.logger.IsPosted(cert) {
-				continue
-			}
-			fl.fixer.QueueChain(cert, dchain.certs, fl.logger.RootCerts())
-			atomic.AddUint32(&fl.chainsSent, 1)
-		}
-	}
-}
-
-// QueueChain queues the given chain to be fixed wrt the roots of the logger
-// contained in fl, and then logged to the Certificate Transparency log
-// represented by the logger.  Note: chain is expected to be in the order of
-// cert --> root.
-func (fl *FixAndLog) QueueChain(chain []*x509.Certificate) {
-	if chain != nil {
-		if fl.logger.IsPosted(chain[0]) {
-			return
-		}
-		fl.fixer.QueueChain(chain[0], chain, fl.logger.RootCerts())
-		atomic.AddUint32(&fl.chainsSent, 1)
-	}
-}
-
-// Wait waits for the all of the queued chains to complete being fixed and
-// logged.
-func (fl *FixAndLog) Wait() {
-	fl.fixer.Wait()
-	close(fl.chains)
-	fl.wg.Wait()
-	fl.logger.Wait()
-}
-
-// NewFixAndLog creates an object that will asynchronously fix any chains that
-// are added to its queue, and then log them to the Certificate Transparency log
-// found at the given url.  Any errors encountered along the way are pushed to
-// the given errors channel.
-func NewFixAndLog(fixerWorkerCount int, loggerWorkerCount int, errors chan<- *FixError, client *http.Client, logClient *http.Client, logURL string, limiter Limiter, logStats bool) *FixAndLog {
-	chains := make(chan []*x509.Certificate)
-	fl := &FixAndLog{
-		fixer:  NewFixer(fixerWorkerCount, chains, errors, client, logStats),
-		chains: chains,
-		logger: NewLogger(loggerWorkerCount, logURL, errors, logClient, limiter, logStats),
-		done:   newLockedMap(),
-	}
-
-	fl.wg.Add(1)
-	go func() {
-		for chain := range chains {
-			fl.logger.QueueChain(chain)
-		}
-		fl.wg.Done()
-	}()
-
-	if logStats {
-		t := time.NewTicker(time.Second)
-		go func() {
-			for _ = range t.C {
-				log.Printf("fix-then-log: %d whole chains queued, %d whole chains already done, %d chains sent", fl.queued, fl.alreadyDone, fl.chainsSent)
-			}
-		}()
-	}
-
-	return fl
-}
diff --git a/ct/fixchain/fix_and_log_test.go b/ct/fixchain/fix_and_log_test.go
deleted file mode 100644
index 618aea3..0000000
--- a/ct/fixchain/fix_and_log_test.go
+++ /dev/null
@@ -1,311 +0,0 @@
-package fixchain
-
-import (
-	"net/http"
-	"strings"
-	"sync"
-	"testing"
-
-	"github.com/google/certificate-transparency/go/x509"
-)
-
-var newFixAndLogTests = []fixAndLogTest{
-	// Tests that add chains to the FixAndLog one at a time using QueueChain()
-	{ // Full chain successfully logged.
-		url:   "https://ct.googleapis.com/pilot",
-		chain: []string{googleLeaf, thawteIntermediate, verisignRoot},
-
-		function: "QueueChain",
-		expLoggedChains: [][]string{
-			{"Google", "Thawte", "VeriSign"},
-		},
-	},
-	{ // Chain without the root successfully logged.
-		url:   "https://ct.googleapis.com/pilot",
-		chain: []string{googleLeaf, thawteIntermediate},
-
-		function: "QueueChain",
-		expLoggedChains: [][]string{
-			{"Google", "Thawte", "VeriSign"},
-		},
-	},
-	{ // Chain to wrong root results in error.
-		url:   "https://ct.googleapis.com/pilot",
-		chain: []string{megaLeaf, comodoIntermediate, comodoRoot},
-
-		function:     "QueueChain",
-		expectedErrs: []errorType{VerifyFailed, FixFailed},
-	},
-	{ // Chain without correct root containing loop results in error.
-		url:   "https://ct.googleapis.com/pilot",
-		chain: []string{testC, testB, testA},
-
-		function:     "QueueChain",
-		expectedErrs: []errorType{VerifyFailed, FixFailed},
-	},
-	{ // Incomplete chain successfully logged.
-		url:   "https://ct.googleapis.com/pilot",
-		chain: []string{googleLeaf},
-
-		function: "QueueChain",
-		expLoggedChains: [][]string{
-			{"Google", "Thawte", "VeriSign"},
-		},
-		expectedErrs: []errorType{VerifyFailed},
-	},
-	{
-		url:   "https://ct.googleapis.com/pilot",
-		chain: []string{testLeaf},
-
-		function: "QueueChain",
-		expLoggedChains: [][]string{
-			{"Leaf", "Intermediate2", "Intermediate1", "CA"},
-		},
-		expectedErrs: []errorType{VerifyFailed},
-	},
-	{ // Garbled chain (with a leaf that has no chain to our roots) results in an error.
-		url:   "https://ct.googleapis.com/pilot",
-		chain: []string{megaLeaf, googleLeaf, thawteIntermediate, verisignRoot},
-
-		function:     "QueueChain",
-		expectedErrs: []errorType{VerifyFailed, FixFailed},
-	},
-	{ // Garbled chain (with a leaf that has a chain to our roots) successfully logged.
-		url:   "https://ct.googleapis.com/pilot",
-		chain: []string{testLeaf, megaLeaf, googleLeaf, thawteIntermediate, comodoRoot},
-
-		function: "QueueChain",
-		expLoggedChains: [][]string{
-			{"Leaf", "Intermediate2", "Intermediate1", "CA"},
-		},
-		expectedErrs: []errorType{VerifyFailed},
-	},
-	// Tests that add chains to the FixAndLog using QueueAllCertsInChain()
-	{ // Full chain successfully logged.
-		// Note:  Verifying a root to itself results in an error.
-		// This is not an issue as the root will already be known to the log, and chains
-		// aren't required to contain the root.
-		url:   "https://ct.googleapis.com/pilot",
-		chain: []string{googleLeaf, thawteIntermediate, verisignRoot},
-
-		function: "QueueAllCertsInChain",
-		expLoggedChains: [][]string{
-			{"Google", "Thawte", "VeriSign"},
-			{"Thawte", "VeriSign"},
-		},
-		expectedErrs: []errorType{VerifyFailed, FixFailed},
-	},
-	{
-		url:   "https://ct.googleapis.com/pilot",
-		chain: []string{googleLeaf, thawteIntermediate},
-
-		function: "QueueAllCertsInChain",
-		expLoggedChains: [][]string{
-			{"Google", "Thawte", "VeriSign"},
-			{"Thawte", "VeriSign"},
-		},
-	},
-	{ // Chain to wrong root results errors.
-		url:   "https://ct.googleapis.com/pilot",
-		chain: []string{megaLeaf, comodoIntermediate, comodoRoot},
-
-		function: "QueueAllCertsInChain",
-		expectedErrs: []errorType{
-			VerifyFailed, FixFailed,
-			VerifyFailed, FixFailed,
-			VerifyFailed, FixFailed,
-		},
-	},
-	{ // Chain without correct root containing loop results in error.
-		url:   "https://ct.googleapis.com/pilot",
-		chain: []string{testC, testB, testA},
-
-		function: "QueueAllCertsInChain",
-		expectedErrs: []errorType{
-			VerifyFailed, FixFailed,
-			VerifyFailed, FixFailed,
-			VerifyFailed, FixFailed,
-		},
-	},
-	{ // Incomplete chain successfully logged.
-		url:   "https://ct.googleapis.com/pilot",
-		chain: []string{googleLeaf},
-
-		function: "QueueAllCertsInChain",
-		expLoggedChains: [][]string{
-			{"Google", "Thawte", "VeriSign"},
-		},
-		expectedErrs: []errorType{VerifyFailed},
-	},
-	{
-		url:   "https://ct.googleapis.com/pilot",
-		chain: []string{testLeaf},
-
-		function: "QueueAllCertsInChain",
-		expLoggedChains: [][]string{
-			{"Leaf", "Intermediate2", "Intermediate1", "CA"},
-		},
-		expectedErrs: []errorType{VerifyFailed},
-	},
-	{ // Garbled chain (with a leaf that has no chain to our roots)
-		url:   "https://ct.googleapis.com/pilot",
-		chain: []string{megaLeaf, googleLeaf, thawteIntermediate, verisignRoot},
-
-		function: "QueueAllCertsInChain",
-		expLoggedChains: [][]string{
-			{"Google", "Thawte", "VeriSign"},
-			{"Thawte", "VeriSign"},
-		},
-		expectedErrs: []errorType{
-			VerifyFailed, FixFailed,
-			VerifyFailed, FixFailed,
-		},
-	},
-	{ // Garbled chain (with a leaf that has a chain to our roots)
-		url:   "https://ct.googleapis.com/pilot",
-		chain: []string{testLeaf, megaLeaf, googleLeaf, thawteIntermediate, comodoRoot},
-
-		function: "QueueAllCertsInChain",
-		expLoggedChains: [][]string{
-			{"Leaf", "Intermediate2", "Intermediate1", "CA"},
-			{"Google", "Thawte", "VeriSign"},
-			{"Thawte", "VeriSign"},
-		},
-		expectedErrs: []errorType{
-			VerifyFailed,
-			VerifyFailed, FixFailed,
-			VerifyFailed, FixFailed,
-		},
-	},
-}
-
-func TestNewFixAndLog(t *testing.T) {
-	// Test that expected chains are logged when adding a chain using QueueChain()
-	for i, test := range newFixAndLogTests {
-		seen := make([]bool, len(test.expLoggedChains))
-		errors := make(chan *FixError)
-		client := &http.Client{Transport: &testRoundTripper{t: t, test: &test, testIndex: i, seen: seen}}
-		fl := NewFixAndLog(1, 1, errors, client, client, test.url, newNilLimiter(), false)
-
-		var wg sync.WaitGroup
-		wg.Add(1)
-		go testErrors(t, i, test.expectedErrs, errors, &wg)
-		switch test.function {
-		case "QueueChain":
-			fl.QueueChain(extractTestChain(t, i, test.chain))
-		case "QueueAllCertsInChain":
-			fl.QueueAllCertsInChain(extractTestChain(t, i, test.chain))
-		}
-		fl.Wait()
-		close(errors)
-		wg.Wait()
-
-		// Check that no chains that were expected to be logged were not.
-		for j, val := range seen {
-			if !val {
-				t.Errorf("#%d: Expected chain was not logged: %s", i, strings.Join(test.expLoggedChains[j], " -> "))
-			}
-		}
-	}
-}
-
-var fixAndLogQueueTests = []fixAndLogTest{
-	{
-		url:   "https://ct.googleapis.com/pilot",
-		chain: []string{googleLeaf, thawteIntermediate, verisignRoot},
-
-		expectedCert:  "Google",
-		expectedChain: []string{"Google", "Thawte", "VeriSign"},
-		expectedRoots: []string{verisignRoot, testRoot},
-	},
-	{
-		url:   "https://ct.googleapis.com/pilot",
-		chain: []string{googleLeaf, googleLeaf, thawteIntermediate, verisignRoot},
-
-		expectedCert:  "Google",
-		expectedChain: []string{"Google", "Thawte", "VeriSign"},
-		expectedRoots: []string{verisignRoot, testRoot},
-	},
-	{ // Test passing a nil chain to FixAndLog.QueueChain()
-		url: "https://ct.googleapis.com/pilot",
-	},
-}
-
-func testQueueAllCertsInChain(t *testing.T, i int, test *fixAndLogTest, fl *FixAndLog) {
-	defer fl.wg.Done()
-	seen := make([]bool, len(test.expectedChain))
-NextToFix:
-	for fix := range fl.fixer.toFix {
-		// Check fix.chain is the chain that's expected.
-		matchTestChain(t, i, test.expectedChain, fix.chain.certs)
-		//Check fix.roots are the roots that are expected for the given url.
-		matchTestRoots(t, i, test.expectedRoots, fix.roots)
-		for j, expCert := range test.expectedChain {
-			if seen[j] {
-				continue
-			}
-			if strings.Contains(nameToKey(&fix.cert.Subject), expCert) {
-				seen[j] = true
-				continue NextToFix
-			}
-		}
-		t.Errorf("#%d: Queued certificate %s was not expected", i, nameToKey(&fix.cert.Subject))
-	}
-	for j, val := range seen {
-		if !val {
-			t.Errorf("#%d: Expected certificate %s was not queued", i, test.expectedChain[j])
-		}
-	}
-}
-
-func TestQueueAllCertsInChain(t *testing.T) {
-	for i, test := range fixAndLogQueueTests {
-		f := &Fixer{toFix: make(chan *toFix)}
-		l := &Logger{
-			url:           test.url,
-			client:        &http.Client{Transport: &testRoundTripper{}},
-			postCertCache: newLockedMap(),
-		}
-		fl := &FixAndLog{fixer: f, chains: make(chan []*x509.Certificate), logger: l, done: newLockedMap()}
-
-		fl.wg.Add(1)
-		go testQueueAllCertsInChain(t, i, &test, fl)
-		fl.QueueAllCertsInChain(extractTestChain(t, i, test.chain))
-		fl.Wait()
-	}
-}
-
-func testFixAndLogQueueChain(t *testing.T, i int, test *fixAndLogTest, fl *FixAndLog) {
-	defer fl.wg.Done()
-
-	fix, ok := <-fl.fixer.toFix
-	if ok {
-		// Check fix.cert is the cert that's expected.
-		if !strings.Contains(nameToKey(&fix.cert.Subject), test.expectedCert) {
-			t.Errorf("#%d: Expected cert does not match queued cert", i)
-		}
-
-		// Check fix.chain is the chain that's expected.
-		matchTestChain(t, i, test.expectedChain, fix.chain.certs)
-
-		//Check fix.roots are the roots that are expected for the given url.
-		matchTestRoots(t, i, test.expectedRoots, fix.roots)
-	}
-}
-
-func TestFixAndLogQueueChain(t *testing.T) {
-	for i, test := range fixAndLogQueueTests {
-		f := &Fixer{toFix: make(chan *toFix)}
-		l := &Logger{
-			url:           test.url,
-			client:        &http.Client{Transport: &testRoundTripper{}},
-			postCertCache: newLockedMap(),
-		}
-		fl := &FixAndLog{fixer: f, chains: make(chan []*x509.Certificate), logger: l, done: newLockedMap()}
-
-		fl.wg.Add(1)
-		go testFixAndLogQueueChain(t, i, &test, fl)
-		fl.QueueChain(extractTestChain(t, i, test.chain))
-		fl.Wait()
-	}
-}
diff --git a/ct/fixchain/fix_error.go b/ct/fixchain/fix_error.go
deleted file mode 100644
index 3f3140f..0000000
--- a/ct/fixchain/fix_error.go
+++ /dev/null
@@ -1,219 +0,0 @@
-package fixchain
-
-import (
-	"bytes"
-	"encoding/json"
-	"encoding/pem"
-	"errors"
-	"fmt"
-	"strconv"
-
-	"github.com/google/certificate-transparency/go/x509"
-)
-
-type errorType int
-
-// FixError types
-const (
-	None errorType = iota
-	ParseFailure
-	CannotFetchURL
-	FixFailed
-	PostFailed    // Call to http.Client.PostChainToLog() failed
-	LogPostFailed // http.Response from Certificate Transparency log contained a status code other than 200
-	VerifyFailed
-)
-
-// FixError is the struct with which errors in the fixing process are reported
-type FixError struct {
-	Type  errorType
-	Cert  *x509.Certificate   // The supplied leaf certificate
-	Chain []*x509.Certificate // The supplied chain
-	URL   string              // URL, if a URL is involved
-	Bad   []byte              // The offending certificate bytes, if applicable
-	Error error               // The error
-	Code  int                 // The http response code from the Certificate Transparency log (only for use with LogPostFailed)
-}
-
-// Equal tests whether this FixError is equal to another given FixError
-func (e FixError) Equal(f *FixError) bool {
-	if f == nil || e.Type != f.Type || e.URL != f.URL || !bytes.Equal(e.Bad, f.Bad) || e.Code != f.Code {
-		return false
-	}
-	// Check Cert equality
-	if e.Cert != nil {
-		if f.Cert == nil || !e.Cert.Equal(f.Cert) {
-			return false
-		}
-	} else if f.Cert != nil {
-		return false
-	}
-	// Check Chain equality
-	if len(e.Chain) != len(f.Chain) {
-		return false
-	}
-	for i := range e.Chain {
-		if !e.Chain[i].Equal(f.Chain[i]) {
-			return false
-		}
-	}
-	// Check Error equality
-	if e.Error != nil {
-		if f.Error == nil || e.Error.Error() != f.Error.Error() {
-			return false
-		}
-	} else if f.Error != nil {
-		return false
-	}
-
-	return true
-}
-
-// TypeString returns a string describing e.Type
-func (e FixError) TypeString() string {
-	switch e.Type {
-	case None:
-		return "None"
-	case ParseFailure:
-		return "ParseFailure"
-	case CannotFetchURL:
-		return "CannotFetchURL"
-	case FixFailed:
-		return "FixFailed"
-	case PostFailed:
-		return "PostFailed"
-	case LogPostFailed:
-		return "LogPostFailed"
-	case VerifyFailed:
-		return "VerifyFailed"
-	default:
-		return fmt.Sprintf("Type %d", e.Type)
-	}
-}
-
-// String converts an error to a (mostly) human readable string
-func (e FixError) String() string {
-	s := e.TypeString() + "\n"
-	if e.Code != 0 {
-		s += "Status Code: " + strconv.Itoa(e.Code) + "\n"
-	}
-	if e.Error != nil {
-		s += "Error: " + e.Error.Error() + "\n"
-	}
-	if e.URL != "" {
-		s += "URL: " + e.URL + "\n"
-	}
-	if e.Bad != nil {
-		s += "Bad: " + dumpPEM(e.Bad)
-	}
-	if e.Cert != nil {
-		s += "Cert: " + dumpPEM(e.Cert.Raw)
-	}
-	if e.Chain != nil {
-		s += "Chain: " + dumpChainPEM(e.Chain)
-	}
-	return s
-}
-
-// MarshalJSON converts a FixError to JSON
-func (e FixError) MarshalJSON() ([]byte, error) {
-	var m struct {
-		Type  string
-		Cert  []byte
-		Chain [][]byte
-		URL   string
-		Bad   []byte
-		Error string
-		Code  int
-	}
-	m.Type = e.TypeString()
-	if e.Cert != nil {
-		m.Cert = e.Cert.Raw
-	}
-	for _, c := range e.Chain {
-		m.Chain = append(m.Chain, c.Raw)
-	}
-	m.URL = e.URL
-	m.Bad = e.Bad
-	if e.Error != nil {
-		m.Error = e.Error.Error()
-	}
-	m.Code = e.Code
-
-	return json.Marshal(m)
-}
-
-// UnmarshalJSON converts the JSON representation of a FixError back to a FixError
-func UnmarshalJSON(b []byte) (*FixError, error) {
-	var u struct {
-		Type  string
-		Cert  []byte
-		Chain [][]byte
-		URL   string
-		Bad   []byte
-		Error string
-		Code  int
-	}
-	err := json.Unmarshal(b, &u)
-	if err != nil {
-		return nil, err
-	}
-
-	ferr := &FixError{}
-	switch u.Type {
-	case "None":
-		ferr.Type = None
-	case "ParseFailure":
-		ferr.Type = ParseFailure
-	case "CannotFetchURL":
-		ferr.Type = CannotFetchURL
-	case "FixFailed":
-		ferr.Type = FixFailed
-	case "PostFailed":
-		ferr.Type = PostFailed
-	case "LogPostFailed":
-		ferr.Type = LogPostFailed
-	case "VerifyFailed":
-		ferr.Type = VerifyFailed
-	default:
-		return nil, errors.New("cannot parse FixError Type")
-	}
-
-	if u.Cert != nil {
-		cert, err := x509.ParseCertificate(u.Cert)
-		if err != nil {
-			return nil, fmt.Errorf("cannot parse FixError Cert: %s", err)
-		}
-		ferr.Cert = cert
-	}
-
-	for _, c := range u.Chain {
-		cert, err := x509.ParseCertificate(c)
-		if err != nil {
-			return nil, fmt.Errorf("cannot parse FixError Chain: %s", err)
-		}
-		ferr.Chain = append(ferr.Chain, cert)
-	}
-
-	ferr.URL = u.URL
-	ferr.Bad = u.Bad
-	if u.Error != "" {
-		ferr.Error = errors.New(u.Error)
-	}
-	ferr.Code = u.Code
-
-	return ferr, nil
-}
-
-func dumpChainPEM(chain []*x509.Certificate) string {
-	var p string
-	for _, cert := range chain {
-		p += dumpPEM(cert.Raw)
-	}
-	return p
-}
-
-func dumpPEM(cert []byte) string {
-	b := pem.Block{Type: "CERTIFICATE", Bytes: cert}
-	return string(pem.EncodeToMemory(&b))
-}
diff --git a/ct/fixchain/fix_error_test.go b/ct/fixchain/fix_error_test.go
deleted file mode 100644
index b6a69c6..0000000
--- a/ct/fixchain/fix_error_test.go
+++ /dev/null
@@ -1,394 +0,0 @@
-package fixchain
-
-import (
-	"errors"
-	"fmt"
-	"testing"
-
-	"github.com/google/certificate-transparency/go/x509"
-)
-
-func TestEqual(t *testing.T) {
-	equalTests := []struct {
-		e        *FixError
-		f        *FixError
-		expEqual bool
-	}{
-		{
-			&FixError{},
-			&FixError{},
-			true,
-		},
-		{
-			&FixError{Type: PostFailed},
-			&FixError{},
-			false,
-		},
-		{
-			&FixError{Type: PostFailed},
-			&FixError{Type: LogPostFailed},
-			false,
-		},
-		{
-			&FixError{Cert: GetTestCertificateFromPEM(t, googleLeaf)},
-			&FixError{},
-			false,
-		},
-		{
-			&FixError{Cert: GetTestCertificateFromPEM(t, googleLeaf)},
-			&FixError{Cert: GetTestCertificateFromPEM(t, megaLeaf)},
-			false,
-		},
-		{
-			&FixError{
-				Chain: []*x509.Certificate{
-					GetTestCertificateFromPEM(t, googleLeaf),
-					GetTestCertificateFromPEM(t, thawteIntermediate),
-					GetTestCertificateFromPEM(t, verisignRoot),
-				},
-			},
-			&FixError{},
-			false,
-		},
-		{ // Chains with only one cert different.
-			&FixError{
-				Chain: []*x509.Certificate{
-					GetTestCertificateFromPEM(t, googleLeaf),
-					GetTestCertificateFromPEM(t, thawteIntermediate),
-					GetTestCertificateFromPEM(t, verisignRoot),
-				},
-			},
-			&FixError{
-				Chain: []*x509.Certificate{
-					GetTestCertificateFromPEM(t, googleLeaf),
-					GetTestCertificateFromPEM(t, thawteIntermediate),
-					GetTestCertificateFromPEM(t, comodoRoot),
-				},
-			},
-			false,
-		},
-		{ // Completely different chains.
-			&FixError{
-				Chain: []*x509.Certificate{
-					GetTestCertificateFromPEM(t, googleLeaf),
-					GetTestCertificateFromPEM(t, thawteIntermediate),
-					GetTestCertificateFromPEM(t, verisignRoot),
-				},
-			},
-			&FixError{
-				Chain: []*x509.Certificate{
-					GetTestCertificateFromPEM(t, megaLeaf),
-					GetTestCertificateFromPEM(t, comodoIntermediate),
-					GetTestCertificateFromPEM(t, comodoRoot),
-				},
-			},
-			false,
-		},
-		{
-			&FixError{URL: "https://www.test.com"},
-			&FixError{},
-			false,
-		},
-		{
-			&FixError{URL: "https://www.test.com"},
-			&FixError{URL: "https://www.test1.com"},
-			false,
-		},
-		{
-			&FixError{Bad: []byte(googleLeaf)},
-			&FixError{},
-			false,
-		},
-		{
-			&FixError{Bad: []byte(googleLeaf)},
-			&FixError{Bad: []byte(megaLeaf)},
-			false,
-		},
-		{
-			&FixError{Error: errors.New("Error1")},
-			&FixError{},
-			false,
-		},
-		{
-			&FixError{Error: errors.New("Error1")},
-			&FixError{Error: errors.New("Error2")},
-			false,
-		},
-		{
-			&FixError{Code: 200},
-			&FixError{},
-			false,
-		},
-		{
-			&FixError{Code: 200},
-			&FixError{Code: 502},
-			false,
-		},
-		{
-			&FixError{
-				Type: LogPostFailed,
-				Cert: GetTestCertificateFromPEM(t, googleLeaf),
-				Chain: []*x509.Certificate{
-					GetTestCertificateFromPEM(t, googleLeaf),
-					GetTestCertificateFromPEM(t, thawteIntermediate),
-					GetTestCertificateFromPEM(t, verisignRoot),
-				},
-				URL:   "https://www.test.com",
-				Bad:   GetTestCertificateFromPEM(t, googleLeaf).Raw,
-				Error: errors.New("Log Post Failed"),
-				Code:  404,
-			},
-			&FixError{},
-			false,
-		},
-		{
-			&FixError{},
-			&FixError{
-				Type: LogPostFailed,
-				Cert: GetTestCertificateFromPEM(t, googleLeaf),
-				Chain: []*x509.Certificate{
-					GetTestCertificateFromPEM(t, googleLeaf),
-					GetTestCertificateFromPEM(t, thawteIntermediate),
-					GetTestCertificateFromPEM(t, verisignRoot),
-				},
-				URL:   "https://www.test.com",
-				Bad:   GetTestCertificateFromPEM(t, googleLeaf).Raw,
-				Error: errors.New("Log Post Failed"),
-				Code:  404,
-			},
-			false,
-		},
-		{
-			&FixError{
-				Type: LogPostFailed,
-				Cert: GetTestCertificateFromPEM(t, googleLeaf),
-				Chain: []*x509.Certificate{
-					GetTestCertificateFromPEM(t, googleLeaf),
-					GetTestCertificateFromPEM(t, thawteIntermediate),
-					GetTestCertificateFromPEM(t, verisignRoot),
-				},
-				URL:   "https://www.test.com",
-				Bad:   GetTestCertificateFromPEM(t, googleLeaf).Raw,
-				Error: errors.New("Log Post Failed"),
-				Code:  404,
-			},
-			&FixError{
-				Type: LogPostFailed,
-				Cert: GetTestCertificateFromPEM(t, googleLeaf),
-				Chain: []*x509.Certificate{
-					GetTestCertificateFromPEM(t, googleLeaf),
-					GetTestCertificateFromPEM(t, thawteIntermediate),
-					GetTestCertificateFromPEM(t, verisignRoot),
-				},
-				URL:   "https://www.test.com",
-				Bad:   GetTestCertificateFromPEM(t, googleLeaf).Raw,
-				Error: errors.New("Log Post Failed"),
-				Code:  404,
-			},
-			true,
-		},
-		{
-			&FixError{
-				Type: PostFailed,
-				Cert: GetTestCertificateFromPEM(t, googleLeaf),
-				Chain: []*x509.Certificate{
-					GetTestCertificateFromPEM(t, googleLeaf),
-					GetTestCertificateFromPEM(t, thawteIntermediate),
-					GetTestCertificateFromPEM(t, verisignRoot),
-				},
-				URL:   "https://www.test.com",
-				Bad:   GetTestCertificateFromPEM(t, googleLeaf).Raw,
-				Error: errors.New("Post Failed"),
-				Code:  404,
-			},
-			&FixError{
-				Type: LogPostFailed,
-				Cert: GetTestCertificateFromPEM(t, megaLeaf),
-				Chain: []*x509.Certificate{
-					GetTestCertificateFromPEM(t, megaLeaf),
-					GetTestCertificateFromPEM(t, comodoIntermediate),
-					GetTestCertificateFromPEM(t, comodoRoot),
-				},
-				URL:   "https://www.test1.com",
-				Bad:   GetTestCertificateFromPEM(t, megaLeaf).Raw,
-				Error: errors.New("Log Post Failed"),
-				Code:  502,
-			},
-			false,
-		},
-		{ // nil test
-			&FixError{
-				Type: LogPostFailed,
-				Cert: GetTestCertificateFromPEM(t, googleLeaf),
-				Chain: []*x509.Certificate{
-					GetTestCertificateFromPEM(t, googleLeaf),
-					GetTestCertificateFromPEM(t, thawteIntermediate),
-					GetTestCertificateFromPEM(t, verisignRoot),
-				},
-				URL:   "https://www.test.com",
-				Bad:   GetTestCertificateFromPEM(t, googleLeaf).Raw,
-				Error: errors.New("Log Post Failed"),
-				Code:  404,
-			},
-			nil,
-			false,
-		},
-	}
-
-	for i, test := range equalTests {
-		if test.e.Equal(test.f) != test.expEqual {
-			t.Errorf("#%d: expected FixError.Equal() to return %t, returned %t", i, test.expEqual, !test.expEqual)
-		}
-	}
-}
-
-func TestTypeString(t *testing.T) {
-	typeStringTests := []struct {
-		ferr     FixError
-		expected string
-	}{
-		{
-			FixError{Type: None},
-			"None",
-		},
-		{
-			FixError{Type: ParseFailure},
-			"ParseFailure",
-		},
-		{
-			FixError{Type: CannotFetchURL},
-			"CannotFetchURL",
-		},
-		{
-			FixError{Type: FixFailed},
-			"FixFailed",
-		},
-		{
-			FixError{Type: PostFailed},
-			"PostFailed",
-		},
-		{
-			FixError{Type: LogPostFailed},
-			"LogPostFailed",
-		},
-		{
-			FixError{Type: VerifyFailed},
-			"VerifyFailed",
-		},
-		{
-			FixError{},
-			"None",
-		},
-	}
-
-	for i, test := range typeStringTests {
-		if got, want := test.ferr.TypeString(), test.expected; got != want {
-			t.Errorf("#%d: TypeString() returned %s, expected %s.", i, got, want)
-		}
-	}
-}
-
-func TestString(t *testing.T) {
-	stringTests := []struct {
-		ferr *FixError
-		str  string
-	}{
-		{
-			&FixError{Type: None},
-			"None\n",
-		},
-		{
-			&FixError{
-				Type: LogPostFailed,
-				Cert: GetTestCertificateFromPEM(t, googleLeaf),
-				Chain: []*x509.Certificate{
-					GetTestCertificateFromPEM(t, googleLeaf),
-					GetTestCertificateFromPEM(t, thawteIntermediate),
-					GetTestCertificateFromPEM(t, verisignRoot),
-				},
-				URL:   "https://www.test.com",
-				Error: errors.New("Log Post Failed"),
-				Code:  404,
-			},
-			"LogPostFailed\n" +
-				"Status Code: 404\n" +
-				"Error: Log Post Failed\n" +
-				"URL: https://www.test.com\n" +
-				"Cert: " + googleLeaf +
-				"Chain: " + googleLeaf + thawteIntermediate + verisignRoot,
-		},
-	}
-
-	for i, test := range stringTests {
-		if got, want := test.ferr.String(), test.str; got != want {
-			t.Errorf("#%d: String() returned %s, expected %s.", i, got, want)
-		}
-	}
-}
-
-func TestMarshalJSON(t *testing.T) {
-	marshalJSONTests := []*FixError{
-		&FixError{},
-		&FixError{
-			Type: LogPostFailed,
-			Cert: GetTestCertificateFromPEM(t, googleLeaf),
-			Chain: []*x509.Certificate{
-				GetTestCertificateFromPEM(t, googleLeaf),
-				GetTestCertificateFromPEM(t, thawteIntermediate),
-				GetTestCertificateFromPEM(t, verisignRoot),
-			},
-			URL:   "https://www.test.com",
-			Bad:   GetTestCertificateFromPEM(t, googleLeaf).Raw,
-			Error: errors.New("Log Post Failed"),
-			Code:  404,
-		},
-	}
-
-	for i, test := range marshalJSONTests {
-		b, err := test.MarshalJSON()
-		if err != nil {
-			t.Errorf("#%d: Error marshalling json: %s", i, err.Error())
-		}
-
-		ferr, err := UnmarshalJSON(b)
-		if err != nil {
-			t.Errorf("#%d: Error unmarshalling json: %s", i, err.Error())
-		}
-
-		if !test.Equal(ferr) {
-			t.Errorf("#%d: Original FixError does not match marshalled-then-unmarshalled FixError", i)
-		}
-	}
-}
-
-func TestDumpPEM(t *testing.T) {
-	dumpPEMTests := []string{googleLeaf}
-
-	for i, test := range dumpPEMTests {
-		cert := GetTestCertificateFromPEM(t, test)
-		p := dumpPEM(cert.Raw)
-		certFromPEM := GetTestCertificateFromPEM(t, p)
-		if !cert.Equal(certFromPEM) {
-			t.Errorf("#%d: cert from output of dumpPEM() does not match original", i)
-		}
-	}
-}
-
-func TestDumpChainPEM(t *testing.T) {
-	dumpChainPEMTests := []struct {
-		chain    []string
-		expected string
-	}{
-		{
-			[]string{googleLeaf, thawteIntermediate},
-			fmt.Sprintf("%s%s", googleLeaf, thawteIntermediate),
-		},
-	}
-
-	for i, test := range dumpChainPEMTests {
-		chain := extractTestChain(t, i, test.chain)
-		if got := dumpChainPEM(chain); got != test.expected {
-			t.Errorf("#%d: dumpChainPEM() returned %s, expected %s", i, got, test.expected)
-		}
-	}
-}
diff --git a/ct/fixchain/fix_test.go b/ct/fixchain/fix_test.go
deleted file mode 100644
index ca5a98e..0000000
--- a/ct/fixchain/fix_test.go
+++ /dev/null
@@ -1,213 +0,0 @@
-package fixchain
-
-import (
-	"net/http"
-	"testing"
-
-	"github.com/google/certificate-transparency/go/x509"
-)
-
-var constructChainTests = []fixTest{
-	// constructChain()
-	{ // Correct chain returns chain
-		cert:  googleLeaf,
-		chain: []string{thawteIntermediate, verisignRoot},
-		roots: []string{verisignRoot},
-
-		function: "constructChain",
-		expectedChains: [][]string{
-			{"Google", "Thawte", "VeriSign"},
-		},
-	},
-	{
-		cert:  testLeaf,
-		chain: []string{testIntermediate2, testIntermediate1, testRoot},
-		roots: []string{testRoot},
-
-		function: "constructChain",
-		expectedChains: [][]string{
-			{"Leaf", "Intermediate2", "Intermediate1", "CA"},
-			{"Leaf", "Intermediate2", "Intermediate1", "CA", "CA"},
-		},
-	},
-	{ // No roots results in an error
-		cert:  googleLeaf,
-		chain: []string{thawteIntermediate, verisignRoot},
-
-		function:     "constructChain",
-		expectedErrs: []errorType{VerifyFailed},
-	},
-	{ // Incomplete chain results in an error
-		cert:  googleLeaf,
-		roots: []string{verisignRoot},
-
-		function:     "constructChain",
-		expectedErrs: []errorType{VerifyFailed},
-	},
-	{ // The wrong intermediate and root results in an error
-		cert:  megaLeaf,
-		chain: []string{thawteIntermediate, verisignRoot},
-		roots: []string{verisignRoot},
-
-		function:     "constructChain",
-		expectedErrs: []errorType{VerifyFailed},
-	},
-	{ // The wrong root results in an error
-		cert:  megaLeaf,
-		chain: []string{comodoIntermediate, verisignRoot},
-		roots: []string{verisignRoot},
-
-		function:     "constructChain",
-		expectedErrs: []errorType{VerifyFailed},
-	},
-}
-
-var fixChainTests = []fixTest{
-	// fixChain()
-	{ // Correct chain returns chain
-		cert:  googleLeaf,
-		chain: []string{thawteIntermediate, verisignRoot},
-		roots: []string{verisignRoot},
-
-		function: "fixChain",
-		expectedChains: [][]string{
-			{"Google", "Thawte", "VeriSign"},
-		},
-	},
-	{ // No roots results in an error
-		cert:  googleLeaf,
-		chain: []string{thawteIntermediate, verisignRoot},
-
-		function:     "fixChain",
-		expectedErrs: []errorType{FixFailed},
-	},
-	{ // No roots where chain that will be built contains a loop results in error
-		cert:  testC,
-		chain: []string{testB, testA},
-
-		function:     "fixChain",
-		expectedErrs: []errorType{FixFailed},
-	},
-	{ // Incomplete chain returns fixed chain
-		cert:  googleLeaf,
-		roots: []string{verisignRoot},
-
-		function: "fixChain",
-		expectedChains: [][]string{
-			{"Google", "Thawte", "VeriSign"},
-		},
-	},
-	{
-		cert:  testLeaf,
-		chain: []string{testIntermediate2},
-		roots: []string{testRoot},
-
-		function: "fixChain",
-		expectedChains: [][]string{
-			{"Leaf", "Intermediate2", "Intermediate1", "CA"},
-		},
-	},
-	{
-		cert:  testLeaf,
-		chain: []string{testIntermediate1},
-		roots: []string{testRoot},
-
-		function: "fixChain",
-		expectedChains: [][]string{
-			{"Leaf", "Intermediate2", "Intermediate1", "CA"},
-		},
-	},
-	{
-		cert:  testLeaf,
-		roots: []string{testRoot},
-
-		function: "fixChain",
-		expectedChains: [][]string{
-			{"Leaf", "Intermediate2", "Intermediate1", "CA"},
-		},
-	},
-	{ // The wrong intermediate and root results in an error
-		cert:  megaLeaf,
-		chain: []string{thawteIntermediate, verisignRoot},
-		roots: []string{verisignRoot},
-
-		function:     "fixChain",
-		expectedErrs: []errorType{FixFailed},
-	},
-	{ // The wrong root results in an error
-		cert:  megaLeaf,
-		chain: []string{comodoIntermediate, verisignRoot},
-		roots: []string{verisignRoot},
-
-		function:     "fixChain",
-		expectedErrs: []errorType{FixFailed},
-	},
-	// TODO(katjoyce): Add test where cert has multiple URLs in AIA extension.
-}
-
-func setUpFix(t *testing.T, i int, ft *fixTest) *toFix {
-	// Create & populate toFix to test from fixTest info
-	fix := &toFix{
-		cert:  GetTestCertificateFromPEM(t, ft.cert),
-		chain: newDedupedChain(extractTestChain(t, i, ft.chain)),
-		roots: extractTestRoots(t, i, ft.roots),
-		cache: newURLCache(&http.Client{Transport: &testRoundTripper{}}, false),
-	}
-
-	intermediates := x509.NewCertPool()
-	for j, cert := range ft.chain {
-		ok := intermediates.AppendCertsFromPEM([]byte(cert))
-		if !ok {
-			t.Errorf("#%d: Failed to parse intermediate #%d", i, j)
-		}
-	}
-
-	fix.opts = &x509.VerifyOptions{
-		Intermediates:     intermediates,
-		Roots:             fix.roots,
-		DisableTimeChecks: true,
-		KeyUsages:         []x509.ExtKeyUsage{x509.ExtKeyUsageAny},
-	}
-
-	return fix
-}
-
-func testFixChainFunctions(t *testing.T, i int, ft *fixTest) {
-	fix := setUpFix(t, i, ft)
-
-	var chains [][]*x509.Certificate
-	var ferrs []*FixError
-	switch ft.function {
-	case "constructChain":
-		chains, ferrs = fix.constructChain()
-	case "fixChain":
-		chains, ferrs = fix.fixChain()
-	case "handleChain":
-		chains, ferrs = fix.handleChain()
-	}
-
-	matchTestChainList(t, i, ft.expectedChains, chains)
-	matchTestErrorList(t, i, ft.expectedErrs, ferrs)
-}
-
-func TestFixChainFunctions(t *testing.T) {
-	var allTests []fixTest
-	allTests = append(allTests, constructChainTests...)
-	allTests = append(allTests, fixChainTests...)
-	allTests = append(allTests, handleChainTests...)
-	for i, ft := range allTests {
-		testFixChainFunctions(t, i, &ft)
-	}
-}
-
-func TestFix(t *testing.T) {
-	for i, test := range handleChainTests {
-		chains, ferrs := Fix(GetTestCertificateFromPEM(t, test.cert),
-			extractTestChain(t, i, test.chain),
-			extractTestRoots(t, i, test.roots),
-			&http.Client{Transport: &testRoundTripper{}})
-
-		matchTestChainList(t, i, test.expectedChains, chains)
-		matchTestErrorList(t, i, test.expectedErrs, ferrs)
-	}
-}
diff --git a/ct/fixchain/fixer.go b/ct/fixchain/fixer.go
deleted file mode 100644
index bc91d82..0000000
--- a/ct/fixchain/fixer.go
+++ /dev/null
@@ -1,255 +0,0 @@
-package fixchain
-
-import (
-	"bytes"
-	"log"
-	"net/http"
-	"sort"
-	"sync"
-	"sync/atomic"
-	"time"
-
-	"github.com/google/certificate-transparency/go/x509"
-)
-
-// Fixer contains methods to asynchronously fix certificate chains and
-// properties to store information about each attempt that is made to fix a
-// certificate chain.
-type Fixer struct {
-	toFix  chan *toFix
-	chains chan<- []*x509.Certificate // Chains successfully fixed by the fixer
-	errors chan<- *FixError
-
-	active uint32
-
-	reconstructed       uint32
-	notReconstructed    uint32
-	fixed               uint32
-	notFixed            uint32
-	validChainsProduced uint32
-	validChainsOut      uint32
-
-	wg    sync.WaitGroup
-	cache *urlCache
-}
-
-// QueueChain adds the given cert and chain to the queue to be fixed by the
-// fixer, with respect to the given roots.  Note: chain is expected to be in the
-// order of cert --> root.
-func (f *Fixer) QueueChain(cert *x509.Certificate, chain []*x509.Certificate, roots *x509.CertPool) {
-	f.toFix <- &toFix{
-		cert:  cert,
-		chain: newDedupedChain(chain),
-		roots: roots,
-		cache: f.cache,
-	}
-}
-
-// Wait for all the fixer workers to finish.
-func (f *Fixer) Wait() {
-	close(f.toFix)
-	f.wg.Wait()
-}
-
-func (f *Fixer) updateCounters(chains [][]*x509.Certificate, ferrs []*FixError) {
-	atomic.AddUint32(&f.validChainsProduced, uint32(len(chains)))
-
-	var verifyFailed bool
-	var fixFailed bool
-	for _, ferr := range ferrs {
-		switch ferr.Type {
-		case VerifyFailed:
-			verifyFailed = true
-		case FixFailed:
-			fixFailed = true
-		}
-	}
-	// No errors --> reconstructed
-	// VerifyFailed --> notReconstructed
-	// VerifyFailed but no FixFailed --> fixed
-	// VerifyFailed and FixFailed --> notFixed
-	if verifyFailed {
-		atomic.AddUint32(&f.notReconstructed, 1)
-		// FixFailed error will only be present if a VerifyFailed error is, as
-		// fixChain() is only called if constructChain() fails.
-		if fixFailed {
-			atomic.AddUint32(&f.notFixed, 1)
-			return
-		}
-		atomic.AddUint32(&f.fixed, 1)
-		return
-	}
-	atomic.AddUint32(&f.reconstructed, 1)
-}
-
-type chainSlice struct {
-	chains [][]*x509.Certificate
-}
-
-func min(a, b int) int {
-	if a < b {
-		return a
-	}
-	return b
-}
-
-// sort.Sort(data Interface) for chainSlice - uses data.Len, data.Less & data.Swap.
-// Sort will sort the chains contained within the chainSlice.  The chains will
-// be sorted in order of the first certificate in the chain, i.e. their leaf
-// certificate.  If two chains have equal leaf certificates, they will be sorted
-// by the second certificate in the chain, and so on.  By this logic, a chain
-// that is a subchain of another chain beginning at the leaf of the other chain,
-// will come before the other chain after sorting.
-//
-// Example:
-//
-// Before sorting:
-// A -> B -> C
-// D
-// A -> C
-// A -> B
-//
-// After sorting:
-// A -> B
-// A -> B -> C
-// A -> C
-// D
-func (c chainSlice) Len() int { return len(c.chains) }
-func (c chainSlice) Less(i, j int) bool {
-	chi := c.chains[i]
-	chj := c.chains[j]
-	for k := 0; k < min(len(chi), len(chj)); k++ {
-		if !chi[k].Equal(chj[k]) {
-			return bytes.Compare(chi[k].Raw, chj[k].Raw) < 0
-		}
-	}
-	return len(chi) < len(chj)
-}
-func (c chainSlice) Swap(i, j int) {
-	t := c.chains[i]
-	c.chains[i] = c.chains[j]
-	c.chains[j] = t
-}
-
-// removeSuperChains will remove super chains from the list of chains passed to
-// it.  A super chain is considered to be a chain whose first x certificates are
-// included in the list somewhere else as a whole chain.  Put another way, if
-// there exists a chain A in the list, and another chain B that is A with some
-// additional certificates chained onto the end, B is a super chain of A
-// (and A is a subchain of B).
-//
-// Examples:
-// 1) A -> B -> C is a super chain of A -> B, and both are super chains of A.
-// 2) Z -> A -> B is not a super chain of A -> B, as A -> B is not at the
-//    beginning of Z -> A -> B.
-// 3) Calling removeSuperChains on:
-//    A -> B -> C
-//    A -> C
-//    A -> B
-//    A -> C -> D
-//    will return:
-//    A -> B
-//    A -> C
-// 4) Calling removeSuperChains on:
-//    A -> B -> C
-//    A -> C
-//    A -> B
-//    A -> C -> D
-//    A
-//    will return:
-//    A
-func removeSuperChains(chains [][]*x509.Certificate) [][]*x509.Certificate {
-	// Sort the list of chains using the sorting algorithm described above.
-	// This will result in chains and their super chains being grouped together
-	// in the list, with the shortest chain listed first in the group (i.e. a
-	// chain, and then all its super chains - if any - listed directly after
-	// that chain).
-	c := chainSlice{chains: chains}
-	sort.Sort(c)
-	var retChains [][]*x509.Certificate
-NextChain:
-	// Start at the beginning of the list.
-	for i := 0; i < len(c.chains); {
-		// Add the chain to the list of chains to be returned.
-		retChains = append(retChains, c.chains[i])
-		// Step past any super chains of the chain just added to the return list,
-		// without adding them to the return list.  We do not want super chains
-		// of other chains in our return list.  Due to the initial sort of the
-		// list, any super chains of a chain will come directly after said chain.
-		for j := i + 1; j < len(c.chains); j++ {
-			for k := range c.chains[i] {
-				// When a chain that is not a super chain of the chain most
-				// recently added to the return list is found, move to that
-				// chain and start over.
-				if !c.chains[i][k].Equal(c.chains[j][k]) {
-					i = j
-					continue NextChain
-				}
-			}
-		}
-		break
-	}
-	return retChains
-}
-
-func (f *Fixer) fixServer() {
-	defer f.wg.Done()
-
-	for fix := range f.toFix {
-		atomic.AddUint32(&f.active, 1)
-		chains, ferrs := fix.handleChain()
-		f.updateCounters(chains, ferrs)
-		for _, ferr := range ferrs {
-			f.errors <- ferr
-		}
-
-		// If handleChain() outputs valid chains that are subchains of other
-		// valid chains, (where the subchains start at the leaf)
-		// e.g. A -> B -> C and A -> B -> C -> D, only forward on the shorter
-		// of the chains.
-		for _, chain := range removeSuperChains(chains) {
-			f.chains <- chain
-			atomic.AddUint32(&f.validChainsOut, 1)
-		}
-		atomic.AddUint32(&f.active, ^uint32(0))
-	}
-}
-
-func (f *Fixer) newFixServerPool(workerCount int) {
-	for i := 0; i < workerCount; i++ {
-		f.wg.Add(1)
-		go f.fixServer()
-	}
-}
-
-func (f *Fixer) logStats() {
-	t := time.NewTicker(time.Second)
-	go func() {
-		for _ = range t.C {
-			log.Printf("fixers: %d active, %d reconstructed, "+
-				"%d not reconstructed, %d fixed, %d not fixed, "+
-				"%d valid chains produced, %d valid chains sent",
-				f.active, f.reconstructed, f.notReconstructed,
-				f.fixed, f.notFixed, f.validChainsProduced, f.validChainsOut)
-		}
-	}()
-}
-
-// NewFixer creates a new asynchronous fixer and starts up a pool of
-// workerCount workers.  Errors are pushed to the errors channel, and fixed
-// chains are pushed to the chains channel.  client is used to try to get any
-// missing certificates that are needed when attempting to fix chains.
-func NewFixer(workerCount int, chains chan<- []*x509.Certificate, errors chan<- *FixError, client *http.Client, logStats bool) *Fixer {
-	f := &Fixer{
-		toFix:  make(chan *toFix),
-		chains: chains,
-		errors: errors,
-		cache:  newURLCache(client, logStats),
-	}
-
-	f.newFixServerPool(workerCount)
-	if logStats {
-		f.logStats()
-	}
-	return f
-}
diff --git a/ct/fixchain/fixer_test.go b/ct/fixchain/fixer_test.go
deleted file mode 100644
index 258ae51..0000000
--- a/ct/fixchain/fixer_test.go
+++ /dev/null
@@ -1,280 +0,0 @@
-package fixchain
-
-import (
-	"net/http"
-	"sync"
-	"testing"
-
-	"github.com/google/certificate-transparency/go/x509"
-)
-
-// NewFixer() test
-func TestNewFixer(t *testing.T) {
-	chains := make(chan []*x509.Certificate)
-	errors := make(chan *FixError)
-
-	var expectedChains [][]string
-	var expectedErrs []errorType
-	for _, test := range handleChainTests {
-		expectedChains = append(expectedChains, test.expectedChains...)
-		expectedErrs = append(expectedErrs, test.expectedErrs...)
-	}
-
-	var wg sync.WaitGroup
-	wg.Add(2)
-	go testChains(t, 0, expectedChains, chains, &wg)
-	go testErrors(t, 0, expectedErrs, errors, &wg)
-
-	f := NewFixer(10, chains, errors, &http.Client{Transport: &testRoundTripper{}}, false)
-	for _, test := range handleChainTests {
-		f.QueueChain(GetTestCertificateFromPEM(t, test.cert),
-			extractTestChain(t, 0, test.chain), extractTestRoots(t, 0, test.roots))
-	}
-	f.Wait()
-
-	close(chains)
-	close(errors)
-	wg.Wait()
-}
-
-// Fixer.fixServer() test
-func TestFixServer(t *testing.T) {
-	cache := &urlCache{cache: newLockedCache(), client: &http.Client{Transport: &testRoundTripper{}}}
-	f := &Fixer{cache: cache}
-
-	var wg sync.WaitGroup
-	fixServerTests := handleChainTests
-
-	// Pass chains to be fixed one at a time to fixServer and check the chain
-	// and errors produced are correct.
-	for i, fst := range fixServerTests {
-		chains := make(chan []*x509.Certificate)
-		errors := make(chan *FixError)
-		f.toFix = make(chan *toFix)
-		f.chains = chains
-		f.errors = errors
-
-		wg.Add(2)
-		go testChains(t, i, fst.expectedChains, chains, &wg)
-		go testErrors(t, i, fst.expectedErrs, errors, &wg)
-
-		f.wg.Add(1)
-		go f.fixServer()
-		f.QueueChain(GetTestCertificateFromPEM(t, fst.cert),
-			extractTestChain(t, i, fst.chain), extractTestRoots(t, i, fst.roots))
-		f.Wait()
-
-		close(chains)
-		close(errors)
-		wg.Wait()
-	}
-
-	// Pass multiple chains to be fixed to fixServer and check the chain and
-	// errors produced are correct.
-	chains := make(chan []*x509.Certificate)
-	errors := make(chan *FixError)
-	f.toFix = make(chan *toFix)
-	f.chains = chains
-	f.errors = errors
-
-	var expectedChains [][]string
-	var expectedErrs []errorType
-	for _, fst := range fixServerTests {
-		expectedChains = append(expectedChains, fst.expectedChains...)
-		expectedErrs = append(expectedErrs, fst.expectedErrs...)
-	}
-
-	i := len(fixServerTests)
-	wg.Add(2)
-	go testChains(t, i, expectedChains, chains, &wg)
-	go testErrors(t, i, expectedErrs, errors, &wg)
-
-	f.wg.Add(1)
-	go f.fixServer()
-	for _, fst := range fixServerTests {
-		f.QueueChain(GetTestCertificateFromPEM(t, fst.cert),
-			extractTestChain(t, i, fst.chain), extractTestRoots(t, i, fst.roots))
-	}
-	f.Wait()
-
-	close(chains)
-	close(errors)
-	wg.Wait()
-}
-
-func TestRemoveSuperChains(t *testing.T) {
-	superChainsTests := []struct {
-		chains         [][]string
-		expectedChains [][]string
-	}{
-		{
-			chains: [][]string{
-				[]string{googleLeaf, thawteIntermediate},
-				[]string{googleLeaf},
-			},
-			expectedChains: [][]string{
-				[]string{"Google"},
-			},
-		},
-		{
-			chains: [][]string{
-				[]string{googleLeaf, verisignRoot},
-				[]string{googleLeaf, thawteIntermediate},
-				[]string{googleLeaf},
-			},
-			expectedChains: [][]string{
-				[]string{"Google"},
-			},
-		},
-		{
-			chains: [][]string{
-				[]string{googleLeaf, thawteIntermediate, verisignRoot},
-				[]string{googleLeaf, thawteIntermediate},
-				[]string{googleLeaf},
-			},
-			expectedChains: [][]string{
-				[]string{"Google"},
-			},
-		},
-		{
-			chains: [][]string{
-				[]string{googleLeaf, thawteIntermediate, verisignRoot},
-				[]string{googleLeaf},
-			},
-			expectedChains: [][]string{
-				[]string{"Google"},
-			},
-		},
-		{
-			chains: [][]string{
-				[]string{googleLeaf, thawteIntermediate, verisignRoot},
-				[]string{googleLeaf, verisignRoot},
-				[]string{googleLeaf, thawteIntermediate},
-			},
-			expectedChains: [][]string{
-				[]string{"Google", "Thawte"},
-				[]string{"Google", "VeriSign"},
-			},
-		},
-		{
-			chains: [][]string{
-				[]string{testLeaf, testIntermediate2},
-				[]string{googleLeaf, thawteIntermediate, verisignRoot},
-				[]string{testLeaf, testIntermediate2, testIntermediate1, testRoot},
-				[]string{googleLeaf, verisignRoot},
-				[]string{testLeaf, testIntermediate2, testIntermediate1},
-				[]string{googleLeaf, thawteIntermediate},
-				[]string{testLeaf, googleLeaf, thawteIntermediate, verisignRoot},
-			},
-			expectedChains: [][]string{
-				[]string{"Google", "Thawte"},
-				[]string{"Google", "VeriSign"},
-				[]string{"Leaf", "Intermediate2"},
-				[]string{"Leaf", "Google", "Thawte", "VeriSign"},
-			},
-		},
-	}
-
-	for i, test := range superChainsTests {
-		var chains [][]*x509.Certificate
-		for _, chain := range test.chains {
-			chains = append(chains, extractTestChain(t, i, chain))
-		}
-		matchTestChainList(t, i, test.expectedChains, removeSuperChains(chains))
-	}
-}
-
-// Fixer.updateCounters() tests
-func TestUpdateCounters(t *testing.T) {
-	counterTests := []struct {
-		errors           []errorType
-		reconstructed    uint32
-		notReconstructed uint32
-		fixed            uint32
-		notFixed         uint32
-	}{
-		{[]errorType{}, 1, 0, 0, 0},
-		{[]errorType{VerifyFailed}, 0, 1, 1, 0},
-		{[]errorType{VerifyFailed, FixFailed}, 0, 1, 0, 1},
-
-		{[]errorType{ParseFailure}, 1, 0, 0, 0},
-		{[]errorType{ParseFailure, VerifyFailed}, 0, 1, 1, 0},
-		{[]errorType{ParseFailure, VerifyFailed, FixFailed}, 0, 1, 0, 1},
-	}
-
-	for i, test := range counterTests {
-		f := &Fixer{}
-		var ferrs []*FixError
-		for _, err := range test.errors {
-			ferrs = append(ferrs, &FixError{Type: err})
-		}
-		f.updateCounters(nil, ferrs)
-
-		if f.reconstructed != test.reconstructed {
-			t.Errorf("#%d: Incorrect value for reconstructed, wanted %d, got %d", i, test.reconstructed, f.reconstructed)
-		}
-		if f.notReconstructed != test.notReconstructed {
-			t.Errorf("#%d: Incorrect value for notReconstructed, wanted %d, got %d", i, test.notReconstructed, f.notReconstructed)
-		}
-		if f.fixed != test.fixed {
-			t.Errorf("#%d: Incorrect value for fixed, wanted %d, got %d", i, test.fixed, f.fixed)
-		}
-		if f.notFixed != test.notFixed {
-			t.Errorf("#%d: Incorrect value for notFixed, wanted %d, got %d", i, test.notFixed, f.notFixed)
-		}
-	}
-}
-
-// Fixer.QueueChain() tests
-type fixerQueueTest struct {
-	cert  string
-	chain []string
-	roots []string
-
-	dchain []string
-}
-
-var fixerQueueTests = []fixerQueueTest{
-	{
-		cert:  googleLeaf,
-		chain: []string{verisignRoot, thawteIntermediate},
-		roots: []string{verisignRoot},
-
-		dchain: []string{"VeriSign", "Thawte"},
-	},
-	{
-		cert:  googleLeaf,
-		chain: []string{verisignRoot, verisignRoot, thawteIntermediate},
-		roots: []string{verisignRoot},
-
-		dchain: []string{"VeriSign", "Thawte"},
-	},
-	{
-		cert:  googleLeaf,
-		roots: []string{verisignRoot},
-
-		dchain: []string{},
-	},
-}
-
-func testFixerQueueChain(t *testing.T, i int, qt *fixerQueueTest, f *Fixer) {
-	defer f.wg.Done()
-	fix := <-f.toFix
-	// Check the deduped chain
-	matchTestChain(t, i, qt.dchain, fix.chain.certs)
-}
-
-func TestFixerQueueChain(t *testing.T) {
-	ch := make(chan *toFix)
-	defer close(ch)
-	f := &Fixer{toFix: ch}
-
-	for i, qt := range fixerQueueTests {
-		f.wg.Add(1)
-		go testFixerQueueChain(t, i, &qt, f)
-		chain := extractTestChain(t, i, qt.chain)
-		roots := extractTestRoots(t, i, qt.roots)
-		f.QueueChain(GetTestCertificateFromPEM(t, qt.cert), chain, roots)
-		f.wg.Wait()
-	}
-}
diff --git a/ct/fixchain/hash.go b/ct/fixchain/hash.go
deleted file mode 100644
index 50e5ea2..0000000
--- a/ct/fixchain/hash.go
+++ /dev/null
@@ -1,71 +0,0 @@
-package fixchain
-
-import (
-	"crypto/sha256"
-	"sort"
-
-	"github.com/google/certificate-transparency/go/x509"
-)
-
-const hashSize = sha256.Size
-
-var newHash = sha256.New
-
-func hash(c *x509.Certificate) (hash [hashSize]byte) {
-	copy(hash[:], newHash().Sum(c.Raw))
-	return
-}
-
-func hashChain(ch []*x509.Certificate) (hash [hashSize]byte) {
-	h := newHash()
-	for _, c := range ch {
-		h.Write(newHash().Sum(c.Raw))
-	}
-	copy(hash[:], h.Sum(nil))
-	return
-}
-
-// hashBag hashes all of the certs in the chain, irrespective of their order.
-// Chains containing the same certs in the same order with no duplicates will
-// result in the same hash. Chains containing the same certs in different orders
-// with no duplicates will result in the same hash.  Chains containing the same
-// certs (either in the same order or in different orders) that contain exactly
-// the same duplicated certs, will result in the same hash.  If chains contain
-// the same certs (either in the same order or in different orders) and some
-// certs are duplicated, but the specific certs that are duplicated differ
-// and/or the number of times they are duplicated differ, these chains will
-// result in different hashes.
-func hashBag(chain []*x509.Certificate) [hashSize]byte {
-	b := bag{certs: make([]*x509.Certificate, len(chain))}
-	copy(b.certs, chain)
-	sort.Sort(b)
-	return hashChain(b.certs)
-}
-
-type bag struct {
-	certs []*x509.Certificate
-}
-
-// sort.Sort(data Interface) for bag - uses data.Len, data.Less & data.Swap
-func (b bag) Len() int { return len(b.certs) }
-func (b bag) Less(i, j int) bool {
-	ci := b.certs[i].Raw
-	cj := b.certs[j].Raw
-	if len(ci) != len(cj) {
-		return len(ci) < len(cj)
-	}
-	for n := range ci {
-		if ci[n] < cj[n] {
-			return true
-		}
-		if ci[n] > cj[n] {
-			return false
-		}
-	}
-	return false
-}
-func (b bag) Swap(i, j int) {
-	t := b.certs[i]
-	b.certs[i] = b.certs[j]
-	b.certs[j] = t
-}
diff --git a/ct/fixchain/hash_test.go b/ct/fixchain/hash_test.go
deleted file mode 100644
index dfb8ff8..0000000
--- a/ct/fixchain/hash_test.go
+++ /dev/null
@@ -1,41 +0,0 @@
-package fixchain
-
-import (
-	"testing"
-)
-
-func TestHashBag(t *testing.T) {
-	hashBagTests := []struct {
-		certList1 []string
-		certList2 []string
-		expEqual  bool
-		errMsg    string
-	}{
-		{
-			[]string{googleLeaf},
-			[]string{thawteIntermediate},
-			false,
-			"hash match between Bags containing different certs",
-		},
-		{
-			[]string{googleLeaf, thawteIntermediate},
-			[]string{thawteIntermediate, googleLeaf},
-			true,
-			"hash mismatch between Bags containing the same certs",
-		},
-		{
-			[]string{googleLeaf, thawteIntermediate},
-			[]string{thawteIntermediate, googleLeaf, thawteIntermediate},
-			false,
-			"hash match between Bags containing the same certs, but one with duplicates",
-		},
-	}
-
-	for i, test := range hashBagTests {
-		certList1 := extractTestChain(t, i, test.certList1)
-		certList2 := extractTestChain(t, i, test.certList2)
-		if (hashBag(certList1) == hashBag(certList2)) != test.expEqual {
-			t.Errorf("#%d: %s", i, test.errMsg)
-		}
-	}
-}
diff --git a/ct/fixchain/logger.go b/ct/fixchain/logger.go
deleted file mode 100644
index 8d6332b..0000000
--- a/ct/fixchain/logger.go
+++ /dev/null
@@ -1,279 +0,0 @@
-package fixchain
-
-import (
-	"encoding/json"
-	"fmt"
-	"io/ioutil"
-	"log"
-	"net/http"
-	"sync"
-	"sync/atomic"
-	"time"
-
-	"github.com/google/certificate-transparency/go/x509"
-)
-
-// Limiter is an interface to allow different rate limiters to be used with the
-// Logger.
-type Limiter interface {
-	Wait()
-}
-
-// Logger contains methods to asynchronously log certificate chains to a
-// Certificate Transparency log and properties to store information about each
-// attempt that is made to post a certificate chain to said log.
-type Logger struct {
-	url    string
-	client *http.Client
-	roots  *x509.CertPool
-	toPost chan *toPost
-	errors chan<- *FixError
-
-	active uint32
-
-	queued        uint32 // How many chains have been queued to be posted.
-	posted        uint32 // How many chains have been posted.
-	reposted      uint32 // How many chains for an already-posted cert have been queued.
-	chainReposted uint32 // How many chains have been queued again.
-
-	// Note that wg counts the number of active requests, not
-	// active servers, because we can't close it to signal the
-	// end, because of retries.
-	wg      sync.WaitGroup
-	limiter Limiter
-
-	postCertCache  *lockedMap
-	postChainCache *lockedMap
-}
-
-// IsPosted tells the caller whether a chain for the given certificate has
-// already been successfully posted to the log by this Logger.
-func (l *Logger) IsPosted(cert *x509.Certificate) bool {
-	return l.postCertCache.get(hash(cert))
-}
-
-// QueueChain adds the given chain to the queue to be posted to the log.
-func (l *Logger) QueueChain(chain []*x509.Certificate) {
-	if chain == nil {
-		return
-	}
-
-	atomic.AddUint32(&l.queued, 1)
-	// Has a chain for the cert this chain if for already been successfully
-	//posted to the log by this Logger?
-	h := hash(chain[0]) // Chains are cert -> root
-	if l.postCertCache.get(h) {
-		atomic.AddUint32(&l.reposted, 1)
-		return // Don't post chain for a cert that has already had a chain posted.
-	}
-	// If we assume all chains for the same cert are equally
-	// likely to succeed, then we could mark the cert as posted
-	// here. However, bugs might cause a log to refuse one chain
-	// and accept another, so try each unique chain.
-
-	// Has this Logger already tried to post this chain?
-	h = hashChain(chain)
-	if l.postChainCache.get(h) {
-		atomic.AddUint32(&l.chainReposted, 1)
-		return
-	}
-	l.postChainCache.set(h, true)
-
-	p := &toPost{chain: chain, retries: 5}
-	l.postToLog(p)
-}
-
-// Wait for all of the active requests to finish being processed.
-func (l *Logger) Wait() {
-	l.wg.Wait()
-}
-
-// RootCerts returns the root certificates that the log accepts.
-func (l *Logger) RootCerts() *x509.CertPool {
-	if l.roots == nil {
-		// Retry if unable to get roots.
-		for i := 0; i < 10; i++ {
-			roots, err := l.getRoots()
-			if err == nil {
-				l.roots = roots
-				return l.roots
-			}
-			log.Println(err)
-		}
-		log.Fatalf("Can't get roots from %s", l.url)
-	}
-	return l.roots
-}
-
-func (l *Logger) getRoots() (*x509.CertPool, error) {
-	rootsJSON, err := l.client.Get(l.url + "/ct/v1/get-roots")
-	if err != nil {
-		return nil, fmt.Errorf("can't get roots from %s: %s", l.url, err)
-	}
-	defer rootsJSON.Body.Close()
-	j, err := ioutil.ReadAll(rootsJSON.Body)
-	if err != nil {
-		return nil, fmt.Errorf("can't read body from %s: %s", l.url, err)
-	}
-	if rootsJSON.StatusCode != 200 {
-		return nil, fmt.Errorf("can't deal with status other than 200 from %s: %d\nbody: %s", l.url, rootsJSON.StatusCode, string(j))
-	}
-	type Certificates struct {
-		Certificates [][]byte
-	}
-	var certs Certificates
-	err = json.Unmarshal(j, &certs)
-	if err != nil {
-		return nil, fmt.Errorf("can't parse json (%s) from %s: %s", err, l.url, j)
-	}
-	ret := x509.NewCertPool()
-	for i := 0; i < len(certs.Certificates); i++ {
-		r, err := x509.ParseCertificate(certs.Certificates[i])
-		switch err.(type) {
-		case nil, x509.NonFatalErrors:
-			// ignore
-		default:
-			return nil, fmt.Errorf("can't parse certificate from %s: %s %#v", l.url, err, certs.Certificates[i])
-		}
-		ret.AddCert(r)
-	}
-	return ret, nil
-}
-
-type toPost struct {
-	chain   []*x509.Certificate
-	retries uint8
-}
-
-// postToLog(), rather than its asynchronous couterpart asyncPostToLog(), is
-// used during the initial queueing of chains to avoid spinning up an excessive
-// number of goroutines, and unecessarily using up memory. If asyncPostToLog()
-// was called instead, then every time a new chain was queued, a new goroutine
-// would be created, each holding their own chain - regardless of whether there
-// were postServers available to process them or not.  If a large number of
-// chains were queued in a short period of time, this could lead to a large
-// number of these additional goroutines being created, resulting in excessive
-// memory usage.
-func (l *Logger) postToLog(p *toPost) {
-	l.wg.Add(1) // Add to the wg as we are adding a new active request to the logger queue.
-	l.toPost <- p
-}
-
-// asyncPostToLog(), rather than its synchronous couterpart postToLog(), is used
-// during retries to avoid deadlock. Without the separate goroutine created in
-// asyncPostToLog(), deadlock can occur in the following situation:
-//
-// Suppose there is only one postServer() goroutine running, and it is blocked
-// waiting for a toPost on the toPost chan.  A toPost gets added to the chan,
-// which causes the following to happen:
-// - the postServer takes the toPost from the chan.
-// - the postServer calls l.postChain(toPost), and waits for
-//   l.postChain() to return before going back to the toPost
-//   chan for another toPost.
-// - l.postChain() begins execution.  Suppose the first post
-//   attempt of the toPost fails for some network-related
-//   reason.
-// - l.postChain retries and calls l.postToLog() to queue up the
-//   toPost to try to post it again.
-// - l.postToLog() tries to put the toPost on the toPost chan,
-//   and blocks until a postServer takes it off the chan.
-// But the one and only postServer is still waiting for l.postChain (and
-// therefore l.postToLog) to return, and will not go to take another toPost off
-// the toPost chan until that happens.
-// Thus, deadlock.
-//
-// Similar situations with multiple postServers can easily be imagined.
-func (l *Logger) asyncPostToLog(p *toPost) {
-	l.wg.Add(1) // Add to the wg as we are adding a new active request to the logger queue.
-	go func() {
-		l.toPost <- p
-	}()
-}
-
-func (l *Logger) postChain(p *toPost) {
-	h := hash(p.chain[0])
-	if l.postCertCache.get(h) {
-		atomic.AddUint32(&l.reposted, 1)
-		return
-	}
-
-	l.limiter.Wait()
-	ferr := PostChainToLog(p.chain, l.client, l.url)
-	atomic.AddUint32(&l.posted, 1)
-	if ferr != nil {
-		switch ferr.Type {
-		case PostFailed:
-			if p.retries == 0 {
-				l.errors <- ferr
-			} else {
-				log.Printf(ferr.Error.Error())
-				p.retries--
-				l.asyncPostToLog(p)
-			}
-			return
-		case LogPostFailed:
-			// If the http error code is 502, we retry.
-			// TODO(katjoyce): Are there any other error codes for which the
-			// post should be retried?
-			if p.retries == 0 || ferr.Code != 502 {
-				l.errors <- ferr
-			} else {
-				p.retries--
-				l.asyncPostToLog(p)
-			}
-			return
-		default:
-			log.Fatalf("Unexpected FixError type: %s", ferr.TypeString())
-		}
-	}
-
-	// If the post was successful, cache.
-	l.postCertCache.set(h, true)
-}
-
-func (l *Logger) postServer() {
-	for {
-		c := <-l.toPost
-		atomic.AddUint32(&l.active, 1)
-		l.postChain(c)
-		atomic.AddUint32(&l.active, ^uint32(0))
-		l.wg.Done()
-	}
-}
-
-func (l *Logger) logStats() {
-	t := time.NewTicker(time.Second)
-	go func() {
-		for _ = range t.C {
-			log.Printf("posters: %d active, %d posted, %d queued, %d certs requeued, %d chains requeued",
-				l.active, l.posted, l.queued, l.reposted, l.chainReposted)
-		}
-	}()
-}
-
-// NewLogger creates a new asynchronous logger to log chains to the
-// Certificate Transparency log at the given url.  It starts up a pool of
-// workerCount workers.  Errors are pushed to the errors channel.  client is
-// used to post the chains to the log.
-func NewLogger(workerCount int, url string, errors chan<- *FixError, client *http.Client, limiter Limiter, logStats bool) *Logger {
-	l := &Logger{
-		url:            url,
-		client:         client,
-		errors:         errors,
-		toPost:         make(chan *toPost),
-		postCertCache:  newLockedMap(),
-		postChainCache: newLockedMap(),
-		limiter:        limiter,
-	}
-	l.RootCerts()
-
-	// Start post server pool.
-	for i := 0; i < workerCount; i++ {
-		go l.postServer()
-	}
-
-	if logStats {
-		l.logStats()
-	}
-	return l
-}
diff --git a/ct/fixchain/logger_test.go b/ct/fixchain/logger_test.go
deleted file mode 100644
index c33a249..0000000
--- a/ct/fixchain/logger_test.go
+++ /dev/null
@@ -1,206 +0,0 @@
-package fixchain
-
-import (
-	"net/http"
-	"sync"
-	"testing"
-)
-
-// NewLogger() test
-func TestNewLogger(t *testing.T) {
-	// Test single chain posts.
-	for i, test := range postTests {
-		errors := make(chan *FixError)
-		var wg sync.WaitGroup
-		wg.Add(1)
-		go testErrors(t, i, test.expectedErrs, errors, &wg)
-
-		l := NewLogger(1, test.url, errors, &http.Client{Transport: &postTestRoundTripper{t: t, test: &test, testIndex: i}}, newNilLimiter(), false)
-
-		l.QueueChain(extractTestChain(t, i, test.chain))
-		l.Wait()
-
-		close(l.errors)
-		wg.Wait()
-
-		// Check logger caching.
-		if test.chain != nil {
-			if test.ferr.Type == None && !l.postCertCache.get(hash(GetTestCertificateFromPEM(t, test.chain[0]))) {
-				t.Errorf("#%d: leaf certificate not cached", i)
-			}
-			if !l.postChainCache.get(hashChain(extractTestChain(t, i, test.chain))) {
-				t.Errorf("#%d: chain not cached", i)
-			}
-		}
-	}
-}
-
-// NewLogger() test
-func TestNewLoggerCaching(t *testing.T) {
-	// Test logging multiple chains by looking at caching.
-	newLoggerTest := struct {
-		url          string
-		chains       [][]string
-		expectedErrs []errorType
-	}{
-		"https://ct.googleapis.com/pilot",
-		[][]string{
-			{googleLeaf, thawteIntermediate, verisignRoot},
-			{googleLeaf, thawteIntermediate, verisignRoot},
-			{googleLeaf, thawteIntermediate},
-			{testLeaf, testIntermediate2, testIntermediate1, testRoot},
-		},
-		[]errorType{},
-	}
-
-	errors := make(chan *FixError)
-	var wg sync.WaitGroup
-	wg.Add(1)
-	go testErrors(t, 0, newLoggerTest.expectedErrs, errors, &wg)
-
-	l := NewLogger(5, newLoggerTest.url, errors, &http.Client{Transport: &newLoggerTestRoundTripper{}}, newNilLimiter(), false)
-
-	for _, chain := range newLoggerTest.chains {
-		l.QueueChain(extractTestChain(t, 0, chain))
-	}
-	l.Wait()
-	close(l.errors)
-	wg.Wait()
-
-	// Check logger caching.
-	seen := make(map[[hashSize]byte]bool)
-	for i, chain := range newLoggerTest.chains {
-		leafHash := hash(GetTestCertificateFromPEM(t, chain[0]))
-		if !l.postCertCache.get(leafHash) {
-			t.Errorf("Chain %d: leaf certificate not cached", i)
-		}
-		if !seen[leafHash] && !l.postChainCache.get(hashChain(extractTestChain(t, 0, chain))) {
-			t.Errorf("Chain %d: chain not cached", i)
-		}
-		seen[leafHash] = true
-	}
-}
-
-// Logger.postServer() test
-func TestPostServer(t *testing.T) {
-	for i, test := range postTests {
-		errors := make(chan *FixError)
-		l := &Logger{
-			url:            test.url,
-			client:         &http.Client{Transport: &postTestRoundTripper{t: t, test: &test, testIndex: i}},
-			toPost:         make(chan *toPost),
-			errors:         errors,
-			limiter:        newNilLimiter(),
-			postCertCache:  newLockedMap(),
-			postChainCache: newLockedMap(),
-		}
-		var wg sync.WaitGroup
-		wg.Add(1)
-		go testErrors(t, i, test.expectedErrs, errors, &wg)
-
-		go l.postServer()
-		l.QueueChain(extractTestChain(t, i, test.chain))
-		l.Wait()
-
-		close(l.errors)
-		wg.Wait()
-	}
-}
-
-// Logger.IsPosted() test
-func TestIsPosted(t *testing.T) {
-	isPostedTests := []struct {
-		cert     string
-		expected bool
-	}{
-		{
-			googleLeaf,
-			true,
-		},
-		{
-			megaLeaf,
-			true,
-		},
-		{
-			testLeaf,
-			false,
-		},
-		{
-			testC,
-			false,
-		},
-	}
-
-	l := &Logger{postCertCache: newLockedMap()}
-	l.postCertCache.set(hash(GetTestCertificateFromPEM(t, googleLeaf)), true)
-	l.postCertCache.set(hash(GetTestCertificateFromPEM(t, megaLeaf)), true)
-	l.postCertCache.set(hash(GetTestCertificateFromPEM(t, testLeaf)), false)
-
-	for i, test := range isPostedTests {
-		if l.IsPosted(GetTestCertificateFromPEM(t, test.cert)) != test.expected {
-			t.Errorf("#%d: received %t, expected %t", i, !test.expected, test.expected)
-		}
-	}
-}
-
-// Logger.QueueChain() tests
-type loggerQueueTest struct {
-	chain         []string
-	expectedChain []string
-}
-
-var loggerQueueTests = []loggerQueueTest{
-	{
-		chain:         []string{googleLeaf, thawteIntermediate, verisignRoot},
-		expectedChain: []string{"Google", "Thawte", "VeriSign"},
-	},
-	{ // Add the same chain a second time to test chain caching.
-		// Note that if chain caching isn't working correctly, the test will hang.
-		chain: []string{googleLeaf, thawteIntermediate, verisignRoot},
-	},
-}
-
-func testLoggerQueueChain(t *testing.T, i int, qt *loggerQueueTest, l *Logger) {
-	defer l.wg.Done()
-	if qt.expectedChain != nil {
-		post := <-l.toPost
-		matchTestChain(t, i, qt.expectedChain, post.chain)
-		l.wg.Done() // Required as logger wg is incremented internally every time a toPost is added to the queue.
-	}
-}
-
-func TestLoggerQueueChain(t *testing.T) {
-	ch := make(chan *toPost)
-	defer close(ch)
-	l := &Logger{toPost: ch, postCertCache: newLockedMap(), postChainCache: newLockedMap()}
-
-	for i, qt := range loggerQueueTests {
-		l.wg.Add(1)
-		go testLoggerQueueChain(t, i, &qt, l)
-		chain := extractTestChain(t, i, qt.chain)
-		l.QueueChain(chain)
-		l.wg.Wait()
-	}
-}
-
-// Logger.RootCerts() test
-func TestRootCerts(t *testing.T) {
-	rootCertsTests := []struct {
-		url           string
-		expectedRoots []string
-	}{
-		{
-			"https://ct.googleapis.com/pilot",
-			[]string{verisignRoot, comodoRoot}, // These are not the actual roots for the pilot CT log, this is just for testing purposes.
-		},
-	}
-
-	for i, test := range rootCertsTests {
-		l := &Logger{
-			url:    test.url,
-			client: &http.Client{Transport: &rootCertsTestRoundTripper{}},
-		}
-		roots := l.RootCerts()
-		matchTestRoots(t, i, test.expectedRoots, roots)
-	}
-}
diff --git a/ct/fixchain/main/fixchain.go b/ct/fixchain/main/fixchain.go
deleted file mode 100644
index 210396e..0000000
--- a/ct/fixchain/main/fixchain.go
+++ /dev/null
@@ -1,116 +0,0 @@
-package main
-
-import (
-	"crypto/sha256"
-	"encoding/base64"
-	"encoding/json"
-	"io"
-	"log"
-	"net/http"
-	"os"
-	"sync"
-
-	"github.com/google/certificate-transparency/go/fixchain"
-	"github.com/google/certificate-transparency/go/fixchain/ratelimiter"
-	"github.com/google/certificate-transparency/go/x509"
-)
-
-// Assumes chains to be stores in a file in JSON encoded with the certificates
-// in DER format.
-func processChains(file string, fl *fixchain.FixAndLog) {
-	f, err := os.Open(file)
-	if err != nil {
-		log.Fatalf("Can't open %q: %s", file, err)
-	}
-	defer f.Close()
-
-	type Chain struct {
-		Chain [][]byte
-	}
-
-	dec := json.NewDecoder(f)
-	for {
-		var m Chain
-		if err := dec.Decode(&m); err == io.EOF {
-			break
-		} else if err != nil {
-			log.Fatal(err)
-		}
-		var chain []*x509.Certificate
-		for _, derBytes := range m.Chain {
-			cert, err := x509.ParseCertificate(derBytes)
-			switch err.(type) {
-			case nil, x509.NonFatalErrors:
-				// ignore
-			default:
-				log.Fatalf("can't parse certificate: %s %#v",
-					err, derBytes)
-			}
-
-			chain = append(chain, cert)
-		}
-		fl.QueueAllCertsInChain(chain)
-	}
-}
-
-// A simple function to save the FixErrors that are spat out by the FixAndLog to
-// a directory.  contentStore() is the function to alter to store the errors
-// wherever/however they need to be stored.  Both logStringErrors() and
-// logJSONErrors() use this function as a way of storing the resulting
-// FixErrors.
-func contentStore(baseDir string, subDir string, content []byte) {
-	r := sha256.Sum256(content)
-	h := base64.URLEncoding.EncodeToString(r[:])
-	d := baseDir + "/" + subDir
-	os.MkdirAll(d, 0777)
-	fn := d + "/" + h
-	f, err := os.Create(fn)
-	if err != nil {
-		log.Fatalf("Can't create %q: %s", fn, err)
-	}
-	defer f.Close()
-	f.Write(content)
-}
-
-func logStringErrors(wg *sync.WaitGroup, errors chan *fixchain.FixError, baseDir string) {
-	defer wg.Done()
-	for err := range errors {
-		contentStore(baseDir, err.TypeString(), []byte(err.String()))
-	}
-}
-
-func logJSONErrors(wg *sync.WaitGroup, errors chan *fixchain.FixError, baseDir string) {
-	defer wg.Done()
-	for err := range errors {
-		b, err2 := err.MarshalJSON()
-		if err2 != nil {
-			log.Fatalf("JSON encode failed: %s", err2)
-		}
-		contentStore(baseDir, err.TypeString(), b)
-	}
-}
-
-func main() {
-	logURL := os.Args[1]
-	chainsFile := os.Args[2]
-	errDir := os.Args[3]
-
-	var wg sync.WaitGroup
-	wg.Add(1)
-	errors := make(chan *fixchain.FixError)
-	// Functions to log errors as strings or as JSON are provided.
-	// As-is, this will log errors as strings.
-	go logStringErrors(&wg, errors, errDir)
-
-	limiter := ratelimiter.NewLimiter(1000)
-	client := &http.Client{}
-	fl := fixchain.NewFixAndLog(100, 100, errors, client, client, logURL, limiter, true)
-
-	processChains(chainsFile, fl)
-
-	log.Printf("Wait for fixers and loggers")
-	fl.Wait()
-	close(errors)
-	log.Printf("Wait for errors")
-	wg.Wait()
-}
diff --git a/ct/fixchain/post.go b/ct/fixchain/post.go
deleted file mode 100644
index 7349ab4..0000000
--- a/ct/fixchain/post.go
+++ /dev/null
@@ -1,63 +0,0 @@
-package fixchain
-
-import (
-	"bytes"
-	"encoding/json"
-	"fmt"
-	"io/ioutil"
-	"log"
-	"net/http"
-
-	"github.com/google/certificate-transparency/go/x509"
-)
-
-// PostChainToLog attempts to post the given chain to the Certificate
-// Transparency log at the given url, using the given http client.
-// PostChainToLog returns a FixError if it is unable to post the chain either
-// because client.Post() failed, or the http response code returned was not 200.
-// It is up to the caller to handle such errors appropriately.
-func PostChainToLog(chain []*x509.Certificate, client *http.Client, url string) *FixError {
-	// Format the chain ready to be posted to the log.
-	type Chain struct {
-		Chain [][]byte `json:"chain"`
-	}
-	var m Chain
-	for _, c := range chain {
-		m.Chain = append(m.Chain, c.Raw)
-	}
-	j, err := json.Marshal(m)
-	if err != nil {
-		log.Fatalf("Can't marshal: %s", err)
-	}
-
-	// Post the chain!
-	resp, err := client.Post(url+"/ct/v1/add-chain", "application/json", bytes.NewReader(j))
-	if err != nil {
-		return &FixError{
-			Type:  PostFailed,
-			Chain: chain,
-			Error: fmt.Errorf("can't post: %s", err),
-		}
-	}
-
-	defer resp.Body.Close()
-	jo, err := ioutil.ReadAll(resp.Body)
-	if err != nil {
-		return &FixError{
-			Type:  LogPostFailed,
-			Chain: chain,
-			Error: fmt.Errorf("can't read response: %s", err),
-		}
-	}
-
-	if resp.StatusCode != 200 {
-		return &FixError{
-			Type:  LogPostFailed,
-			Chain: chain,
-			Error: fmt.Errorf("can't handle response code %d: %s", resp.StatusCode, jo),
-			Code:  resp.StatusCode,
-		}
-	}
-
-	return nil
-}
diff --git a/ct/fixchain/post_test.go b/ct/fixchain/post_test.go
deleted file mode 100644
index 75dbbaa..0000000
--- a/ct/fixchain/post_test.go
+++ /dev/null
@@ -1,23 +0,0 @@
-package fixchain
-
-import (
-	"net/http"
-	"testing"
-)
-
-func TestPostChainToLog(t *testing.T) {
-	for i, test := range postTests {
-		client := &http.Client{Transport: &postTestRoundTripper{t: t, test: &test, testIndex: i}}
-		ferr := PostChainToLog(extractTestChain(t, i, test.chain), client, test.url)
-
-		if ferr == nil {
-			if test.ferr.Type != None {
-				t.Errorf("#%d: PostChainToLog() didn't return FixError, expected FixError of type %s", i, test.ferr.TypeString())
-			}
-		} else {
-			if ferr.Type != test.ferr.Type {
-				t.Errorf("#%d: PostChainToLog() returned FixError of type %s, expected %s", i, ferr.TypeString(), test.ferr.TypeString())
-			}
-		}
-	}
-}
diff --git a/ct/fixchain/ratelimiter/limiter.go b/ct/fixchain/ratelimiter/limiter.go
deleted file mode 100644
index 08cd6b7..0000000
--- a/ct/fixchain/ratelimiter/limiter.go
+++ /dev/null
@@ -1,22 +0,0 @@
-// Package ratelimiter provides an exceedingly simple rate limiter.
-package ratelimiter
-
-import (
-	"github.com/juju/ratelimit"
-)
-
-// Limiter is a simple rate limiter.
-type Limiter struct {
-	bucket *ratelimit.Bucket
-}
-
-// Wait blocks for the amount of time required by the Limiter so as to not
-// exceed its rate.
-func (l *Limiter) Wait() {
-	l.bucket.Wait(1)
-}
-
-// NewLimiter creates a new Limiter with a rate of limit per second.
-func NewLimiter(limit int) *Limiter {
-	return &Limiter{bucket: ratelimit.NewBucketWithRate(float64(limit), 1)}
-}
diff --git a/ct/fixchain/ratelimiter/limiter_test.go b/ct/fixchain/ratelimiter/limiter_test.go
deleted file mode 100644
index f81d2a9..0000000
--- a/ct/fixchain/ratelimiter/limiter_test.go
+++ /dev/null
@@ -1,65 +0,0 @@
-package ratelimiter
-
-import (
-	"sync"
-	"testing"
-	"time"
-)
-
-var testlimits = []int{1, 10, 50, 100, 1000}
-
-func TestRateLimiterSingleThreaded(t *testing.T) {
-	for i, limit := range testlimits {
-		l := NewLimiter(limit)
-		count := 0
-		tick := time.NewTicker(time.Second)
-		go func() {
-			for _ = range tick.C {
-				// Allow a count up to one more than the limit as scheduling of
-				// goroutine vs the main thread could cause this check to not be
-				// run quite in time for limit.
-				if count > limit+1 {
-					t.Errorf("#%d: Too many operations per second. Expected %d, got %d", i, limit, count)
-				}
-				count = 0
-			}
-		}()
-
-		for i := 0; i < 3*limit; i++ {
-			l.Wait()
-			count++
-		}
-		tick.Stop()
-	}
-}
-
-func TestRateLimiterGoroutines(t *testing.T) {
-	for i, limit := range testlimits {
-		l := NewLimiter(limit)
-		count := 0
-		tick := time.NewTicker(time.Second)
-		go func() {
-			for _ = range tick.C {
-				// Allow a count up to one more than the limit as scheduling of
-				// goroutine vs the main thread could cause this check to not be
-				// run quite in time for limit.
-				if count > limit+1 {
-					t.Errorf("#%d: Too many operations per second. Expected %d, got %d", i, limit, count)
-				}
-				count = 0
-			}
-		}()
-
-		var wg sync.WaitGroup
-		for i := 0; i < 3*limit; i++ {
-			wg.Add(1)
-			go func() {
-				l.Wait()
-				count++
-				wg.Done()
-			}()
-		}
-		wg.Wait()
-		tick.Stop()
-	}
-}
diff --git a/ct/fixchain/replacements.go b/ct/fixchain/replacements.go
deleted file mode 100644
index 6f4a0f1..0000000
--- a/ct/fixchain/replacements.go
+++ /dev/null
@@ -1,238 +0,0 @@
-package fixchain
-
-import (
-	"encoding/pem"
-	"log"
-
-	"github.com/google/certificate-transparency/go/x509"
-)
-
-// Go has no PKCS#7 implementation. Rather than fix that, manually
-// replace the few PKCS#7 URLs we know of.
-
-var replacements = map[string][]string{
-	"http://gca.nat.gov.tw/repository/Certs/IssuedToThisCA.p7b": {
-		// subject=/C=TW/O=\xE8\xA1\x8C\xE6\x94\xBF\xE9\x99\xA2/OU=\xE6\x94\xBF\xE5\xBA\x9C\xE6\x86\x91\xE8\xAD\x89\xE7\xAE\xA1\xE7\x90\x86\xE4\xB8\xAD\xE5\xBF\x83
-		// issuer=/C=TW/O=Government Root Certification Authority
-		`-----BEGIN CERTIFICATE-----
-MIIFJTCCAw2gAwIBAgIQCI3SljuLYpwZTjIA2nfOLDANBgkqhkiG9w0BAQsFADA/
-MQswCQYDVQQGEwJUVzEwMC4GA1UECgwnR292ZXJubWVudCBSb290IENlcnRpZmlj
-YXRpb24gQXV0aG9yaXR5MB4XDTEzMDEzMTAzMjIzNFoXDTMzMDEzMTAzMjIzNFow
-RDELMAkGA1UEBhMCVFcxEjAQBgNVBAoMCeihjOaUv+mZojEhMB8GA1UECwwY5pS/
-5bqc5oaR6K2J566h55CG5Lit5b+DMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIB
-CgKCAQEAtX7xPZUtp5iBGQvqYghJUoLeyCJJoaTcc1bcOGHij64WUBYpDu8KKEQK
-R1y3zjcDXrLcZX483tmNs92DXSNuBHlx+we1aFyuLpKQVCji97ys3KeMxAEcaXqo
-3cZu8nY3g//zkvX80G4RoCyDR86Z420R3mb0GlVw/9TEK8+oduZqAArEdfionpbE
-K5zZ/8qaaHafgqMBQGuzfccDKLoWRcTzu3S0IvOpVU6pcB0rJOtc4F7c16tQdXfo
-a8sjfcveKKbUQF6AklwugRufHdLqEVpOiGRcDPaHtT6SHJ7D/t+A/rAXMPidcksQ
-rea/E+5+lehqEMHSA/gSLa9Ph+/gDQIDAQABo4IBFjCCARIwHwYDVR0jBBgwFoAU
-1Wcd4Jx6LJzLxZjnHQcmKobsdM0wHQYDVR0OBBYEFNEYZ8NX/hKakWtfXzHqPsKE
-h/u9MA4GA1UdDwEB/wQEAwIBBjAUBgNVHSAEDTALMAkGB2CGdmUAAwMwEgYDVR0T
-AQH/BAgwBgEB/wIBADA+BgNVHR8ENzA1MDOgMaAvhi1odHRwOi8vZ3JjYS5uYXQu
-Z292LnR3L3JlcG9zaXRvcnkvQ1JMMi9DQS5jcmwwVgYIKwYBBQUHAQEESjBIMEYG
-CCsGAQUFBzAChjpodHRwOi8vZ3JjYS5uYXQuZ292LnR3L3JlcG9zaXRvcnkvQ2Vy
-dHMvSXNzdWVkVG9UaGlzQ0EucDdiMA0GCSqGSIb3DQEBCwUAA4ICAQBuDj29K1o3
-rfT72lhocx0vr18PUI5OEVfiMn+cwE8al5UdPgYAMQL4YIdA1rmL5QResEaC03d7
-jFKF1fnGf7rd0k5O47iAa7THDQFtVOks1djLfNecn1l4pdLODWGRNy+DbbqAl87d
-at2HSP5OEOl3nt8TxUVRsJx9TDx1IZC+RhUTT8ryalhlJ9UbxORjqbL3C7mMhviY
-B9aA4aV6AFa1oAsI+LeXIB9xxmk8V8kzX1VhJ00buIAIjScIhvI39zoeF7z39hzy
-Gw9+Av/AnbC4npDvvaLxIhs75LD1Tuh5WY4lk0+/PzdhrK5R0+YaOEoEvpiZljeZ
-QuXJVZ08Re6Omb5XYKZ9hjtp+wAIH97k7spxSOFmP76WBy/5o22vxosfvybTxuM3
-GFih8XlhoL6UYQ2e29WHW9Mj5yDN00TRp9CYWw7p5sS09PQitGKqYx7AYhJnNBy5
-mz4uHLm4nQVI/3jhDb9Xgr+3UHMjz4LM8TQVh2YEDYBYkgH35WhK6pY852yAvIat
-usT8CveFOCjr2uJBXaBgmBr4I5/1oJypzZLmP65VtxSMtA5cmgooVRGAe+QrYufJ
-lGZiIUjmkqpNzh5q6oShkzqJPpqRviug2oZXQb9q9Qgj4zkr8KA5NkYVG+KNWR5V
-LD9SyuP1AJcZmxUKQtDEZJCJtISXfybg0A==
------END CERTIFICATE-----`,
-		// subject=/C=TW/O=\xE8\xA1\x8C\xE6\x94\xBF\xE9\x99\xA2/OU=\xE6\x94\xBF\xE5\xBA\x9C\xE6\x86\x91\xE8\xAD\x89\xE7\xAE\xA1\xE7\x90\x86\xE4\xB8\xAD\xE5\xBF\x83
-		//issuer=/C=TW/O=Government Root Certification Authority
-		`-----BEGIN CERTIFICATE-----
-MIIFJTCCAw2gAwIBAgIRAP+94tm8qUrtFSYcQfB4flUwDQYJKoZIhvcNAQEFBQAw
-PzELMAkGA1UEBhMCVFcxMDAuBgNVBAoMJ0dvdmVybm1lbnQgUm9vdCBDZXJ0aWZp
-Y2F0aW9uIEF1dGhvcml0eTAeFw0wMzAzMDMwNjUxMjNaFw0yMzAzMDMwNjUxMjNa
-MEQxCzAJBgNVBAYTAlRXMRIwEAYDVQQKDAnooYzmlL/pmaIxITAfBgNVBAsMGOaU
-v+W6nOaGkeitieeuoeeQhuS4reW/gzCCASIwDQYJKoZIhvcNAQEBBQADggEPADCC
-AQoCggEBAJXm+CDDPby1h9VhQFkpeEceeJcodEfbO8og0FgZj/cwtbnJbFgpl1KD
-GvbBO+GvpxLI18c/T4bMEpDlpugcvlF8tIXT5M35lVTByx7NtT5myohevmppbsnK
-1wRC1WwYxWHG3tIRZQdX/mKV0tE1LMDHylTeJWbA+fTPmapiTy7vopSFSmx7zEAI
-9x+6p3bWfZ+A/MQh4SC0gUM6sZhlNH13z3VCaK670xHoTryQi5Yv+SuHJz8tIt31
-xty/nwrpS8eM2lzonL0zDrHf/wkTIpy+ZU+J3J9gi1l1DTUyEL1thj5udyAnAYBy
-aDqT5t3Af7X1DNthPknckzOHz3bOH+0CAwEAAaOCARUwggERMB8GA1UdIwQYMBaA
-FMzM78wpYKQ7sZK2PPoyYo+sJRU7MB0GA1UdDgQWBBTk3BdvIqrO+MghGtKrzlOO
-TtoYfDAOBgNVHQ8BAf8EBAMCAQYwFAYDVR0gBA0wCzAJBgdghnZlAAMDMBIGA1Ud
-EwEB/wQIMAYBAf8CAQAwPQYDVR0fBDYwNDAyoDCgLoYsaHR0cDovL2dyY2EubmF0
-Lmdvdi50dy9yZXBvc2l0b3J5L0NSTC9DQS5jcmwwVgYIKwYBBQUHAQEESjBIMEYG
-CCsGAQUFBzAChjpodHRwOi8vZ3JjYS5uYXQuZ292LnR3L3JlcG9zaXRvcnkvQ2Vy
-dHMvSXNzdWVkVG9UaGlzQ0EucDdiMA0GCSqGSIb3DQEBBQUAA4ICAQBrJPxFGTC3
-I2z8AR23BfDjfrQ0Tr8D5ggx5GaPXSe2Re3nHW/mj3TEnpBFMDulZVo8PY8nPx7I
-OibTWRAYVkEk33HrAph+FoCAfLnv5BGIwa9KH2FyguebNv6djFnzJf0E6uBOWtN/
-Tkl1NOh+Q1PuJ3gGoWt8YVr5UVu+Y84LD6lLf294Y6j76sAlsa4z0HDbVx28qiTP
-aPrDkWYIEb5hSW174uazQjiU4yFZMCzwUyGNCAjCoPVPqZ3FIdHdn21KbXJ0Oq87
-7bCKtMy/SRUBCeVhDr7DbmELdDgHPjSXqLknMPnrI605jryzpw2nNPxOT/uO9e7n
-Cxg1S6wtfVtYUx491RGni1FjARZPh3xGizY+O6UxojdEP3jId4A+LJgn/SrijKTw
-m2kiQ3Q7ovMuMKGJdLHeiIOIcyVs7F+Fld2kkfKl7ztQ3mCanuQhvSLaaRSyAiMm
-Cfvc6LJHttAQv/8nFQgTvDAWSkGmba7PgBMeACkQE/5e3qd8Hr20gs7df0O1UCgD
-ST3oZmF0B2MwtBU4IDNRMmrDlx+ZvfE50guQd1jPSSeNrHyycgILnzLMjwMIEaRf
-P34C7KkB1WrJ+IUNL7Wsp4WxEaL8whKzJnaBNMPCDHz4tUuanBtDSuSu2oWYLTNx
-58KYKSxTbOGbBt1cRf10CCR1/3YGE9C7rg==
------END CERTIFICATE-----`},
-	"http://crt.usertrust.com/AddTrustExternalCARoot.p7c": {
-		// subject=/C=SE/O=AddTrust AB/OU=AddTrust External TTP Network/CN=AddTrust External CA Root
-		// issuer=/C=SE/O=AddTrust AB/OU=AddTrust External TTP Network/CN=AddTrust External CA Root
-		`-----BEGIN CERTIFICATE-----
-MIIENjCCAx6gAwIBAgIBATANBgkqhkiG9w0BAQUFADBvMQswCQYDVQQGEwJTRTEU
-MBIGA1UEChMLQWRkVHJ1c3QgQUIxJjAkBgNVBAsTHUFkZFRydXN0IEV4dGVybmFs
-IFRUUCBOZXR3b3JrMSIwIAYDVQQDExlBZGRUcnVzdCBFeHRlcm5hbCBDQSBSb290
-MB4XDTAwMDUzMDEwNDgzOFoXDTIwMDUzMDEwNDgzOFowbzELMAkGA1UEBhMCU0Ux
-FDASBgNVBAoTC0FkZFRydXN0IEFCMSYwJAYDVQQLEx1BZGRUcnVzdCBFeHRlcm5h
-bCBUVFAgTmV0d29yazEiMCAGA1UEAxMZQWRkVHJ1c3QgRXh0ZXJuYWwgQ0EgUm9v
-dDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALf3GjPm8gAELTngTlvt
-H7xsD821+iO2zt6bETOXpClMfZOfvUq8k+0DGuOPz+VtUFrWlymUWoCwSXrbLpX9
-uMq/NzgtHj6RQa1wVsfwTz/oMp50ysiQVOnGXw94nZpAPA6sYapeFI+eh6FqUNzX
-mk6vBbOmcZSccbNQYArHE504B4YCqOmoaSYYkKtMsE8jqzpPhNjfzp/haW+710LX
-a0Tkx63ubUFfclpxCDezeWWkWaCUN/cALw3CknLa0Dhy2xSoRcRdKn23tNbE7qzN
-E0S3ySvdQwAl+mG5aWpYIxG3pzOPVnVZ9c0p10a3CitlttNCbxWyuHv77+ldU9U0
-WicCAwEAAaOB3DCB2TAdBgNVHQ4EFgQUrb2YejS0Jvf6xCZU7wO94CTLVBowCwYD
-VR0PBAQDAgEGMA8GA1UdEwEB/wQFMAMBAf8wgZkGA1UdIwSBkTCBjoAUrb2YejS0
-Jvf6xCZU7wO94CTLVBqhc6RxMG8xCzAJBgNVBAYTAlNFMRQwEgYDVQQKEwtBZGRU
-cnVzdCBBQjEmMCQGA1UECxMdQWRkVHJ1c3QgRXh0ZXJuYWwgVFRQIE5ldHdvcmsx
-IjAgBgNVBAMTGUFkZFRydXN0IEV4dGVybmFsIENBIFJvb3SCAQEwDQYJKoZIhvcN
-AQEFBQADggEBALCb4IUlwtYj4g+WBpKdQZic2YR5gdkeWxQHIzZlj7DYd7usQWxH
-YINRsPkyPef89iYTx4AWpb9a/IfPeHmJIZriTAcKhjW88t5RxNKWt9x+Tu5w/Rw5
-6wwCURQtjr0W4MHfRnXnJK3s9EK0hZNwEGe6nQY1ShjTK3rMUUKhemPR5ruhxSvC
-Nr4TDea9Y355e6cJDUCrat2PisP29owaQgVR1EX1n6diIWgVIEM8med8vSTYqZEX
-c4g/VhsxOBi0cQ+azcgOno4uG+GMmIPLHzHxREzGBHNJdmAPx/i9F4BrLunMTA5a
-mnkPIAou1Z5jJh5VkpTYghdae9C8x49OhgQ=
------END CERTIFICATE-----`,
-		// subject=/C=SE/O=AddTrust AB/OU=AddTrust External TTP Network/CN=AddTrust External CA Root
-		// issuer=/C=US/ST=UT/L=Salt Lake City/O=The USERTRUST Network/OU=http://www.usertrust.com/CN=UTN - DATACorp SGC
-		`-----BEGIN CERTIFICATE-----
-MIIEezCCA2OgAwIBAgIQftGpq77jb0bNa04pNJBW8zANBgkqhkiG9w0BAQUFADCB
-kzELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAlVUMRcwFQYDVQQHEw5TYWx0IExha2Ug
-Q2l0eTEeMBwGA1UEChMVVGhlIFVTRVJUUlVTVCBOZXR3b3JrMSEwHwYDVQQLExho
-dHRwOi8vd3d3LnVzZXJ0cnVzdC5jb20xGzAZBgNVBAMTElVUTiAtIERBVEFDb3Jw
-IFNHQzAeFw05OTA2MjQxODU3MjFaFw0xOTA2MjQxOTA2MzBaMG8xCzAJBgNVBAYT
-AlNFMRQwEgYDVQQKEwtBZGRUcnVzdCBBQjEmMCQGA1UECxMdQWRkVHJ1c3QgRXh0
-ZXJuYWwgVFRQIE5ldHdvcmsxIjAgBgNVBAMTGUFkZFRydXN0IEV4dGVybmFsIENB
-IFJvb3QwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC39xoz5vIABC05
-4E5b7R+8bA/Ntfojts7emxEzl6QpTH2Tn71KvJPtAxrjj8/lbVBa1pcplFqAsEl6
-2y6V/bjKvzc4LR4+kUGtcFbH8E8/6DKedMrIkFTpxl8PeJ2aQDwOrGGqXhSPnoeh
-alDc15pOrwWzpnGUnHGzUGAKxxOdOAeGAqjpqGkmGJCrTLBPI6s6T4TY386f4Wlv
-u9dC12tE5Met7m1BX3JacQg3s3llpFmglDf3AC8NwpJy2tA4ctsUqEXEXSp9t7TW
-xO6szRNEt8kr3UMAJfphuWlqWCMRt6czj1Z1WfXNKddGtworZbbTQm8Vsrh7++/p
-XVPVNFonAgMBAAGjge0wgeowHwYDVR0jBBgwFoAUUzLRs89/+uDxoF2FTpLSnkUd
-tE8wHQYDVR0OBBYEFK29mHo0tCb3+sQmVO8DveAky1QaMA4GA1UdDwEB/wQEAwIB
-BjAPBgNVHRMBAf8EBTADAQH/MBEGA1UdIAQKMAgwBgYEVR0gADA9BgNVHR8ENjA0
-MDKgMKAuhixodHRwOi8vY3JsLnVzZXJ0cnVzdC5jb20vVVROLURBVEFDb3JwU0dD
-LmNybDA1BggrBgEFBQcBAQQpMCcwJQYIKwYBBQUHMAGGGWh0dHA6Ly9vY3NwLnVz
-ZXJ0cnVzdC5jb20wDQYJKoZIhvcNAQEFBQADggEBADwlhyhsmL2dQhxeHmQPVn+W
-PPO582kaafSkCNQgTbHyYyfhnwFDN7CxeudxyHoh7qg1wZ3mvGizRoCaPQRyPC9I
-/eHMQncOsgU5pAD4NcKseMD9xxO8iyBNWjWvlMoysMZ50ZguO8JSRcGbtyYLywQa
-9m6SROF8nMESeKYZAeLvYPt6V/MyKAa1uh2RGyhdZGpfU5wO1erMRb19RguvU0nG
-zIAYW1utsWITYE45WVHEpobL8Q1t3t0xC1+jB6D7PkaqSXMEfYoLsC9GYo7hvVBl
-KLHIdkr0IgMMVdT8DIdWfgtl74frfPclt80nTNs8CSlpF46LsEfo2mC3p2lm+ws=
------END CERTIFICATE-----`},
-	"http://grca.nat.gov.tw/repository/Certs/IssuedToThisCA.p7b": {
-		// subject=/C=TW/O=Government Root Certification Authority
-		// issuer=/C=TW/O=Government Root Certification Authority
-		`-----BEGIN CERTIFICATE-----
-MIIGSTCCBDGgAwIBAgIQMlyJOyY4kQwld2TzSNCtpTANBgkqhkiG9w0BAQsFADA/
-MQswCQYDVQQGEwJUVzEwMC4GA1UECgwnR292ZXJubWVudCBSb290IENlcnRpZmlj
-YXRpb24gQXV0aG9yaXR5MB4XDTEyMDkyODA5MDcxMloXDTMyMTIwNTEzMjMzM1ow
-PzELMAkGA1UEBhMCVFcxMDAuBgNVBAoMJ0dvdmVybm1lbnQgUm9vdCBDZXJ0aWZp
-Y2F0aW9uIEF1dGhvcml0eTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIB
-AJoluOzMonWoe/fOW1mKydGGEghU7Jzy50b2iPN86aXfTEc2pBsBHH8eV4qNw8XR
-IePaJD9IK/ufLqGU5ywck9G/GwGHU5nOp/UKIXZ3/6m3xnOUT0b3EEk3+qhZSV1q
-gQdW8or5BtD3cCJNtLdBuTK4sfCxw5w/cP1T3YGq2GN49thTbqGsaoQkclSGxtKy
-yhwOeYHWtXBiCAEuTk8O1RGvqa/lmr/czIdtJuTJV6L7lvnM4T9TjGxMfptTCAts
-F/tnyMKtsc2AtJfcdgEWFelq16TheEfOhtX7MfP6Mb40qij7cEwdScevLJ1tZqa2
-jWR+tSBqnTuBto9AAGdLiYa4zGX+FVPpBMHWXx1E1wovJ5pGfaENda1UhhXcSTvx
-ls4Pm6Dso3pdvtUqdULle96ltqqvKKyskKw4t9VoNSZ63Pc78/1Fm9G7Q3hub/FC
-VGqY8A2tl+lSXunVanLeavcbYBT0peS2cWeqH+riTcFCQP5nRhc4L0c/cZyu5SHK
-YS1tB6iEfC3uUSXxY5Ce/eFXiGvviiNtsea9P63RPZYLhY3Naye7twWb7LuRqQoH
-EgKXTiCQ8P8NHuJBO9NAOueNXdpm5AKwB1KYXA6OM5zCppX7VRluTI6uSw+9wThN
-Xo+EHWbNxWCWtFJaBYmOlXqYwZE8lSOyDvR5tMl8wUohAgMBAAGjggE/MIIBOzAf
-BgNVHSMEGDAWgBTVZx3gnHosnMvFmOcdByYqhux0zTAdBgNVHQ4EFgQUzMzvzClg
-pDuxkrY8+jJij6wlFTswDgYDVR0PAQH/BAQDAgEGMEAGA1UdIAQ5MDcwCQYHYIZ2
-ZQADATAJBgdghnZlAAMCMAkGB2CGdmUAAwMwCQYHYIZ2ZQADBDAJBgdghnZlAAMA
-MA8GA1UdEwEB/wQFMAMBAf8wPgYDVR0fBDcwNTAzoDGgL4YtaHR0cDovL2dyY2Eu
-bmF0Lmdvdi50dy9yZXBvc2l0b3J5L0NSTDIvQ0EuY3JsMFYGCCsGAQUFBwEBBEow
-SDBGBggrBgEFBQcwAoY6aHR0cDovL2dyY2EubmF0Lmdvdi50dy9yZXBvc2l0b3J5
-L0NlcnRzL0lzc3VlZFRvVGhpc0NBLnA3YjANBgkqhkiG9w0BAQsFAAOCAgEAQYW8
-MPfAEZJTO5RgynxIFZVVN1cQCFU6/yF0WS66bEXKVWhz42TXQ9+vXX4R2CPyo1Xx
-5Qx+kzOK4jb6LUuAqOYHw5R2QpXox5qjraCoAg9r+cFA3SrzhBe7Mhx+ktCaDaAS
-++wxSUJm7Gu8S87grPQT1GKxy7wnCbtOmqmtixhXFu98tAcb5JtWoexD23DdKHlH
-tv4Ptn7qhIMd3RflM/fXx3UuiwhtCFWDda7PobuLDXOC9zn96R6Q43EpSgZAq6cU
-tKrUc3YB0mRmyRzekCNBcLtgthvK6gFTHBNIotZAkzCEWd6GUVP0V96qxcNP63HB
-GmSd5t5INJ4K//iJUVwqnM8Qiugs7eSu2ov9E2korPeUx2IwW7yJogC4GKsvOqY7
-ijyWzfq+V9UeHaKBOyVH2BNUFd8yD1nxfUU7pPXTXH/Wlwi3Riuj1N3GegrbmiKN
-ILXwLBvwVDyDyksSaOUFLc8ELdzorAFC4/wpV8SFjz0cDg0SQ8KTfrhqnE/49T32
-ePMmkuPG6RscGUmt/CHIBELrVuUg9fBsqHhXsEcLwPxpCa3zoz+65l3xC96C7dOs
-nILgAleXRJeNnNWztqPMjsmK3bskVfr7JZ/mUfTlkujH33gYl49q+04CcYgeP1zq
-Yu1iuTWLXNZzI2QG/3rs8Q9ZYXwyJReCoxC5d+I=
------END CERTIFICATE-----`,
-		// subject=/C=TW/O=Government Root Certification Authority
-		// issuer=/C=TW/O=Government Root Certification Authority
-		`-----BEGIN CERTIFICATE-----
-MIIGSTCCBDGgAwIBAgIRAP7mJmeBQUNcX66p8ttLpm8wDQYJKoZIhvcNAQEFBQAw
-PzELMAkGA1UEBhMCVFcxMDAuBgNVBAoMJ0dvdmVybm1lbnQgUm9vdCBDZXJ0aWZp
-Y2F0aW9uIEF1dGhvcml0eTAeFw0xMjA5MjgwOTEzMjlaFw0zMjEyMDUxMzIzMzNa
-MD8xCzAJBgNVBAYTAlRXMTAwLgYDVQQKDCdHb3Zlcm5tZW50IFJvb3QgQ2VydGlm
-aWNhdGlvbiBBdXRob3JpdHkwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoIC
-AQC2/5c8gb4BWCQnr44BK9ZykjAyG1+bfNTUf+ihYHMwVxAA+lCWJP5Q5ow6ldFX
-eYTVZ1MMKoI+GFy4MCYa1l7GLbIEUQ7v3wxjR+vEEghRK5lxXtVpe+FdyXcdIOxW
-juVhYC386RyA3/pqg7sFtR4jEpyCygrzFB0g5AaPQySZn7YKk1pzGxY5vgW28Yyl
-ZJKPBeRcdvc5w88tvQ7Yy6gOMZvJRg9nU0MEj8iyyIOAX7ryD6uBNaIgIZfOD4k0
-eA/PH07p+4woPN405+2f0mb1xcoxeNLOUNFggmOd4Ez3B66DNJ1JSUPUfr0t4urH
-cWWACOQ2nnlwCjyHKenkkpTqBpIpJ3jmrdc96QoLXvTg1oadLXLLi2RW5vSueKWg
-OTNYPNyoj420ai39iHPplVBzBN8RiD5C1gJ0+yzEb7xs1uCAb9GGpTJXA9ZN9E4K
-mSJ2fkpAgvjJ5E7LUy3Hsbbi08J1J265DnGyNPy/HE7CPfg26QrMWJqhGIZO4uGq
-s3NZbl6dtMIIr69c/aQCb/+4DbvVq9dunxpPkUDwH0ZVbaCSw4nNt7H/HLPLo5wK
-4/7NqrwB7N1UypHdTxOHpPaY7/1J1lcqPKZc9mA3v9g+fk5oKiMyOr5u5CI9ByTP
-isubXVGzMNJxbc5Gim18SjNE2hIvNkvy6fFRCW3bapcOFwIDAQABo4IBPjCCATow
-HwYDVR0jBBgwFoAUzMzvzClgpDuxkrY8+jJij6wlFTswHQYDVR0OBBYEFNVnHeCc
-eiycy8WY5x0HJiqG7HTNMA4GA1UdDwEB/wQEAwIBBjBABgNVHSAEOTA3MAkGB2CG
-dmUAAwEwCQYHYIZ2ZQADAjAJBgdghnZlAAMDMAkGB2CGdmUAAwQwCQYHYIZ2ZQAD
-ADAPBgNVHRMBAf8EBTADAQH/MD0GA1UdHwQ2MDQwMqAwoC6GLGh0dHA6Ly9ncmNh
-Lm5hdC5nb3YudHcvcmVwb3NpdG9yeS9DUkwvQ0EuY3JsMFYGCCsGAQUFBwEBBEow
-SDBGBggrBgEFBQcwAoY6aHR0cDovL2dyY2EubmF0Lmdvdi50dy9yZXBvc2l0b3J5
-L0NlcnRzL0lzc3VlZFRvVGhpc0NBLnA3YjANBgkqhkiG9w0BAQUFAAOCAgEAY5IV
-CK/CMXYyelsy8bSDPzGiiDG9ZcpXvJdDgV2gnU701Q7uJ52tGOk2pg0CL5WjChVz
-Vwmk34jXaBKAQZRF7ruOC3cU2HYfx3IKk8z+CWmVu4PMTmlR5VyPiZoqTfWuiFUP
-7p+krL/b97HWZN2G0ein+++/fcdJnTRyxKDBJIpiwXoNjTgN0QYfSRMFAATng3c7
-clDtSDYiJlnM0iecu2f1xOWSXwpN9zZQ9KiBKsPS8D5WKBBwLvqq4pwxEHbWJael
-UwOzdfW5+P8hzEeuZ7g3BoeoxuPPJACZjgvYUf6Lp1N9HitiwlBYwt1Sk/hggT4r
-ykRCghvY2BN0J5Aago8WAtiPH393yLM0PUAPl260C6H4qJCfft+v1LPFRzimukO0
-8jZDtJinIKjN4ZNiBO4/wpvpBpAsRZQkbwvMeQKqOhEduH+deDg1LgTidtWapK6D
-H4OADQnWfsH96MWrA2OQAU/3n7SGuwDsT3I8oYwXCZ4Za0FMJIcftZuA8soU7bHo
-Tvmiar3DZrvPZE6uq0dHboxVt/4Qsogv+3PMRkqV6X8lk18hzkClEvToQh4xUW2R
-wnXMUCSjca4A59fi12K6chOo3hv0gIe9OQAkSGWrlAOfCERTio8fW8dC+/or/ZgX
-ha+uQ1DoDj7b4KImmT4M6idBYze1/LoKcnizOQs=
------END CERTIFICATE-----`},
-}
-
-func urlReplacement(url string) []*x509.Certificate {
-	cs, ok := replacements[url]
-	if !ok {
-		return nil
-	}
-	var r []*x509.Certificate
-	for _, c := range cs {
-		s, _ := pem.Decode([]byte(c))
-		if s == nil {
-			log.Fatalf("Can't decode built-in: %s", c)
-			return nil
-		}
-		cert, err := x509.ParseCertificate(s.Bytes)
-		if err != nil {
-			log.Fatalf("Can't parse built-in: %s\n%s", c, err)
-			return nil
-		}
-		if cert == nil {
-			log.Fatalf("Parse didn't produce a cert: %s", c)
-			return nil
-		}
-		r = append(r, cert)
-	}
-	return r
-}
diff --git a/ct/fixchain/test_chains.go b/ct/fixchain/test_chains.go
deleted file mode 100644
index b917252..0000000
--- a/ct/fixchain/test_chains.go
+++ /dev/null
@@ -1,315 +0,0 @@
-package fixchain
-
-// Chain 1:
-const googleLeaf = `-----BEGIN CERTIFICATE-----
-MIIDITCCAoqgAwIBAgIQL9+89q6RUm0PmqPfQDQ+mjANBgkqhkiG9w0BAQUFADBM
-MQswCQYDVQQGEwJaQTElMCMGA1UEChMcVGhhd3RlIENvbnN1bHRpbmcgKFB0eSkg
-THRkLjEWMBQGA1UEAxMNVGhhd3RlIFNHQyBDQTAeFw0wOTEyMTgwMDAwMDBaFw0x
-MTEyMTgyMzU5NTlaMGgxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlh
-MRYwFAYDVQQHFA1Nb3VudGFpbiBWaWV3MRMwEQYDVQQKFApHb29nbGUgSW5jMRcw
-FQYDVQQDFA53d3cuZ29vZ2xlLmNvbTCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkC
-gYEA6PmGD5D6htffvXImttdEAoN4c9kCKO+IRTn7EOh8rqk41XXGOOsKFQebg+jN
-gtXj9xVoRaELGYW84u+E593y17iYwqG7tcFR39SDAqc9BkJb4SLD3muFXxzW2k6L
-05vuuWciKh0R73mkszeK9P4Y/bz5RiNQl/Os/CRGK1w7t0UCAwEAAaOB5zCB5DAM
-BgNVHRMBAf8EAjAAMDYGA1UdHwQvMC0wK6ApoCeGJWh0dHA6Ly9jcmwudGhhd3Rl
-LmNvbS9UaGF3dGVTR0NDQS5jcmwwKAYDVR0lBCEwHwYIKwYBBQUHAwEGCCsGAQUF
-BwMCBglghkgBhvhCBAEwcgYIKwYBBQUHAQEEZjBkMCIGCCsGAQUFBzABhhZodHRw
-Oi8vb2NzcC50aGF3dGUuY29tMD4GCCsGAQUFBzAChjJodHRwOi8vd3d3LnRoYXd0
-ZS5jb20vcmVwb3NpdG9yeS9UaGF3dGVfU0dDX0NBLmNydDANBgkqhkiG9w0BAQUF
-AAOBgQCfQ89bxFApsb/isJr/aiEdLRLDLE5a+RLizrmCUi3nHX4adpaQedEkUjh5
-u2ONgJd8IyAPkU0Wueru9G2Jysa9zCRo1kNbzipYvzwY4OA8Ys+WAi0oR1A04Se6
-z5nRUP8pJcA2NhUzUnC+MY+f6H/nEQyNv4SgQhqAibAxWEEHXw==
------END CERTIFICATE-----
-`
-
-const thawteIntermediate = `-----BEGIN CERTIFICATE-----
-MIIDIzCCAoygAwIBAgIEMAAAAjANBgkqhkiG9w0BAQUFADBfMQswCQYDVQQGEwJV
-UzEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xNzA1BgNVBAsTLkNsYXNzIDMgUHVi
-bGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwHhcNMDQwNTEzMDAw
-MDAwWhcNMTQwNTEyMjM1OTU5WjBMMQswCQYDVQQGEwJaQTElMCMGA1UEChMcVGhh
-d3RlIENvbnN1bHRpbmcgKFB0eSkgTHRkLjEWMBQGA1UEAxMNVGhhd3RlIFNHQyBD
-QTCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEA1NNn0I0Vf67NMf59HZGhPwtx
-PKzMyGT7Y/wySweUvW+Aui/hBJPAM/wJMyPpC3QrccQDxtLN4i/1CWPN/0ilAL/g
-5/OIty0y3pg25gqtAHvEZEo7hHUD8nCSfQ5i9SGraTaEMXWQ+L/HbIgbBpV8yeWo
-3nWhLHpo39XKHIdYYBkCAwEAAaOB/jCB+zASBgNVHRMBAf8ECDAGAQH/AgEAMAsG
-A1UdDwQEAwIBBjARBglghkgBhvhCAQEEBAMCAQYwKAYDVR0RBCEwH6QdMBsxGTAX
-BgNVBAMTEFByaXZhdGVMYWJlbDMtMTUwMQYDVR0fBCowKDAmoCSgIoYgaHR0cDov
-L2NybC52ZXJpc2lnbi5jb20vcGNhMy5jcmwwMgYIKwYBBQUHAQEEJjAkMCIGCCsG
-AQUFBzABhhZodHRwOi8vb2NzcC50aGF3dGUuY29tMDQGA1UdJQQtMCsGCCsGAQUF
-BwMBBggrBgEFBQcDAgYJYIZIAYb4QgQBBgpghkgBhvhFAQgBMA0GCSqGSIb3DQEB
-BQUAA4GBAFWsY+reod3SkF+fC852vhNRj5PZBSvIG3dLrWlQoe7e3P3bB+noOZTc
-q3J5Lwa/q4FwxKjt6lM07e8eU9kGx1Yr0Vz00YqOtCuxN5BICEIlxT6Ky3/rbwTR
-bcV0oveifHtgPHfNDs5IAn8BL7abN+AqKjbc1YXWrOU/VG+WHgWv
------END CERTIFICATE-----
-`
-
-const verisignRoot = `-----BEGIN CERTIFICATE-----
-MIICPDCCAaUCEHC65B0Q2Sk0tjjKewPMur8wDQYJKoZIhvcNAQECBQAwXzELMAkG
-A1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMTcwNQYDVQQLEy5DbGFz
-cyAzIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRpb24gQXV0aG9yaXR5MB4XDTk2
-MDEyOTAwMDAwMFoXDTI4MDgwMTIzNTk1OVowXzELMAkGA1UEBhMCVVMxFzAVBgNV
-BAoTDlZlcmlTaWduLCBJbmMuMTcwNQYDVQQLEy5DbGFzcyAzIFB1YmxpYyBQcmlt
-YXJ5IENlcnRpZmljYXRpb24gQXV0aG9yaXR5MIGfMA0GCSqGSIb3DQEBAQUAA4GN
-ADCBiQKBgQDJXFme8huKARS0EN8EQNvjV69qRUCPhAwL0TPZ2RHP7gJYHyX3KqhE
-BarsAx94f56TuZoAqiN91qyFomNFx3InzPRMxnVx0jnvT0Lwdd8KkMaOIG+YD/is
-I19wKTakyYbnsZogy1Olhec9vn2a/iRFM9x2Fe0PonFkTGUugWhFpwIDAQABMA0G
-CSqGSIb3DQEBAgUAA4GBALtMEivPLCYATxQT3ab7/AoRhIzzKBxnki98tsX63/Do
-lbwdj2wsqFHMc9ikwFPwTtYmwHYBV4GSXiHx0bH/59AhWM1pF+NEHJwZRDmJXNyc
-AA9WjQKZ7aKQRUzkuxCkPfAyAw7xzvjoyVGM5mKf5p/AfbdynMk2OmufTqj/ZA1k
------END CERTIFICATE-----
-`
-
-// Chain 2:
-const megaLeaf = `-----BEGIN CERTIFICATE-----
-MIIFOjCCBCKgAwIBAgIQWYE8Dup170kZ+k11Lg51OjANBgkqhkiG9w0BAQUFADBy
-MQswCQYDVQQGEwJHQjEbMBkGA1UECBMSR3JlYXRlciBNYW5jaGVzdGVyMRAwDgYD
-VQQHEwdTYWxmb3JkMRowGAYDVQQKExFDT01PRE8gQ0EgTGltaXRlZDEYMBYGA1UE
-AxMPRXNzZW50aWFsU1NMIENBMB4XDTEyMTIxNDAwMDAwMFoXDTE0MTIxNDIzNTk1
-OVowfzEhMB8GA1UECxMYRG9tYWluIENvbnRyb2wgVmFsaWRhdGVkMS4wLAYDVQQL
-EyVIb3N0ZWQgYnkgSW5zdHJhIENvcnBvcmF0aW9uIFB0eS4gTFREMRUwEwYDVQQL
-EwxFc3NlbnRpYWxTU0wxEzARBgNVBAMTCm1lZ2EuY28ubnowggEiMA0GCSqGSIb3
-DQEBAQUAA4IBDwAwggEKAoIBAQDcxMCClae8BQIaJHBUIVttlLvhbK4XhXPk3RQ3
-G5XA6tLZMBQ33l3F9knYJ0YErXtr8IdfYoulRQFmKFMJl9GtWyg4cGQi2Rcr5VN5
-S5dA1vu4oyJBxE9fPELcK6Yz1vqaf+n6za+mYTiQYKggVdS8/s8hmNuXP9Zk1pIn
-+q0pGsf8NAcSHMJgLqPQrTDw+zae4V03DvcYfNKjuno88d2226ld7MAmQZ7uRNsI
-/CnkdelVs+akZsXf0szefSqMJlf08SY32t2jj4Ra7RApVYxOftD9nij/aLfuqOU6
-ow6IgIcIG2ZvXLZwK87c5fxL7UAsTTV+M1sVv8jA33V2oKLhAgMBAAGjggG9MIIB
-uTAfBgNVHSMEGDAWgBTay+qtWwhdzP/8JlTOSeVVxjj0+DAdBgNVHQ4EFgQUmP9l
-6zhyrZ06Qj4zogt+6LKFk4AwDgYDVR0PAQH/BAQDAgWgMAwGA1UdEwEB/wQCMAAw
-NAYDVR0lBC0wKwYIKwYBBQUHAwEGCCsGAQUFBwMCBgorBgEEAYI3CgMDBglghkgB
-hvhCBAEwTwYDVR0gBEgwRjA6BgsrBgEEAbIxAQICBzArMCkGCCsGAQUFBwIBFh1o
-dHRwczovL3NlY3VyZS5jb21vZG8uY29tL0NQUzAIBgZngQwBAgEwOwYDVR0fBDQw
-MjAwoC6gLIYqaHR0cDovL2NybC5jb21vZG9jYS5jb20vRXNzZW50aWFsU1NMQ0Eu
-Y3JsMG4GCCsGAQUFBwEBBGIwYDA4BggrBgEFBQcwAoYsaHR0cDovL2NydC5jb21v
-ZG9jYS5jb20vRXNzZW50aWFsU1NMQ0FfMi5jcnQwJAYIKwYBBQUHMAGGGGh0dHA6
-Ly9vY3NwLmNvbW9kb2NhLmNvbTAlBgNVHREEHjAcggptZWdhLmNvLm56gg53d3cu
-bWVnYS5jby5uejANBgkqhkiG9w0BAQUFAAOCAQEAcYhrsPSvDuwihMOh0ZmRpbOE
-Gw6LqKgLNTmaYUPQhzi2cyIjhUhNvugXQQlP5f0lp5j8cixmArafg1dTn4kQGgD3
-ivtuhBTgKO1VYB/VRoAt6Lmswg3YqyiS7JiLDZxjoV7KoS5xdiaINfHDUaBBY4ZH
-j2BUlPniNBjCqXe/HndUTVUewlxbVps9FyCmH+C4o9DWzdGBzDpCkcmo5nM+cp7q
-ZhTIFTvZfo3zGuBoyu8BzuopCJcFRm3cRiXkpI7iOMUIixO1szkJS6WpL1sKdT73
-UXp08U0LBqoqG130FbzEJBBV3ixbvY6BWMHoCWuaoF12KJnC5kHt2RoWAAgMXA==
------END CERTIFICATE-----
-`
-
-const comodoIntermediate = `-----BEGIN CERTIFICATE-----
-MIIFAzCCA+ugAwIBAgIQGLLLuqME8aAPwfLzJkYqSjANBgkqhkiG9w0BAQUFADCB
-gTELMAkGA1UEBhMCR0IxGzAZBgNVBAgTEkdyZWF0ZXIgTWFuY2hlc3RlcjEQMA4G
-A1UEBxMHU2FsZm9yZDEaMBgGA1UEChMRQ09NT0RPIENBIExpbWl0ZWQxJzAlBgNV
-BAMTHkNPTU9ETyBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTAeFw0wNjEyMDEwMDAw
-MDBaFw0xOTEyMzEyMzU5NTlaMHIxCzAJBgNVBAYTAkdCMRswGQYDVQQIExJHcmVh
-dGVyIE1hbmNoZXN0ZXIxEDAOBgNVBAcTB1NhbGZvcmQxGjAYBgNVBAoTEUNPTU9E
-TyBDQSBMaW1pdGVkMRgwFgYDVQQDEw9Fc3NlbnRpYWxTU0wgQ0EwggEiMA0GCSqG
-SIb3DQEBAQUAA4IBDwAwggEKAoIBAQCt8AiwcsargxIxF3CJhakgEtSYau2A1NHf
-5I5ZLdOWIY120j8YC0YZYwvHIPPlC92AGvFaoL0dds23Izp0XmEbdaqb1IX04XiR
-0y3hr/yYLgbSeT1awB8hLRyuIVPGOqchfr7tZ291HRqfalsGs2rjsQuqag7nbWzD
-ypWMN84hHzWQfdvaGlyoiBSyD8gSIF/F03/o4Tjg27z5H6Gq1huQByH6RSRQXScq
-oChBRVt9vKCiL6qbfltTxfEFFld+Edc7tNkBdtzffRDPUanlOPJ7FAB1WfnwWdsX
-Pvev5gItpHnBXaIcw5rIp6gLSApqLn8tl2X2xQScRMiZln5+pN0vAgMBAAGjggGD
-MIIBfzAfBgNVHSMEGDAWgBQLWOWLxkwVN6RAqTCpIb5HNlpW/zAdBgNVHQ4EFgQU
-2svqrVsIXcz//CZUzknlVcY49PgwDgYDVR0PAQH/BAQDAgEGMBIGA1UdEwEB/wQI
-MAYBAf8CAQAwIAYDVR0lBBkwFwYKKwYBBAGCNwoDAwYJYIZIAYb4QgQBMD4GA1Ud
-IAQ3MDUwMwYEVR0gADArMCkGCCsGAQUFBwIBFh1odHRwczovL3NlY3VyZS5jb21v
-ZG8uY29tL0NQUzBJBgNVHR8EQjBAMD6gPKA6hjhodHRwOi8vY3JsLmNvbW9kb2Nh
-LmNvbS9DT01PRE9DZXJ0aWZpY2F0aW9uQXV0aG9yaXR5LmNybDBsBggrBgEFBQcB
-AQRgMF4wNgYIKwYBBQUHMAKGKmh0dHA6Ly9jcnQuY29tb2RvY2EuY29tL0NvbW9k
-b1VUTlNHQ0NBLmNydDAkBggrBgEFBQcwAYYYaHR0cDovL29jc3AuY29tb2RvY2Eu
-Y29tMA0GCSqGSIb3DQEBBQUAA4IBAQAtlzR6QDLqcJcvgTtLeRJ3rvuq1xqo2l/z
-odueTZbLN3qo6u6bldudu+Ennv1F7Q5Slqz0J790qpL0pcRDAB8OtXj5isWMcL2a
-ejGjKdBZa0wztSz4iw+SY1dWrCRnilsvKcKxudokxeRiDn55w/65g+onO7wdQ7Vu
-F6r7yJiIatnyfKH2cboZT7g440LX8NqxwCPf3dfxp+0Jj1agq8MLy6SSgIGSH6lv
-+Wwz3D5XxqfyH8wqfOQsTEZf6/Nh9yvENZ+NWPU6g0QO2JOsTGvMd/QDzczc4BxL
-XSXaPV7Od4rhPsbXlM1wSTz/Dr0ISKvlUhQVnQ6cGodWaK2cCQBk
------END CERTIFICATE-----
-`
-
-const comodoRoot = `-----BEGIN CERTIFICATE-----
-MIIEHTCCAwWgAwIBAgIQToEtioJl4AsC7j41AkblPTANBgkqhkiG9w0BAQUFADCB
-gTELMAkGA1UEBhMCR0IxGzAZBgNVBAgTEkdyZWF0ZXIgTWFuY2hlc3RlcjEQMA4G
-A1UEBxMHU2FsZm9yZDEaMBgGA1UEChMRQ09NT0RPIENBIExpbWl0ZWQxJzAlBgNV
-BAMTHkNPTU9ETyBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTAeFw0wNjEyMDEwMDAw
-MDBaFw0yOTEyMzEyMzU5NTlaMIGBMQswCQYDVQQGEwJHQjEbMBkGA1UECBMSR3Jl
-YXRlciBNYW5jaGVzdGVyMRAwDgYDVQQHEwdTYWxmb3JkMRowGAYDVQQKExFDT01P
-RE8gQ0EgTGltaXRlZDEnMCUGA1UEAxMeQ09NT0RPIENlcnRpZmljYXRpb24gQXV0
-aG9yaXR5MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA0ECLi3LjkRv3
-UcEbVASY06m/weaKXTuH+7uIzg3jLz8GlvCiKVCZrts7oVewdFFxze1CkU1B/qnI
-2GqGd0S7WWaXUF601CxwRM/aN5VCaTwwxHGzUvAhTaHYujl8HJ6jJJ3ygxaYqhZ8
-Q5sVW7euNJH+1GImGEaaP+vB+fGQV+useg2L23IwambV4EajcNxo2f8ESIl33rXp
-+2dtQem8Ob0y2WIC8bGoPW43nOIv4tOiJovGuFVDiOEjPqXSJDlqR6sA1KGzqSX+
-DT+nHbrTUcELpNqsOO9VUCQFZUaTNE8tja3G1CEZ0o7KBWFxB3NH5YoZEr0ETc5O
-nKVIrLsm9wIDAQABo4GOMIGLMB0GA1UdDgQWBBQLWOWLxkwVN6RAqTCpIb5HNlpW
-/zAOBgNVHQ8BAf8EBAMCAQYwDwYDVR0TAQH/BAUwAwEB/zBJBgNVHR8EQjBAMD6g
-PKA6hjhodHRwOi8vY3JsLmNvbW9kb2NhLmNvbS9DT01PRE9DZXJ0aWZpY2F0aW9u
-QXV0aG9yaXR5LmNybDANBgkqhkiG9w0BAQUFAAOCAQEAPpiem/Yb6dc5t3iuHXIY
-SdOH5EOC6z/JqvWote9VfCFSZfnVDeFs9D6Mk3ORLgLETgdxb8CPOGEIqB6BCsAv
-IC9Bi5HcSEW88cbeunZrM8gALTFGTO3nnc+IlP8zwFboJIYmuNg4ON8qa90SzMc/
-RxdMosIGlgnW2/4/PEZB31jiVg88O8EckzXZOFKs7sjsLjBOlDW0JB9LeGna8gI4
-zJVSk/BwJVmcIGfE7vmLV2H0knZ9P4SNVbfo5azV8fUZVqZa+5Acr5Pr5RzUZ5dd
-BA6+C4OmF4O5MBKgxTMVBbkN+8cFduPYSo38NBejxiEovjBFMR7HeL5YYTisO+IB
-ZQ==
------END CERTIFICATE-----
-`
-
-// Chain 3:
-
-const testLeaf = `-----BEGIN CERTIFICATE-----
-MIIDrzCCApegAwIBAgIJAJlJNev65WpnMA0GCSqGSIb3DQEBCwUAMFoxCzAJBgNV
-BAYTAlVLMRAwDgYDVQQIEwdFbmdsYW5kMQ8wDQYDVQQHEwZMb25kb24xEDAOBgNV
-BAoTB0V4YW1wbGUxFjAUBgNVBAMTDUludGVybWVkaWF0ZTIwHhcNMTYwMjI5MTY1
-MjAxWhcNMTYwMzMwMTY1MjAxWjBRMQswCQYDVQQGEwJVSzEQMA4GA1UECBMHRW5n
-bGFuZDEPMA0GA1UEBxMGTG9uZG9uMRAwDgYDVQQKEwdFeGFtcGxlMQ0wCwYDVQQD
-EwRMZWFmMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEApNsqW+/vRclm
-Kbu/TcE6wfORzL8Nv9mGIsos94x1WrMOoRKMp3Slvczg9fGZsQNKrixW/38ZyUqW
-KzIh/PKH4L3hgSQFsomZ7C1zZ4yiH+zZTf+fjPRX86q8hf1cOhP0YdMvYMmSfjHG
-I7UDC9AAz6f8AmvK6CdNQaMlikZpfolWxQUsqhajVrHNv4LhjXFS/Yyi23D2qDpG
-0e3kgQ+54OlWb3Gg2hsBZ6ddILukzLgkctYzHLtUv4EdAzol79yHdx+H7GxxF7c5
-Ldju1H+b+Xc/dEBSKRCjEuJhXXmNlutfQPE6JzA9sr0wAXJBt/6n2UCEEZld4+XM
-CtYaCxMrSwIDAQABo4GAMH4wDAYDVR0TBAUwAwEB/zAdBgNVHQ4EFgQUppd9scFX
-d2jUJEeUHA87ttmyOjQwRAYIKwYBBQUHAQEEODA2MDQGCCsGAQUFBzAChihodHRw
-Oi8vd3d3LmV4YW1wbGUuY29tL2ludGVybWVkaWF0ZTIuY3J0MAkGA1UdEQQCMAAw
-DQYJKoZIhvcNAQELBQADggEBAIrtR+O1H20nUqxnBIS8/efGH7YUBpKGGbs3CmSW
-7+IUke1VcDO3gNMjW7A/UxDM+1GM0MYD0/Pmlnk3/Q4TLZDpkAbk6lU5A/PVLqyE
-5maPmwA+uIL3So9ivoCbIqbK/38g0Gqvdvq3yafH/60iodBAokr7r5iY/HmMBp4y
-8PpQsZpx16XJWm0mkzvUx8OBS0MD/mnoCWE5i3Q9FT+KEEByZEyxj+2aqx3bYPhl
-bqdbmwN5ZqYKt4lvJHJbjZb4gKKEEaFcBNJjZoSUDWnE+I1ZwmaXzkwwqfFEam1v
-FSv/+x5C+55ylyX9E+S3UoH7wVswX/iT08hKL4IInmPoYQE=
------END CERTIFICATE-----
-`
-
-const testIntermediate2 = `-----BEGIN CERTIFICATE-----
-MIIDuDCCAqCgAwIBAgIJALmEjiSeHoB7MA0GCSqGSIb3DQEBCwUAMFoxCzAJBgNV
-BAYTAlVLMRAwDgYDVQQIDAdFbmdsYW5kMQ8wDQYDVQQHDAZMb25kb24xEDAOBgNV
-BAoMB0V4YW1wbGUxFjAUBgNVBAMMDUludGVybWVkaWF0ZTEwHhcNMTYwMjI5MTY0
-NzQ1WhcNMTYwMzMwMTY0NzQ1WjBaMQswCQYDVQQGEwJVSzEQMA4GA1UECBMHRW5n
-bGFuZDEPMA0GA1UEBxMGTG9uZG9uMRAwDgYDVQQKEwdFeGFtcGxlMRYwFAYDVQQD
-Ew1JbnRlcm1lZGlhdGUyMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA
-ukLNzAPup6wt5e4pGsZ1na6VIj7sx74WaenW2RNp2NrxTQIGPugU2HET8PPau/ch
-VQNCtKLq8Wx9Kslq/aqn2e00jhxxrQmVc1fPwSnpOudhwbU6hvUkjYVtZ36BnGdp
-oWw6HNVeemaBYFOtH6RXo/KtD7A+YLbfc5am//iMCdZI2oBeTLEToB3q21p/0PKm
-pIKGZrPJnFdzSPlVkcDr/Lz8a1UCPYQW4zjPlYZjp9wDWpR7E7Fwla1RSFwBTnu1
-xTVJnK7DU/i2A3JV9YLx63f9rBwwQdFBRWxr67GVeU6L7j43k/8H8CKCoOkk9Gf/
-NP2pI6ZRh+toX4EzFaRL4QIDAQABo4GAMH4wDAYDVR0TBAUwAwEB/zAdBgNVHQ4E
-FgQUSxliX4GqBki8rtWTgWYVp/1FXc0wRAYIKwYBBQUHAQEEODA2MDQGCCsGAQUF
-BzAChihodHRwOi8vd3d3LmV4YW1wbGUuY29tL2ludGVybWVkaWF0ZTEuY3J0MAkG
-A1UdEQQCMAAwDQYJKoZIhvcNAQELBQADggEBAINOzqDqNRgbWBEliCMQffLlJCAR
-ypQ6U/jqeUlfZ2VKgPYo2wyloaMgOFKtaHUeOjiiQ1YJEgtP1BlyRmlazRi7iqWI
-hvTtWom/8hyWG6AyN0tA4yK0+R4+OxMKDrNXU/C9W2p/yoI/fftU4m7QirqAW0ow
-jzgjd3+M+eiIDDxBIwLLPPJGKXTqFBQ6U0LPTfNJrX1IzeSUTpHO7uoD/OWAlcC5
-6LZxbPrgl3qb2bExavvXNDm4WkZwfG3iodi27FRIW8dydePbE/Ism1AADByMdzZ9
-boo602kOaxt0kkvfgyUkXdRMlAhlzgTyGJmY69tZmvcWlsh7Rm+R5+fQeMI=
------END CERTIFICATE-----
-`
-
-const testIntermediate1 = `-----BEGIN CERTIFICATE-----
-MIIDkDCCAnigAwIBAgIJAK65INis8Pe8MA0GCSqGSIb3DQEBCwUAMD4xCzAJBgNV
-BAYTAlVLMRAwDgYDVQQIEwdFbmdsYW5kMRAwDgYDVQQKEwdFeGFtcGxlMQswCQYD
-VQQDEwJDQTAeFw0xNjAyMjkxNjM2MDdaFw0xNjAzMzAxNjM2MDdaMFoxCzAJBgNV
-BAYTAlVLMRAwDgYDVQQIDAdFbmdsYW5kMQ8wDQYDVQQHDAZMb25kb24xEDAOBgNV
-BAoMB0V4YW1wbGUxFjAUBgNVBAMMDUludGVybWVkaWF0ZTEwggEiMA0GCSqGSIb3
-DQEBAQUAA4IBDwAwggEKAoIBAQDNibsPgy2npVpATi/JrOEsbjmBBRgLDXp8tA5T
-JTl5YGn4K/9eltl12JvnXh5EgBxl8uTQwgaBX/+IY6BdXOcldfKPIBIO04gU9JtG
-DnvW0638T2ujmwyDkpKZ4yTqugHo5nteLLDzt1iOMNeAZud0y5Lwxql4JIFI9eat
-8C3JUESx9A8ZBNvAbcd38KBIoJAf67V5r2R3maqA/krxczVmUpf+xDuzkcEWDlgX
-HfTC0mH2y2jsuPx4eepM7h+oPf0n/Nsoln4H+KiLL9l2bt5AtT1qdapQbcU1+GrU
-I8Kqgvbe0XNlmZ6XYkQrprGcZTGmIsHNMWW+E6oyJni2O5TpAgMBAAGjdTBzMAwG
-A1UdEwQFMAMBAf8wHQYDVR0OBBYEFL/b9VYR33yOBrw5QONVjHhb8+O5MDkGCCsG
-AQUFBwEBBC0wKzApBggrBgEFBQcwAoYdaHR0cDovL3d3dy5leGFtcGxlLmNvbS9j
-YS5jcnQwCQYDVR0RBAIwADANBgkqhkiG9w0BAQsFAAOCAQEAvwEKifIQX/Ua9PwF
-J8i6tf4IfMaP1ra46n9uwwC3YPsQF8MjLys+mcaM899lroaPIRwy/FrRfx4lLsHm
-EwN3jNgvRPDgUpGF7qsC2HcKUpvAzQoHQy/JN8Gy2StywtzvlaswR8qKR32zKoUc
-y95NwaGzg4HxK3lNpj0Vorus6VED8GLgbiewAmFVlXd/pWrv8t1zzCyK780zetgD
-R4xC6VVsV+6V/1MqiuVtYHUWJj6MBAWOXPnHeZB6BDjuQh7MdQr7Bx4EOzZnnzny
-4hTZOFVQeV/7jx/NKQoh/oEyGBqNW8R5umynowG/SHFQGNKpyvzQvZr6enPbrHEI
-pLLzxA==
------END CERTIFICATE-----
-`
-
-const testRoot = `-----BEGIN CERTIFICATE-----
-MIIDOTCCAiGgAwIBAgIJAJWqHxvK6nAQMA0GCSqGSIb3DQEBBQUAMD4xCzAJBgNV
-BAYTAlVLMRAwDgYDVQQIEwdFbmdsYW5kMRAwDgYDVQQKEwdFeGFtcGxlMQswCQYD
-VQQDEwJDQTAeFw0xNjAyMjkxNTU1MDBaFw0xNzAyMjgxNTU1MDBaMD4xCzAJBgNV
-BAYTAlVLMRAwDgYDVQQIEwdFbmdsYW5kMRAwDgYDVQQKEwdFeGFtcGxlMQswCQYD
-VQQDEwJDQTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBANKk/zKjG6Z4
-Cux2o7v0HmkRuzMmn0jXizpH9+9g0MKCcIfbUK05YpUUX09Ij3u4t9zrbola+drt
-0u5DV9FujtD3cjwOOxvSyGWzzqoI2uh5pOFDkTaEtBzvLEB9T1wsrvmLXy0IMEhu
-QL8B33SY+7T5cuBPSIX0uipRJDz+1k+ESwfXhXz4uS1Y1K7GD+BxlPVrh71WxA5r
-f+hHsDE9f2LvCTI156dJHtBVSzAFxq/Kl2r+fofFCKUyBo9wNgL3j4t/jxbkEwA+
-YDpqZ1YFYSFD/3tn/vEF0KmdmW9L3zrCli1WWtAOkl7oVCgPiXs9mfjZqYj4+0la
-hJhae79jS+sCAwEAAaM6MDgwHQYDVR0OBBYEFP+7oT2emG1zF5bhXfVyrUWCymEj
-MAwGA1UdEwQFMAMBAf8wCQYDVR0RBAIwADANBgkqhkiG9w0BAQUFAAOCAQEAfbyn
-lejnhbuiR5s7ENw1aMkod3FnZhhAIhCHncqsAJ1XPqaVvZxgrY3Rrxudp9rA9Gwn
-ZJoPqLOLhcWzLkSpPQ1w43HOk19Ok9UGRsSpkHlPbTac3wzcjKEbBpPONgoin80/
-ZGMvti8uvkZH8qqWsvmRrq4pDEK1h2eeF0ayF349evdKyFB2yfWV5dUrBXin28vf
-AcQIk20/eb9bZ3KMPCa3dGjzDaQDAuutjS/XkRRkmMnp3q3ZQKlE8Fc+bzoP274Q
-X2+I8S85sfOxJOR+CF6CY7IND2BlnUFCOXvIk2V8tX1lbP3Lv6Ukuz+AlQ7Whn5T
-qiVjrghWwV/u6h3HSA==
------END CERTIFICATE-----
-`
-
-// Chain 4: Contains a loop: C signed by B signed by A signed by B etc
-
-const testC = `-----BEGIN CERTIFICATE-----
-MIIDUjCCAjqgAwIBAgIJANYuoGKAZHTEMA0GCSqGSIb3DQEBBQUAMD0xCzAJBgNV
-BAYTAlVLMRAwDgYDVQQIDAdFbmdsYW5kMRAwDgYDVQQKDAdFeGFtcGxlMQowCAYD
-VQQDDAFCMB4XDTE2MDMwMTE2MjE1NFoXDTE3MDMwMTE2MjE1NFowPTELMAkGA1UE
-BhMCVUsxEDAOBgNVBAgMB0VuZ2xhbmQxEDAOBgNVBAoMB0V4YW1wbGUxCjAIBgNV
-BAMMAUMwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC6Z4S+7d7dkUDH
-fOY1AALL2MAg2PqjleuCk4fvsRz5zyVSAMH7R1MAI5atP5RrEwWdMxlXQO1QCaFf
-j5P8uNzvCyVaryHkmObSHzgC1+NKpGXNOf1c8VV4XHZn4oLg8vtN1uMjO4Sv3tc6
-MaAqja9EkgIqO6HoN5bhnyCpNJfyZDZEYtKamZqxLo0nABQ3kSlZd53ThqNaI26y
-u3yKlWC/WHctYbiFMBx3GVzTIGjKHlHlYDs+nqF1KtV1Z46pQsIDXsWb/AJ/Je9c
-JsE0JaPS86SRiQTf6/uyNNPLW1qteAe3yEl3Kc0hMunxDNbmRbKR8NO9xrHT5jFT
-e9FhFhsBAgMBAAGjVTBTMAwGA1UdEwQFMAMBAf8wOAYIKwYBBQUHAQEELDAqMCgG
-CCsGAQUFBzAChhxodHRwOi8vd3d3LmV4YW1wbGUuY29tL2IuY3J0MAkGA1UdEQQC
-MAAwDQYJKoZIhvcNAQEFBQADggEBAI3DU3KzKfFEsHp1Ie+kPJeHZWOxk5Ti5L+G
-M2OoIc7ht8qO1ty1PE0XgaZ+wjpiknWRj+RcDrETwB7iINatQhmvWkEhH6yl2GqJ
-IbucsNouTCYxfP1K9kT4/XuXh0Jg7Q1cjHpQfcAazfr68XRLhcZv5cQmDBDwjUq8
-OM1Xmp+BmYO+7XDM3g2j9d65xblgDFdWS4wM2pp63C3ywkuetXw/Yj2Pok/j+97D
-kGA8psFaxN/4vtHVzJg6YX80bNvURFNMoTjulxqhLvP8UqZidI7kU+V/JBRBZGvH
-ANWsKuJ5uadPBSat63pkIVTFsKwms1Vnfw39QDQi18HOp0zBzR0=
------END CERTIFICATE-----
-`
-
-const testB = `-----BEGIN CERTIFICATE-----
-MIIDUjCCAjqgAwIBAgIJAJWqHxvK6nASMA0GCSqGSIb3DQEBBQUAMD0xCzAJBgNV
-BAYTAlVLMRAwDgYDVQQIDAdFbmdsYW5kMRAwDgYDVQQKDAdFeGFtcGxlMQowCAYD
-VQQDDAFBMB4XDTE2MDMwMTE1MTMyMFoXDTE3MDMwMTE1MTMyMFowPTELMAkGA1UE
-BhMCVUsxEDAOBgNVBAgMB0VuZ2xhbmQxEDAOBgNVBAoMB0V4YW1wbGUxCjAIBgNV
-BAMMAUIwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDgQutw5xEEqBqn
-1aS/Ye2xSJOV3RtOeZ8aEDOOrzaU/VL39Kk46+5tb8KbTDyri8HUfGe9JlKYPaIG
-lxs6QBq0watILRgypzgKLkqmBprTQIzXpgWPkUwh2Hn6cR/8YMSbObxTXZmm6ELd
-GG/dn2LfchzB94/JEVs4FZpVXRlfL7Wp8L/eCzmOMuN8eSyXEJWCSiWezjclh14V
-znSZ3pmtxsdiBJcBVscVfsYyAJ/Zznpej5orbO7zn9kxxRNrVTlcW5twgnl07A6w
-Tav2yWdNnFJZJYRYha4x9dsz5ZutCsiYQ9ZJs7MxYVRkGtn+cf92PqICbr25XY8O
-RwPZU/FjAgMBAAGjVTBTMAwGA1UdEwQFMAMBAf8wOAYIKwYBBQUHAQEELDAqMCgG
-CCsGAQUFBzAChhxodHRwOi8vd3d3LmV4YW1wbGUuY29tL2EuY3J0MAkGA1UdEQQC
-MAAwDQYJKoZIhvcNAQEFBQADggEBAGZn7nEQUpBVu1iNg5lkvl+EWrk03s6LQt/8
-wWb3cKVMkWcO2dzeETukzUoAdJTBrhH+jg5Hvb53jnXzs3j1uNvfppPH5PFNxTYU
-YH8v6SmALBoFJXVTvZAqYRnKsTfBgatkbpEDMKjoq6JnOIKU8YMfnByBDfID9jUL
-r7Qf2YDuK9YwnZThKb8RFIX3KPnQpxBbdUQeC6jXZD2IU6Id0TFFX8sqBOJkDTZK
-FoqCxbUl6DWRY1hiZcM1qMTHJmy2vp13BDjNk5qeVB6QgpRFKG7C7zJ/PHjs8E13
-/0MIQerhu36y6wh/2UIdDEY1Ga1Wb7bbX/LYcKybY6BosF14wxM=
------END CERTIFICATE-----
-`
-
-const testA = `-----BEGIN CERTIFICATE-----
-MIIDUjCCAjqgAwIBAgIJANYuoGKAZHS+MA0GCSqGSIb3DQEBBQUAMD0xCzAJBgNV
-BAYTAlVLMRAwDgYDVQQIDAdFbmdsYW5kMRAwDgYDVQQKDAdFeGFtcGxlMQowCAYD
-VQQDDAFCMB4XDTE2MDMwMTE1MjIwMVoXDTE3MDMwMTE1MjIwMVowPTELMAkGA1UE
-BhMCVUsxEDAOBgNVBAgMB0VuZ2xhbmQxEDAOBgNVBAoMB0V4YW1wbGUxCjAIBgNV
-BAMMAUEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDP8EKj+C3KlGhw
-+e3s6P239N0gW96FPbAYeoyV8Hbz3A97MI+mAeRmhS85aX1Tg3jJwX3J+lLDtCeC
-jUQZ4IJUtR99JZaBni7rXB7zFgW6ppoIV1Oy0dMfgm4YVdyv3ww2335BsENtE7P1
-p6g9qCa9RItYMLQVrV2TeFqTyPCyVaGfmzhCrBKcIXenBQGSz4SoI6sZgyn6t7n5
-Uav4HvU0dd3jqXYuWA+TIaxokRva5EB/K+PsUKtSxYQILAlcpwwwWARvinfJv0Np
-W7gBtjOX0CQgTpY91JBrGpxpEa0J5qRnrudtRK8FEJVic9Sn35b+w2j/0T2KbSXu
-GfcA5z3PAgMBAAGjVTBTMAwGA1UdEwQFMAMBAf8wOAYIKwYBBQUHAQEELDAqMCgG
-CCsGAQUFBzAChhxodHRwOi8vd3d3LmV4YW1wbGUuY29tL2IuY3J0MAkGA1UdEQQC
-MAAwDQYJKoZIhvcNAQEFBQADggEBAHjwlz+C9Qn+Ggc1G7TcoIOuA4/yD8KqueIF
-GvUYXGgyXtV4cTQ5yTppWy8yhR2ZOCU7llOX0aoS3Oo3fKN7tcQGqz4n5LoPir4z
-1A/h8aplp/Fd6xyNdIcvjCH0lvbSgXr/ZwC+Y5uTBZ4q9mYa3VfyQwvf4WnLEYCV
-vxsEcab0f5Z9As8rEFb44Dgn5Qj9TMbJ5OqkGocX/fEe+fgSWzgYQQsgQ62r8EOY
-QeqTQVAp7z9430uwhPAVKFWT7gQcF9+zAtA93Zwvc3L5b84iwazEpy95EeyCMWzb
-4ymNu6ExYn88Tin40xYDjaX7mswccu3drC2icN0AfYEYl0rcD9Q=
------END CERTIFICATE-----
-`
diff --git a/ct/fixchain/test_functions.go b/ct/fixchain/test_functions.go
deleted file mode 100644
index 50db950..0000000
--- a/ct/fixchain/test_functions.go
+++ /dev/null
@@ -1,236 +0,0 @@
-package fixchain
-
-import (
-	"bytes"
-	"encoding/json"
-	"encoding/pem"
-	"errors"
-	"fmt"
-	"log"
-	"strings"
-	"sync"
-	"testing"
-
-	"github.com/google/certificate-transparency/go/x509"
-	"github.com/google/certificate-transparency/go/x509/pkix"
-)
-
-type nilLimiter struct{}
-
-func (l *nilLimiter) Wait() {
-	return
-}
-
-func newNilLimiter() *nilLimiter {
-	return &nilLimiter{}
-}
-
-type bytesReadCloser struct {
-	*bytes.Reader
-}
-
-func (rc bytesReadCloser) Close() error {
-	return nil
-}
-
-// CertificateFromPEM takes a string representing a certificate in PEM format
-// and returns the corresponding x509.Certificate object.
-func CertificateFromPEM(pemBytes string) (*x509.Certificate, error) {
-	block, _ := pem.Decode([]byte(pemBytes))
-	if block == nil {
-		return nil, errors.New("failed to decode PEM")
-	}
-	return x509.ParseCertificate(block.Bytes)
-}
-
-// GetTestCertificateFromPEM returns an x509.Certificate from a certificate in
-// PEM format for testing purposes.  Any errors in the PEM decoding process are
-// reported to the testing framework.
-func GetTestCertificateFromPEM(t *testing.T, pemBytes string) *x509.Certificate {
-	cert, err := CertificateFromPEM(pemBytes)
-	if err != nil {
-		t.Errorf("Failed to parse leaf: %s", err)
-	}
-	return cert
-}
-
-func nameToKey(name *pkix.Name) string {
-	return fmt.Sprintf("%s/%s/%s/%s", strings.Join(name.Country, ","),
-		strings.Join(name.Organization, ","),
-		strings.Join(name.OrganizationalUnit, ","), name.CommonName)
-}
-
-func chainToDebugString(chain []*x509.Certificate) string {
-	var chainStr string
-	for _, cert := range chain {
-		if len(chainStr) > 0 {
-			chainStr += " -> "
-		}
-		chainStr += nameToKey(&cert.Subject)
-	}
-	return chainStr
-}
-
-func matchTestChainList(t *testing.T, i int, want [][]string, got [][]*x509.Certificate) {
-	if len(want) != len(got) {
-		t.Errorf("#%d: Wanted %d chains, got back %d", i, len(want), len(got))
-	}
-
-	seen := make([]bool, len(want))
-NextOutputChain:
-	for _, chain := range got {
-	TryNextExpected:
-		for j, expChain := range want {
-			if seen[j] {
-				continue
-			}
-			if len(chain) != len(expChain) {
-				continue
-			}
-			for k, cert := range chain {
-				if !strings.Contains(nameToKey(&cert.Subject), expChain[k]) {
-					continue TryNextExpected
-				}
-			}
-			seen[j] = true
-			continue NextOutputChain
-		}
-		t.Errorf("#%d: No expected chain matched output chain %s", i,
-			chainToDebugString(chain))
-	}
-
-	for j, val := range seen {
-		if !val {
-			t.Errorf("#%d: No output chain matched expected chain %s", i,
-				strings.Join(want[j], " -> "))
-		}
-	}
-}
-
-func matchTestErrorList(t *testing.T, i int, want []errorType, got []*FixError) {
-	if len(want) != len(got) {
-		t.Errorf("#%d: Wanted %d errors, got back %d", i, len(want), len(got))
-	}
-
-	seen := make([]bool, len(want))
-NextOutputErr:
-	for _, err := range got {
-		for j, expErr := range want {
-			if seen[j] {
-				continue
-			}
-			if err.Type == expErr {
-				seen[j] = true
-				continue NextOutputErr
-			}
-		}
-		t.Errorf("#%d: No expected error matched output error %s", i, err.TypeString())
-	}
-
-	for j, val := range seen {
-		if !val {
-			t.Errorf("#%d: No output error matched expected error %s", i,
-				FixError{Type: want[j]}.TypeString())
-		}
-	}
-}
-
-func matchTestChain(t *testing.T, i int, want []string, got []*x509.Certificate) {
-	if len(got) != len(want) {
-		t.Errorf("#%d: Expected a chain of length %d, got one of length %d",
-			i, len(want), len(got))
-		return
-	}
-
-	if want != nil {
-		for j, cert := range got {
-			if !strings.Contains(nameToKey(&cert.Subject), want[j]) {
-				t.Errorf("#%d: Chain does not match expected chain at position %d", i, j)
-			}
-		}
-	}
-}
-
-func matchTestRoots(t *testing.T, i int, want []string, got *x509.CertPool) {
-	if len(got.Subjects()) != len(want) {
-		t.Errorf("#%d: received %d roots, expected %d", i, len(got.Subjects()), len(want))
-	}
-	testRoots := extractTestChain(t, i, want)
-	seen := make([]bool, len(testRoots))
-NextRoot:
-	for _, rootSub := range got.Subjects() {
-		for j, testRoot := range testRoots {
-			if seen[j] {
-				continue
-			}
-			if bytes.Equal(rootSub, testRoot.RawSubject) {
-				seen[j] = true
-				continue NextRoot
-			}
-		}
-		t.Errorf("#%d: No expected root matches one of the output roots", i)
-	}
-
-	for j, val := range seen {
-		if !val {
-			t.Errorf("#%d: No output root matches expected root %s", i, nameToKey(&testRoots[j].Subject))
-		}
-	}
-}
-
-func extractTestChain(t *testing.T, i int, testChain []string) []*x509.Certificate {
-	var chain []*x509.Certificate
-	for _, cert := range testChain {
-		chain = append(chain, GetTestCertificateFromPEM(t, cert))
-	}
-	return chain
-
-}
-
-func extractTestRoots(t *testing.T, i int, testRoots []string) *x509.CertPool {
-	roots := x509.NewCertPool()
-	for j, cert := range testRoots {
-		ok := roots.AppendCertsFromPEM([]byte(cert))
-		if !ok {
-			t.Errorf("#%d: Failed to parse root #%d", i, j)
-		}
-	}
-	return roots
-}
-
-func testChains(t *testing.T, i int, expectedChains [][]string, chains chan []*x509.Certificate, wg *sync.WaitGroup) {
-	defer wg.Done()
-	var allChains [][]*x509.Certificate
-	for chain := range chains {
-		allChains = append(allChains, chain)
-	}
-	matchTestChainList(t, i, expectedChains, allChains)
-}
-
-func testErrors(t *testing.T, i int, expectedErrs []errorType, errors chan *FixError, wg *sync.WaitGroup) {
-	defer wg.Done()
-	var allFerrs []*FixError
-	for ferr := range errors {
-		allFerrs = append(allFerrs, ferr)
-	}
-	matchTestErrorList(t, i, expectedErrs, allFerrs)
-}
-
-func stringRootsToJSON(roots []string) []byte {
-	type Roots struct {
-		Certs [][]byte `json:"certificates"`
-	}
-	var r Roots
-	for _, root := range roots {
-		cert, err := CertificateFromPEM(root)
-		if err != nil {
-			log.Fatalf("Failed to parse certificate: %s", err)
-		}
-		r.Certs = append(r.Certs, cert.Raw)
-	}
-	b, err := json.Marshal(r)
-	if err != nil {
-		log.Fatalf("Can't marshal JSON: %s", err)
-	}
-	return b
-}
diff --git a/ct/fixchain/test_round_trippers.go b/ct/fixchain/test_round_trippers.go
deleted file mode 100644
index da21037..0000000
--- a/ct/fixchain/test_round_trippers.go
+++ /dev/null
@@ -1,268 +0,0 @@
-package fixchain
-
-import (
-	"bytes"
-	"encoding/base64"
-	"encoding/json"
-	"errors"
-	"fmt"
-	"io/ioutil"
-	"net/http"
-	"strings"
-	"testing"
-
-	"github.com/google/certificate-transparency/go/x509"
-)
-
-type testRoundTripper struct {
-	t         *testing.T
-	test      *fixAndLogTest
-	testIndex int
-	seen      []bool
-}
-
-func (rt testRoundTripper) RoundTrip(request *http.Request) (*http.Response, error) {
-	url := fmt.Sprintf("%s://%s%s", request.URL.Scheme, request.URL.Host, request.URL.Path)
-	switch url {
-	case "https://ct.googleapis.com/pilot/ct/v1/get-roots":
-		b := stringRootsToJSON([]string{verisignRoot, testRoot})
-		return &http.Response{
-			Status:        "200 OK",
-			StatusCode:    200,
-			Proto:         request.Proto,
-			ProtoMajor:    request.ProtoMajor,
-			ProtoMinor:    request.ProtoMinor,
-			Body:          &bytesReadCloser{bytes.NewReader(b)},
-			ContentLength: int64(len(b)),
-			Request:       request,
-		}, nil
-	case "https://ct.googleapis.com/pilot/ct/v1/add-chain":
-		body, err := ioutil.ReadAll(request.Body)
-		request.Body.Close()
-		if err != nil {
-			errStr := fmt.Sprintf("#%d: Could not read request body: %s", rt.testIndex, err.Error())
-			rt.t.Error(errStr)
-			return nil, errors.New(errStr)
-		}
-
-		type Chain struct {
-			Chain [][]byte
-		}
-		var chainBytes Chain
-		err = json.Unmarshal(body, &chainBytes)
-		if err != nil {
-			errStr := fmt.Sprintf("#%d: Could not unmarshal json: %s", rt.testIndex, err.Error())
-			rt.t.Error(errStr)
-			return nil, errors.New(errStr)
-		}
-		var chain []*x509.Certificate
-		for _, certBytes := range chainBytes.Chain {
-			cert, err := x509.ParseCertificate(certBytes)
-			if err != nil {
-				errStr := fmt.Sprintf("#%d: Could not parse certificate: %s", rt.testIndex, err.Error())
-				rt.t.Error(errStr)
-				return nil, errors.New(errStr)
-			}
-			chain = append(chain, cert)
-		}
-
-	TryNextExpected:
-		for i, expChain := range rt.test.expLoggedChains {
-			if rt.seen[i] || len(chain) != len(expChain) {
-				continue
-			}
-			for j, cert := range chain {
-				if !strings.Contains(nameToKey(&cert.Subject), expChain[j]) {
-					continue TryNextExpected
-				}
-			}
-			rt.seen[i] = true
-			goto Return
-		}
-		rt.t.Errorf("#%d: Logged chain was not expected: %s", rt.testIndex, chainToDebugString(chain))
-	Return:
-		return &http.Response{
-			Status:        "200 OK",
-			StatusCode:    200,
-			Proto:         request.Proto,
-			ProtoMajor:    request.ProtoMajor,
-			ProtoMinor:    request.ProtoMinor,
-			Body:          &bytesReadCloser{bytes.NewReader([]byte(""))},
-			ContentLength: 0,
-			Request:       request,
-		}, nil
-	default:
-		var cert string
-		switch url {
-		case "http://www.thawte.com/repository/Thawte_SGC_CA.crt":
-			cert = thawteIntermediate
-		case "http://crt.comodoca.com/EssentialSSLCA_2.crt":
-			cert = comodoIntermediate
-		case "http://crt.comodoca.com/ComodoUTNSGCCA.crt":
-			cert = comodoRoot
-		case "http://www.example.com/intermediate2.crt":
-			cert = testIntermediate2
-		case "http://www.example.com/intermediate1.crt":
-			cert = testIntermediate1
-		case "http://www.example.com/ca.crt":
-			cert = testRoot
-		case "http://www.example.com/a.crt":
-			cert = testA
-		case "http://www.example.com/b.crt":
-			cert = testB
-		default:
-			return nil, fmt.Errorf("can't reach url %s", url)
-		}
-
-		return &http.Response{
-			Status:        "200 OK",
-			StatusCode:    200,
-			Proto:         request.Proto,
-			ProtoMajor:    request.ProtoMajor,
-			ProtoMinor:    request.ProtoMinor,
-			Body:          &bytesReadCloser{bytes.NewReader([]byte(cert))},
-			ContentLength: int64(len([]byte(cert))),
-			Request:       request,
-		}, nil
-	}
-}
-
-// The round tripper used during testing of PostChainToLog() is used to check
-// that the http requests sent by PostChainToLog() contain the right information
-// for a Certificate Transparency log to be able to log the given chain
-// (assuming the chain is valid).
-type postTestRoundTripper struct {
-	t         *testing.T
-	test      *postTest
-	testIndex int
-}
-
-func (rt postTestRoundTripper) RoundTrip(request *http.Request) (*http.Response, error) {
-	if strings.Contains(request.URL.Path, "/ct/v1/get-roots") {
-		b := stringRootsToJSON([]string{verisignRoot})
-		return &http.Response{
-			Status:        "200 OK",
-			StatusCode:    200,
-			Proto:         request.Proto,
-			ProtoMajor:    request.ProtoMajor,
-			ProtoMinor:    request.ProtoMinor,
-			Body:          &bytesReadCloser{bytes.NewReader(b)},
-			ContentLength: int64(len(b)),
-			Request:       request,
-		}, nil
-	}
-	// For tests that are checking the correct FixError type is returned:
-	if rt.test.ferr.Type == PostFailed {
-		return nil, errors.New("")
-	}
-
-	if rt.test.ferr.Type == LogPostFailed {
-		return &http.Response{
-			Status:        "501 Not Implemented",
-			StatusCode:    501,
-			Proto:         request.Proto,
-			ProtoMajor:    request.ProtoMajor,
-			ProtoMinor:    request.ProtoMinor,
-			Body:          &bytesReadCloser{bytes.NewReader([]byte(""))},
-			ContentLength: 0,
-			Request:       request,
-		}, nil
-	}
-
-	// For tests to check request sent to log looks right:
-	// Check method used
-	if request.Method != "POST" {
-		rt.t.Errorf("#%d: expected request method to be POST, received %s", rt.testIndex, request.Method)
-	}
-
-	// Check URL
-	if request.URL.Scheme != rt.test.urlScheme {
-		rt.t.Errorf("#%d: Scheme: received %s, expected %s", rt.testIndex, request.URL.Scheme, rt.test.urlScheme)
-	}
-	if request.URL.Host != rt.test.urlHost {
-		rt.t.Errorf("#%d: Host: received %s, expected %s", rt.testIndex, request.URL.Host, rt.test.urlHost)
-	}
-	if request.URL.Path != rt.test.urlPath {
-		rt.t.Errorf("#%d: Path: received %s, expected %s", rt.testIndex, request.URL.Path, rt.test.urlPath)
-	}
-
-	// Check Body
-	body, err := ioutil.ReadAll(request.Body)
-	request.Body.Close()
-	if err != nil {
-		errStr := fmt.Sprintf("#%d: Could not read request body: %s", rt.testIndex, err.Error())
-		rt.t.Error(errStr)
-		return nil, errors.New(errStr)
-	}
-
-	// Create string in the format that the Certificate Transparency logs expect
-	// the body of an add-chain request to be in.
-	var encode = base64.StdEncoding.EncodeToString
-	expStr := "{\"chain\":"
-	if rt.test.chain == nil {
-		expStr += "null"
-	} else {
-		expStr += "["
-		for i, cert := range rt.test.chain {
-			expStr += "\"" + encode(GetTestCertificateFromPEM(rt.t, cert).Raw) + "\""
-			if i != len(rt.test.chain)-1 {
-				expStr += ","
-			}
-		}
-		expStr += "]"
-	}
-	expStr += "}"
-
-	if string(body) != expStr {
-		rt.t.Errorf("#%d: incorrect format of request body.  Received %s, expected %s", rt.testIndex, string(body), expStr)
-	}
-
-	// Return a response
-	return &http.Response{
-		Status:        "200 OK",
-		StatusCode:    200,
-		Proto:         request.Proto,
-		ProtoMajor:    request.ProtoMajor,
-		ProtoMinor:    request.ProtoMinor,
-		Body:          &bytesReadCloser{bytes.NewReader([]byte(""))},
-		ContentLength: 0,
-		Request:       request,
-	}, nil
-}
-
-type newLoggerTestRoundTripper struct{}
-
-func (rt newLoggerTestRoundTripper) RoundTrip(request *http.Request) (*http.Response, error) {
-	// Return a response
-	b := stringRootsToJSON([]string{verisignRoot})
-	return &http.Response{
-		Status:        "200 OK",
-		StatusCode:    200,
-		Proto:         request.Proto,
-		ProtoMajor:    request.ProtoMajor,
-		ProtoMinor:    request.ProtoMinor,
-		Body:          &bytesReadCloser{bytes.NewReader(b)},
-		ContentLength: int64(len(b)),
-		Request:       request,
-	}, nil
-}
-
-type rootCertsTestRoundTripper struct{}
-
-func (rt rootCertsTestRoundTripper) RoundTrip(request *http.Request) (*http.Response, error) {
-	url := fmt.Sprintf("%s://%s%s", request.URL.Scheme, request.URL.Host, request.URL.Path)
-	if url == "https://ct.googleapis.com/pilot/ct/v1/get-roots" {
-		b := stringRootsToJSON([]string{verisignRoot, comodoRoot})
-		return &http.Response{
-			Status:        "200 OK",
-			StatusCode:    200,
-			Proto:         request.Proto,
-			ProtoMajor:    request.ProtoMajor,
-			ProtoMinor:    request.ProtoMinor,
-			Body:          &bytesReadCloser{bytes.NewReader(b)},
-			ContentLength: int64(len(b)),
-			Request:       request,
-		}, nil
-	}
-	return nil, errors.New("")
-}
diff --git a/ct/fixchain/test_tests.go b/ct/fixchain/test_tests.go
deleted file mode 100644
index 8c8f03e..0000000
--- a/ct/fixchain/test_tests.go
+++ /dev/null
@@ -1,137 +0,0 @@
-package fixchain
-
-type fixTest struct {
-	cert  string
-	chain []string
-	roots []string
-
-	function       string
-	expectedChains [][]string
-	expectedErrs   []errorType
-}
-
-var handleChainTests = []fixTest{
-	// handleChain()
-	{ // Correct chain returns chain
-		cert:  googleLeaf,
-		chain: []string{thawteIntermediate, verisignRoot},
-		roots: []string{verisignRoot},
-
-		function: "handleChain",
-		expectedChains: [][]string{
-			{"Google", "Thawte", "VeriSign"},
-		},
-	},
-	{ // No roots results in an error
-		cert:  googleLeaf,
-		chain: []string{thawteIntermediate, verisignRoot},
-
-		function:     "handleChain",
-		expectedErrs: []errorType{VerifyFailed, FixFailed},
-	},
-	{ // No roots where chain that will be built contains a loop results in error
-		cert:  testC,
-		chain: []string{testB, testA},
-
-		function:     "handleChain",
-		expectedErrs: []errorType{VerifyFailed, FixFailed},
-	},
-	{ // Incomplete chain returns a fixed chain
-		cert:  googleLeaf,
-		roots: []string{verisignRoot},
-
-		function: "handleChain",
-		expectedChains: [][]string{
-			{"Google", "Thawte", "VeriSign"},
-		},
-		expectedErrs: []errorType{VerifyFailed},
-	},
-	{
-		cert:  testLeaf,
-		roots: []string{testRoot},
-
-		function: "handleChain",
-		expectedChains: [][]string{
-			{"Leaf", "Intermediate2", "Intermediate1", "CA"},
-		},
-		expectedErrs: []errorType{VerifyFailed},
-	},
-	{ // The wrong intermediate and root results in an error
-		cert:  megaLeaf,
-		chain: []string{thawteIntermediate, verisignRoot},
-		roots: []string{verisignRoot},
-
-		function:     "handleChain",
-		expectedErrs: []errorType{VerifyFailed, FixFailed},
-	},
-	{ // The wrong root results in an error
-		cert:  megaLeaf,
-		chain: []string{comodoIntermediate, verisignRoot},
-		roots: []string{verisignRoot},
-
-		function:     "handleChain",
-		expectedErrs: []errorType{VerifyFailed, FixFailed},
-	},
-}
-
-type postTest struct {
-	url   string
-	chain []string
-
-	urlScheme string
-	urlHost   string
-	urlPath   string
-
-	ferr         *FixError
-	expectedErrs []errorType
-}
-
-var postTests = []postTest{
-	{
-		url:   "https://ct.googleapis.com/pilot",
-		chain: []string{googleLeaf, thawteIntermediate, verisignRoot},
-
-		urlScheme: "https",
-		urlHost:   "ct.googleapis.com",
-		urlPath:   "/pilot/ct/v1/add-chain",
-
-		ferr: &FixError{Type: None},
-	},
-	{ // Empty chain
-		url: "https://ct.googleapis.com/pilot",
-
-		urlScheme: "https",
-		urlHost:   "ct.googleapis.com",
-		urlPath:   "/pilot/ct/v1/add-chain",
-
-		ferr: &FixError{Type: None},
-	},
-	{
-		url:   "https://ct.googleapis.com/pilot",
-		chain: []string{googleLeaf, thawteIntermediate, verisignRoot},
-
-		ferr:         &FixError{Type: PostFailed},
-		expectedErrs: []errorType{PostFailed},
-	},
-	{
-		url:   "https://ct.googleapis.com/pilot",
-		chain: []string{googleLeaf, thawteIntermediate, verisignRoot},
-
-		ferr:         &FixError{Type: LogPostFailed},
-		expectedErrs: []errorType{LogPostFailed},
-	},
-}
-
-type fixAndLogTest struct {
-	url   string
-	chain []string
-
-	// Expected items that will be queued to be fixed then logged
-	expectedCert  string
-	expectedChain []string
-	expectedRoots []string
-
-	function        string
-	expLoggedChains [][]string
-	expectedErrs    []errorType
-}
diff --git a/ct/fixchain/url_cache.go b/ct/fixchain/url_cache.go
deleted file mode 100644
index 7215442..0000000
--- a/ct/fixchain/url_cache.go
+++ /dev/null
@@ -1,89 +0,0 @@
-package fixchain
-
-import (
-	"fmt"
-	"io/ioutil"
-	"log"
-	"net/http"
-	"sync"
-	"sync/atomic"
-	"time"
-)
-
-type lockedCache struct {
-	m map[string][]byte
-	sync.RWMutex
-}
-
-func (c *lockedCache) get(str string) ([]byte, bool) {
-	c.RLock()
-	defer c.RUnlock()
-	b, ok := c.m[str]
-	return b, ok
-}
-
-func (c *lockedCache) set(str string, b []byte) {
-	c.Lock()
-	defer c.Unlock()
-	c.m[str] = b
-}
-
-func newLockedCache() *lockedCache {
-	return &lockedCache{m: make(map[string][]byte)}
-}
-
-type urlCache struct {
-	client *http.Client
-	cache  *lockedCache
-
-	hit       uint32
-	miss      uint32
-	errors    uint32
-	badStatus uint32
-	readFail  uint32
-}
-
-func (u *urlCache) getURL(url string) ([]byte, error) {
-	r, ok := u.cache.get(url)
-	if ok {
-		atomic.AddUint32(&u.hit, 1)
-		return r, nil
-	}
-	c, err := u.client.Get(url)
-	if err != nil {
-		atomic.AddUint32(&u.errors, 1)
-		return nil, err
-	}
-	defer c.Body.Close()
-	// TODO(katjoyce): Add caching of permanent errors.
-	if c.StatusCode != 200 {
-		atomic.AddUint32(&u.badStatus, 1)
-		return nil, fmt.Errorf("can't deal with status %d", c.StatusCode)
-	}
-	r, err = ioutil.ReadAll(c.Body)
-	if err != nil {
-		atomic.AddUint32(&u.readFail, 1)
-		return nil, err
-	}
-	atomic.AddUint32(&u.miss, 1)
-	u.cache.set(url, r)
-	return r, nil
-}
-
-func newURLCache(c *http.Client, logStats bool) *urlCache {
-	u := &urlCache{cache: newLockedCache(), client: c}
-
-	if logStats {
-		t := time.NewTicker(time.Second)
-		go func() {
-			for _ = range t.C {
-				log.Printf("url cache: %d hits, %d misses, %d errors, "+
-					"%d bad status, %d read fail, %d cached", u.hit,
-					u.miss, u.errors, u.badStatus, u.readFail,
-					len(u.cache.m))
-			}
-		}()
-	}
-
-	return u
-}
diff --git a/ct/gossip/handler.go b/ct/gossip/handler.go
deleted file mode 100644
index 5386cf8..0000000
--- a/ct/gossip/handler.go
+++ /dev/null
@@ -1,143 +0,0 @@
-package gossip
-
-import (
-	"encoding/json"
-	"flag"
-	"fmt"
-	"log"
-	"net/http"
-	"time"
-
-	ct "github.com/google/certificate-transparency/go"
-)
-
-var defaultNumPollinationsToReturn = flag.Int("default_num_pollinations_to_return", 10,
-	"Number of randomly selected STH pollination entries to return for sth-pollination requests.")
-
-type clock interface {
-	Now() time.Time
-}
-
-type realClock struct{}
-
-func (realClock) Now() time.Time {
-	return time.Now()
-}
-
-// SignatureVerifierMap is a map of SignatureVerifier by LogID
-type SignatureVerifierMap map[ct.SHA256Hash]ct.SignatureVerifier
-
-// Handler for the gossip HTTP requests.
-type Handler struct {
-	storage   *Storage
-	verifiers SignatureVerifierMap
-	clock     clock
-}
-
-func writeWrongMethodResponse(rw *http.ResponseWriter, allowed string) {
-	(*rw).Header().Add("Allow", allowed)
-	(*rw).WriteHeader(http.StatusMethodNotAllowed)
-}
-
-func writeErrorResponse(rw *http.ResponseWriter, status int, body string) {
-	(*rw).WriteHeader(status)
-	(*rw).Write([]byte(body))
-}
-
-// HandleSCTFeedback handles requests POSTed to .../sct-feedback.
-// It attempts to store the provided SCT Feedback
-func (h *Handler) HandleSCTFeedback(rw http.ResponseWriter, req *http.Request) {
-	if req.Method != "POST" {
-		writeWrongMethodResponse(&rw, "POST")
-		return
-	}
-
-	decoder := json.NewDecoder(req.Body)
-	var feedback SCTFeedback
-	if err := decoder.Decode(&feedback); err != nil {
-		writeErrorResponse(&rw, http.StatusBadRequest, fmt.Sprintf("Invalid SCT Feedback received: %v", err))
-		return
-	}
-
-	// TODO(alcutter): 5.1.1 Validate leaf chains up to a trusted root
-	// TODO(alcutter): 5.1.1/2 Verify each SCT is valid and from a known log, discard those which aren't
-	// TODO(alcutter): 5.1.1/3 Discard leaves for domains other than ours.
-	if err := h.storage.AddSCTFeedback(feedback); err != nil {
-		writeErrorResponse(&rw, http.StatusInternalServerError, fmt.Sprintf("Unable to store feedback: %v", err))
-		return
-	}
-	rw.WriteHeader(http.StatusOK)
-}
-
-// HandleSTHPollination handles requests POSTed to .../sth-pollination.
-// It attempts to store the provided pollination info, and returns a random set of
-// pollination data from the last 14 days (i.e. "fresh" by the definition of the gossip RFC.)
-func (h *Handler) HandleSTHPollination(rw http.ResponseWriter, req *http.Request) {
-	if req.Method != "POST" {
-		writeWrongMethodResponse(&rw, "POST")
-		return
-	}
-
-	decoder := json.NewDecoder(req.Body)
-	var p STHPollination
-	if err := decoder.Decode(&p); err != nil {
-		writeErrorResponse(&rw, http.StatusBadRequest, fmt.Sprintf("Invalid STH Pollination received: %v", err))
-		return
-	}
-
-	sthToKeep := make([]ct.SignedTreeHead, 0, len(p.STHs))
-	for _, sth := range p.STHs {
-		v, found := h.verifiers[sth.LogID]
-		if !found {
-			log.Printf("Pollination entry for unknown logID: %s", sth.LogID.Base64String())
-			continue
-		}
-		if err := v.VerifySTHSignature(sth); err != nil {
-			log.Printf("Failed to verify STH, dropping: %v", err)
-			continue
-		}
-		sthToKeep = append(sthToKeep, sth)
-	}
-	p.STHs = sthToKeep
-
-	err := h.storage.AddSTHPollination(p)
-	if err != nil {
-		writeErrorResponse(&rw, http.StatusInternalServerError, fmt.Sprintf("Couldn't store pollination: %v", err))
-		return
-	}
-
-	freshTime := h.clock.Now().AddDate(0, 0, -14)
-	rp, err := h.storage.GetRandomSTHPollination(freshTime, *defaultNumPollinationsToReturn)
-	if err != nil {
-		writeErrorResponse(&rw, http.StatusInternalServerError, fmt.Sprintf("Couldn't fetch pollination to return: %v", err))
-		return
-	}
-
-	json := json.NewEncoder(rw)
-	if err := json.Encode(*rp); err != nil {
-		writeErrorResponse(&rw, http.StatusInternalServerError, fmt.Sprintf("Couldn't encode pollination to return: %v", err))
-		return
-	}
-}
-
-// NewHandler creates a new Handler object, taking a pointer a Storage object to
-// use for storing and retrieving feedback and pollination data, and a
-// SignatureVerifierMap for verifying signatures from known logs.
-func NewHandler(s *Storage, v SignatureVerifierMap) Handler {
-	return Handler{
-		storage:   s,
-		verifiers: v,
-		clock:     realClock{},
-	}
-}
-
-// NewHandler creates a new Handler object, taking a pointer a Storage object to
-// use for storing and retrieving feedback and pollination data, and a
-// SignatureVerifierMap for verifying signatures from known logs.
-func newHandlerWithClock(s *Storage, v SignatureVerifierMap, c clock) Handler {
-	return Handler{
-		storage:   s,
-		verifiers: v,
-		clock:     c,
-	}
-}
diff --git a/ct/gossip/handler_test.go b/ct/gossip/handler_test.go
deleted file mode 100644
index 6252f37..0000000
--- a/ct/gossip/handler_test.go
+++ /dev/null
@@ -1,490 +0,0 @@
-package gossip
-
-import (
-	"bytes"
-	"encoding/json"
-	"io/ioutil"
-	"log"
-	"net/http"
-	"net/http/httptest"
-	"os"
-	"strings"
-	"testing"
-	"time"
-
-	"github.com/google/certificate-transparency/go"
-	"github.com/stretchr/testify/assert"
-)
-
-const (
-	logIDB64 = `aPaY+B9kgr46jO65KB1M/HFRXWeT1ETRCmesu09P+8Q=`
-
-	pubKey = "-----BEGIN PUBLIC KEY-----\n" +
-		"MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE1/TMabLkDpCjiupacAlP7xNi0I1J\n" +
-		"YP8bQFAHDG1xhtolSY1l4QgNRzRrvSe8liE+NPWHdjGxfx3JhTsN9x8/6Q==\n" +
-		"-----END PUBLIC KEY-----\n"
-
-	addSCTFeedbackJSON = `
-      {
-        "sct_feedback": [
-          { "x509_chain": [
-            "CHAIN00",
-            "CHAIN01"
-            ],
-            "sct_data": [
-            "SCT00",
-            "SCT01",
-            "SCT02"
-            ]
-          }, {
-            "x509_chain": [
-            "CHAIN10",
-            "CHAIN11"
-            ],
-            "sct_data": [
-            "SCT10",
-            "SCT11",
-            "SCT12"
-            ]
-          }
-        ]
-      }`
-
-	stuckClockTimeMillis       = 1441360035224 // Fri Sep  4 10:47:15 BST 2015
-	stuckClockTimeFutureMillis = 1450000000000 // Sun Dec 13 09:46:40 GMT 2015
-
-	addSTHPollinationJSON = `
-      {
-        "sths": [
-          {
-            "sth_version": 0,
-            "tree_size": 8285192,
-            "timestamp": 1441360035224,
-            "sha256_root_hash": "5g2CdT06dF6YcEDPYO50jQWqRvnGwi5BcgGYY10e3+I=",
-            "tree_head_signature": "BAMASDBGAiEAnGFvHwZJsSMkj7nd+Hshd9lOcWQvi1HIA2t1D47I1W4CIQCGu7+aVm0y/hxWGk+HcFIqoA9DptQkdxUdgIrdq5LRQw==",
-            "log_id": "aPaY+B9kgr46jO65KB1M/HFRXWeT1ETRCmesu09P+8Q="
-          }, {
-            "sth_version": 0,
-            "tree_size": 8285157,
-            "timestamp": 1441356438793,
-            "sha256_root_hash": "A9YRqKNRutdXq3ADPeRxJrqAZv24w4bACrM9IBKK/io=",
-            "tree_head_signature": "BAMARzBFAiEAxFSIDea57BRpB+RQxwd2/gzEieOXZx2Hvu7/0L0Oo7wCICH4hte0sPI6G5IGYJbL0lDTMjnGC7NmUOIQRBrm07vM",
-            "log_id": "aPaY+B9kgr46jO65KB1M/HFRXWeT1ETRCmesu09P+8Q="
-          }, {
-            "sth_version": 0,
-            "tree_size": 8285124,
-            "timestamp": 1441352904860,
-            "sha256_root_hash": "gIvD8vwCqzvI/cCM3vT5l5VBXbyeGXOgU1eymOHy2S0=",
-            "tree_head_signature": "BAMARjBEAiAwV+gwZQVJxPDrVLc32QiWnu44Mw4wT3oK8AkyuihU/AIgb/qc3UPgZDSx+C9nadKCCsgrQ285Hm5HnngtfY7ph18=",
-            "log_id": "aPaY+B9kgr46jO65KB1M/HFRXWeT1ETRCmesu09P+8Q="
-          }
-        ]
-      }`
-
-	addSTHPollinationUnknownLogIDJSON = `
-      {
-        "sths": [
-          {
-            "sth_version": 0,
-            "tree_size": 8285192,
-            "timestamp": 1441360035224,
-            "sha256_root_hash": "5g2CdT06dF6YcEDPYO50jQWqRvnGwi5BcgGYY10e3+I=",
-            "tree_head_signature": "BAMASDBGAiEAnGFvHwZJsSMkj7nd+Hshd9lOcWQvi1HIA2t1D47I1W4CIQCGu7+aVm0y/hxWGk+HcFIqoA9DptQkdxUdgIrdq5LRQw==",
-            "log_id": "BLAHBLAHBLAHBLAHBLAHBLAHBLAHBLAHBLAHBLAHBLA="
-          }
-        ]
-      }`
-
-	addSTHPollinationInvalidSignatureJSON = `
-      {
-        "sths": [
-          {
-            "sth_version": 0,
-            "tree_size": 8285192,
-            "timestamp": 1441360035224,
-            "sha256_root_hash": "5g2CdT06dF6YcEDPYO50jQWqRvnGwi5BcgGYY10e3+I=",
-            "tree_head_signature": "BAMARLAHBLAHBLAHBLAHBLAHBLAHBLAHBLAHBLAHBLAHBLAHBLAHBLAHBLAHBLAHBLAHBLAHBLAHBLAHBLAHBLAHBLAHBLAHBLAHBLAH",
-            "log_id": "aPaY+B9kgr46jO65KB1M/HFRXWeT1ETRCmesu09P+8Q="
-          }
-        ]
-      }`
-)
-
-type stuckClock struct {
-	at time.Time
-}
-
-func (s stuckClock) Now() time.Time {
-	return s.at
-}
-
-func createAndOpenStorage() *Storage {
-	// Jump through some hoops to get a temp file name.
-	// ioutil.TempFile(...) actually creates an empty file for us; we just want the name though, so we'll delete the created file.
-	// (SQLite *may* be fine with opening a zero-byte file and assuming that's ok, but let's not chance it.)
-	dbFile, err := ioutil.TempFile("", "handler_test")
-	if err != nil {
-		log.Fatalf("Failed to get a temporary file: %v", err)
-	}
-	if err := dbFile.Close(); err != nil {
-		log.Fatalf("Failed to Close() temporary file: %v", err)
-	}
-	if err := os.Remove(dbFile.Name()); err != nil {
-		log.Fatalf("Failed to Remove() temporary file: %v", err)
-	}
-
-	s := &Storage{}
-	if err := s.Open(dbFile.Name()); err != nil {
-		log.Fatalf("Failed to Open() storage: %v", err)
-	}
-	return s
-}
-
-func closeAndDeleteStorage(s *Storage) {
-	s.Close()
-	if err := os.Remove(s.dbPath); err != nil {
-		log.Printf("Failed to remove test DB (%v): %v", s.dbPath, err)
-	}
-}
-
-func mustCreateSignatureVerifiers(t *testing.T) SignatureVerifierMap {
-	m := make(SignatureVerifierMap)
-	key, id, _, err := ct.PublicKeyFromPEM([]byte(pubKey))
-	if err != nil {
-		t.Fatalf("Failed to parse pubkey: %v", err)
-	}
-	sv, err := ct.NewSignatureVerifier(key)
-	if err != nil {
-		t.Fatalf("Failed to create new SignatureVerifier: %v", err)
-	}
-	m[id] = *sv
-	return m
-}
-
-func sctFeedbackFromString(t *testing.T, s string) SCTFeedback {
-	json := json.NewDecoder(strings.NewReader(s))
-	var f SCTFeedback
-	if err := json.Decode(&f); err != nil {
-		t.Fatalf("Failed to parse JSON: %v", err)
-	}
-	return f
-}
-
-func sthPollinationFromString(t *testing.T, s string) STHPollination {
-	json := json.NewDecoder(strings.NewReader(s))
-	var f STHPollination
-	if err := json.Decode(&f); err != nil {
-		t.Fatalf("Failed to parse JSON: %v", err)
-	}
-	return f
-}
-
-func expectStorageHasFeedback(t *testing.T, s *Storage, chain []string, sct string) {
-	sctID, err := s.getSCTID(sct)
-	if err != nil {
-		t.Fatalf("Failed to look up ID for SCT %v: %v", sct, err)
-	}
-	chainID, err := s.getChainID(chain)
-	if err != nil {
-		t.Fatalf("Failed to look up ID for Chain %v: %v", chain, err)
-	}
-	assert.True(t, s.hasFeedback(sctID, chainID))
-}
-
-func mustGet(t *testing.T, f func() (int64, error)) int64 {
-	v, err := f()
-	if err != nil {
-		t.Fatalf("Got error while calling %v: %v", f, err)
-	}
-	return v
-}
-
-func testStuckClock(m int64) stuckClock {
-	return stuckClock{
-		at: time.Unix(m/1000, 0),
-	}
-}
-
-func TestHandlesValidSCTFeedback(t *testing.T) {
-	s := createAndOpenStorage()
-	defer closeAndDeleteStorage(s)
-	v := mustCreateSignatureVerifiers(t)
-	h := newHandlerWithClock(s, v, testStuckClock(stuckClockTimeMillis))
-
-	rr := httptest.NewRecorder()
-	req, err := http.NewRequest("POST", "/.well-known/ct/v1/sct-feedback", strings.NewReader(addSCTFeedbackJSON))
-	if err != nil {
-		t.Fatalf("Failed to create request: %v", err)
-	}
-
-	h.HandleSCTFeedback(rr, req)
-	assert.Equal(t, http.StatusOK, rr.Code)
-
-	f := sctFeedbackFromString(t, addSCTFeedbackJSON)
-	for _, entry := range f.Feedback {
-		for _, sct := range entry.SCTData {
-			expectStorageHasFeedback(t, s, entry.X509Chain, sct)
-		}
-	}
-}
-
-func TestHandlesDuplicatedSCTFeedback(t *testing.T) {
-	s := createAndOpenStorage()
-	defer closeAndDeleteStorage(s)
-	v := mustCreateSignatureVerifiers(t)
-	h := newHandlerWithClock(s, v, testStuckClock(stuckClockTimeMillis))
-
-	rr := httptest.NewRecorder()
-	req, err := http.NewRequest("POST", "/.well-known/ct/v1/sct-feedback", strings.NewReader(addSCTFeedbackJSON))
-	if err != nil {
-		t.Fatalf("Failed to create request: %v", err)
-	}
-
-	for i := 0; i < 10; i++ {
-		h.HandleSCTFeedback(rr, req)
-		assert.Equal(t, http.StatusOK, rr.Code)
-	}
-
-	numExpectedChains := 0
-	numExpectedSCTs := 0
-	f := sctFeedbackFromString(t, addSCTFeedbackJSON)
-	for _, entry := range f.Feedback {
-		numExpectedChains++
-		for _, sct := range entry.SCTData {
-			numExpectedSCTs++
-			expectStorageHasFeedback(t, s, entry.X509Chain, sct)
-		}
-	}
-
-	assert.EqualValues(t, numExpectedChains, mustGet(t, s.getNumChains))
-	assert.EqualValues(t, numExpectedSCTs, mustGet(t, s.getNumSCTs))
-	assert.EqualValues(t, numExpectedSCTs, mustGet(t, s.getNumFeedback)) // one feedback entry per SCT/Chain pair
-}
-
-func TestRejectsInvalidSCTFeedback(t *testing.T) {
-	s := createAndOpenStorage()
-	defer closeAndDeleteStorage(s)
-	v := mustCreateSignatureVerifiers(t)
-	h := newHandlerWithClock(s, v, testStuckClock(stuckClockTimeMillis))
-
-	rr := httptest.NewRecorder()
-	req, err := http.NewRequest("POST", "/.well-known/ct/v1/sct-feedback", strings.NewReader("BlahBlah},"))
-	if err != nil {
-		t.Fatalf("Failed to create request: %v", err)
-	}
-
-	h.HandleSCTFeedback(rr, req)
-	assert.Equal(t, http.StatusBadRequest, rr.Code)
-}
-
-func TestHandlesValidSTHPollination(t *testing.T) {
-	s := createAndOpenStorage()
-	defer closeAndDeleteStorage(s)
-	v := mustCreateSignatureVerifiers(t)
-	h := newHandlerWithClock(s, v, testStuckClock(stuckClockTimeMillis))
-
-	rr := httptest.NewRecorder()
-	req, err := http.NewRequest("POST", "/.well-known/ct/v1/sth-pollination", strings.NewReader(addSTHPollinationJSON))
-	if err != nil {
-		t.Fatalf("Failed to create request: %v", err)
-	}
-
-	h.HandleSTHPollination(rr, req)
-	if !assert.Equal(t, http.StatusOK, rr.Code) {
-		t.Fatal(rr.Body.String())
-	}
-
-	f := sthPollinationFromString(t, addSTHPollinationJSON)
-
-	assert.EqualValues(t, len(f.STHs), mustGet(t, s.getNumSTHs))
-	for _, sth := range f.STHs {
-		assert.True(t, s.hasSTH(sth))
-	}
-}
-
-func TestHandlesDuplicateSTHPollination(t *testing.T) {
-	s := createAndOpenStorage()
-	defer closeAndDeleteStorage(s)
-	v := mustCreateSignatureVerifiers(t)
-	h := newHandlerWithClock(s, v, testStuckClock(stuckClockTimeMillis))
-
-	pollen := sthPollinationFromString(t, addSTHPollinationJSON)
-	pollenJSON, err := json.Marshal(pollen)
-	if err != nil {
-		t.Fatalf("Failed to marshal pollen JSON: %v", err)
-	}
-
-	rr := httptest.NewRecorder()
-	req, err := http.NewRequest("POST", "/.well-known/ct/v1/sth-pollination", bytes.NewReader(pollenJSON))
-
-	if err != nil {
-		t.Fatalf("Failed to create request: %v", err)
-	}
-
-	for i := 0; i < 10; i++ {
-		h.HandleSTHPollination(rr, req)
-		assert.Equal(t, http.StatusOK, rr.Code)
-	}
-
-	assert.EqualValues(t, len(pollen.STHs), mustGet(t, s.getNumSTHs))
-	for _, sth := range pollen.STHs {
-		assert.True(t, s.hasSTH(sth))
-	}
-}
-
-func TestHandlesInvalidSTHPollination(t *testing.T) {
-	s := createAndOpenStorage()
-	defer closeAndDeleteStorage(s)
-	v := mustCreateSignatureVerifiers(t)
-	h := newHandlerWithClock(s, v, testStuckClock(stuckClockTimeMillis))
-
-	rr := httptest.NewRecorder()
-	req, err := http.NewRequest("POST", "/.well-known/ct/v1/sth-pollination", strings.NewReader("blahblah,,}{"))
-	if err != nil {
-		t.Fatalf("Failed to create request: %v", err)
-	}
-
-	h.HandleSTHPollination(rr, req)
-	assert.Equal(t, http.StatusBadRequest, rr.Code)
-}
-
-func TestRejectsSTHFromUnknownLog(t *testing.T) {
-	s := createAndOpenStorage()
-	defer closeAndDeleteStorage(s)
-	v := mustCreateSignatureVerifiers(t)
-	h := newHandlerWithClock(s, v, testStuckClock(stuckClockTimeMillis))
-
-	rr := httptest.NewRecorder()
-	req, err := http.NewRequest("POST", "/.well-known/ct/v1/sth-pollination", strings.NewReader(addSTHPollinationUnknownLogIDJSON))
-	if err != nil {
-		t.Fatalf("Failed to create request: %v", err)
-	}
-
-	h.HandleSTHPollination(rr, req)
-	if !assert.Equal(t, http.StatusOK, rr.Code) {
-		t.Fatal(rr.Body.String())
-	}
-
-	assert.EqualValues(t, 0, mustGet(t, s.getNumSTHs))
-}
-
-func TestRejectsSTHWithInvalidSignature(t *testing.T) {
-	s := createAndOpenStorage()
-	defer closeAndDeleteStorage(s)
-	v := mustCreateSignatureVerifiers(t)
-	h := newHandlerWithClock(s, v, testStuckClock(stuckClockTimeMillis))
-
-	rr := httptest.NewRecorder()
-	req, err := http.NewRequest("POST", "/.well-known/ct/v1/sth-pollination", strings.NewReader(addSTHPollinationInvalidSignatureJSON))
-	if err != nil {
-		t.Fatalf("Failed to create request: %v", err)
-	}
-
-	h.HandleSTHPollination(rr, req)
-	if !assert.Equal(t, http.StatusOK, rr.Code) {
-		t.Fatal(rr.Body.String())
-	}
-
-	assert.EqualValues(t, 0, mustGet(t, s.getNumSTHs))
-}
-
-func TestReturnsSTHPollination(t *testing.T) {
-	s := createAndOpenStorage()
-	defer closeAndDeleteStorage(s)
-	v := mustCreateSignatureVerifiers(t)
-	h := newHandlerWithClock(s, v, testStuckClock(stuckClockTimeMillis))
-
-	sentPollen := sthPollinationFromString(t, addSTHPollinationJSON)
-	sentPollenJSON, err := json.Marshal(sentPollen)
-	if err != nil {
-		t.Fatalf("Failed to marshal pollen JSON: %v", err)
-	}
-
-	rr := httptest.NewRecorder()
-	req, err := http.NewRequest("POST", "/.well-known/ct/v1/sth-pollination", bytes.NewReader(sentPollenJSON))
-	if err != nil {
-		t.Fatalf("Failed to create request: %v", err)
-	}
-
-	h.HandleSTHPollination(rr, req)
-	assert.Equal(t, http.StatusOK, rr.Code)
-
-	// Make the request again because it seems there's a race inside (go-)sqlite3
-	// somewhere; occasionally the storage handler doesn't see any pollen
-	// despite the fact that the transaction which wrote it committed before
-	// the select was executed.
-	h.HandleSTHPollination(rr, req)
-	assert.Equal(t, http.StatusOK, rr.Code)
-
-	// since this is an empty DB, we should get back all of the pollination we sent
-	// TODO(alcutter): We probably shouldn't blindly return stuff we were just given really, that's kinda silly, but it'll do for now.
-	recvPollen := sthPollinationFromString(t, rr.Body.String())
-
-	for _, sth := range sentPollen.STHs {
-		assert.Contains(t, recvPollen.STHs, sth)
-	}
-
-	assert.Equal(t, len(sentPollen.STHs), len(recvPollen.STHs))
-}
-
-func TestDoesNotReturnStalePollen(t *testing.T) {
-	s := createAndOpenStorage()
-	defer closeAndDeleteStorage(s)
-	v := mustCreateSignatureVerifiers(t)
-	h := newHandlerWithClock(s, v, testStuckClock(stuckClockTimeFutureMillis))
-
-	sentPollen := sthPollinationFromString(t, addSTHPollinationJSON)
-	sentPollenJSON, err := json.Marshal(sentPollen)
-	if err != nil {
-		t.Fatalf("Failed to marshal pollen JSON: %v", err)
-	}
-
-	rr := httptest.NewRecorder()
-	req, err := http.NewRequest("POST", "/.well-known/ct/v1/sth-pollination", bytes.NewReader(sentPollenJSON))
-	if err != nil {
-		t.Fatalf("Failed to create request: %v", err)
-	}
-
-	h.HandleSTHPollination(rr, req)
-	assert.Equal(t, http.StatusOK, rr.Code)
-
-	// since this is an empty DB, the only pollen available is the non-fresh stuff we just sent, so expect to get nothing back.
-	recvPollen := sthPollinationFromString(t, rr.Body.String())
-	assert.Equal(t, 0, len(recvPollen.STHs))
-}
-
-func TestLimitsSTHPollinationReturned(t *testing.T) {
-	s := createAndOpenStorage()
-	defer closeAndDeleteStorage(s)
-
-	*defaultNumPollinationsToReturn = 1
-	v := mustCreateSignatureVerifiers(t)
-	h := newHandlerWithClock(s, v, testStuckClock(stuckClockTimeMillis))
-
-	sentPollen := sthPollinationFromString(t, addSTHPollinationJSON)
-	sentPollenJSON, err := json.Marshal(sentPollen)
-	if err != nil {
-		t.Fatalf("Failed to marshal pollen JSON: %v", err)
-	}
-
-	rr := httptest.NewRecorder()
-	req, err := http.NewRequest("POST", "/.well-known/ct/v1/sth-pollination", bytes.NewReader(sentPollenJSON))
-	if err != nil {
-		t.Fatalf("Failed to create request: %v", err)
-	}
-
-	h.HandleSTHPollination(rr, req)
-	assert.Equal(t, http.StatusOK, rr.Code)
-
-	// Make the request again because it seems there's a race inside (go-)sqlite3
-	// somewhere; occasionally the storage handler doesn't see any pollen
-	// despite the fact that the transaction which wrote it committed before
-	// the select was executed.
-	h.HandleSTHPollination(rr, req)
-	assert.Equal(t, http.StatusOK, rr.Code)
-
-	recvPollen := sthPollinationFromString(t, rr.Body.String())
-
-	assert.Equal(t, 1, len(recvPollen.STHs))
-	assert.Contains(t, sentPollen.STHs, recvPollen.STHs[0])
-}
diff --git a/ct/gossip/main/gossip_server.go b/ct/gossip/main/gossip_server.go
deleted file mode 100644
index 1ac42d0..0000000
--- a/ct/gossip/main/gossip_server.go
+++ /dev/null
@@ -1,73 +0,0 @@
-package main
-
-import (
-	"errors"
-	"flag"
-	"fmt"
-	"io/ioutil"
-	"log"
-	"net/http"
-	"strings"
-
-	ct "github.com/google/certificate-transparency/go"
-	"github.com/google/certificate-transparency/go/gossip"
-)
-
-var dbPath = flag.String("database", "/tmp/gossip.sq3", "Path to database.")
-var listenAddress = flag.String("listen", ":8080", "Listen address:port for HTTP server.")
-var logKeys = flag.String("log_public_keys", "", "Comma separated list of files containing trusted Logs' public keys in PEM format")
-
-func createVerifiers() (*gossip.SignatureVerifierMap, error) {
-	m := make(gossip.SignatureVerifierMap)
-	if len(*logKeys) == 0 {
-		return nil, errors.New("--log_public_keys is empty")
-	}
-	keys := strings.Split(*logKeys, ",")
-	for _, k := range keys {
-		pem, err := ioutil.ReadFile(k)
-		if err != nil {
-			return nil, fmt.Errorf("failed to read specified PEM file %s: %v", k, err)
-		}
-		for len(pem) > 0 {
-			key, id, rest, err := ct.PublicKeyFromPEM(pem)
-			pem = rest
-			if err != nil {
-				return nil, fmt.Errorf("failed to read public key from PEM in file %s: %v", k, err)
-			}
-			sv, err := ct.NewSignatureVerifier(key)
-			if err != nil {
-				return nil, fmt.Errorf("Failed to create new SignatureVerifier: %v", err)
-			}
-			m[id] = *sv
-			log.Printf("Loaded key for LogID %v", id)
-		}
-	}
-	return &m, nil
-}
-
-func main() {
-	flag.Parse()
-	verifierMap, err := createVerifiers()
-	if err != nil {
-		log.Fatalf("Failed to load log public keys: %v", err)
-	}
-	log.Print("Starting gossip server.")
-
-	storage := gossip.Storage{}
-	if err := storage.Open(*dbPath); err != nil {
-		log.Fatalf("Failed to open storage: %v", err)
-	}
-	defer storage.Close()
-
-	handler := gossip.NewHandler(&storage, *verifierMap)
-	serveMux := http.NewServeMux()
-	serveMux.HandleFunc("/.well-known/ct/v1/sct-feedback", handler.HandleSCTFeedback)
-	serveMux.HandleFunc("/.well-known/ct/v1/sth-pollination", handler.HandleSTHPollination)
-	server := &http.Server{
-		Addr:    *listenAddress,
-		Handler: serveMux,
-	}
-	if err := server.ListenAndServe(); err != nil {
-		log.Printf("Error serving: %v", err)
-	}
-}
diff --git a/ct/gossip/storage.go b/ct/gossip/storage.go
deleted file mode 100644
index 21aa183..0000000
--- a/ct/gossip/storage.go
+++ /dev/null
@@ -1,377 +0,0 @@
-package gossip
-
-import (
-	"database/sql"
-	"errors"
-	"fmt"
-	"log"
-	"strings"
-	"time"
-
-	ct "github.com/google/certificate-transparency/go"
-	"github.com/mattn/go-sqlite3"
-)
-
-const schema = `
-        CREATE TABLE IF NOT EXISTS sths (
-                version     INTEGER NOT NULL,
-                tree_size   INTEGER NOT NULL,
-                timestamp   INTEGER NOT NULL,
-                root_hash   BYTES NOT NULL,
-                signature   BYTES NOT NULL,
-                log_id      BYTES NOT NULL,
-                PRIMARY KEY (version, tree_size, timestamp, root_hash, log_id)
-        );
-
-        CREATE TABLE IF NOT EXISTS scts (
-                sct_id  INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
-                sct     BYTES NOT NULL UNIQUE
-        );
-
-        CREATE TABLE IF NOT EXISTS chains (
-                chain_id    INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
-                chain       STRING NOT NULL UNIQUE
-        );
-
-        CREATE TABLE IF NOT EXISTS sct_feedback (
-                chain_id    INTEGER NOT NULL REFERENCES chains(chain_id),
-                sct_id      INTEGER NOT NULL REFERENCES scts(sct_id),
-                PRIMARY KEY (chain_id, sct_id)
-
-        );`
-
-const insertChain = `INSERT INTO chains(chain) VALUES ($1);`
-const insertSCT = `INSERT INTO scts(sct) VALUES ($1);`
-const insertSCTFeedback = `INSERT INTO sct_feedback(chain_id, sct_id) VALUES ($1, $2);`
-const insertSTHPollination = `INSERT INTO sths(version, tree_size, timestamp, root_hash, signature, log_id) VALUES($1, $2, $3, $4, $5, $6);`
-
-const selectChainID = `SELECT chain_id FROM chains WHERE chain = $1;`
-
-// Selects at most $2 rows from the sths table whose timestamp is newer than $1.
-const selectRandomRecentPollination = `SELECT version, tree_size, timestamp, root_hash, signature, log_id FROM sths 
-                                          WHERE timestamp >= $1 ORDER BY random() LIMIT $2;`
-const selectSCTID = `SELECT sct_id FROM scts WHERE sct = $1;`
-
-const selectNumSCTs = `SELECT COUNT(*) FROM scts;`
-const selectNumChains = `SELECT COUNT(*) FROM chains;`
-const selectNumFeedback = `SELECT COUNT(*) FROM sct_feedback;`
-const selectNumSTHs = `SELECT COUNT(*) FROM sths;`
-
-const selectFeedback = `SELECT COUNT(*) FROM sct_feedback WHERE chain_id = $1 AND sct_id = $2;`
-const selectSTH = `SELECT COUNT(*) FROM sths WHERE version = $1 AND tree_size = $2 AND timestamp = $3 AND root_hash = $4 AND signature = $5 AND log_id = $6;`
-
-// Storage provides an SQLite3-backed method for persisting gossip data
-type Storage struct {
-	db                            *sql.DB
-	dbPath                        string
-	insertChain                   *sql.Stmt
-	insertSCT                     *sql.Stmt
-	insertSCTFeedback             *sql.Stmt
-	insertSTHPollination          *sql.Stmt
-	selectChainID                 *sql.Stmt
-	selectRandomRecentPollination *sql.Stmt
-	selectSCTID                   *sql.Stmt
-
-	selectNumChains   *sql.Stmt
-	selectNumFeedback *sql.Stmt
-	selectNumSCTs     *sql.Stmt
-	selectNumSTHs     *sql.Stmt
-
-	selectFeedback *sql.Stmt
-	selectSTH      *sql.Stmt
-}
-
-type statementSQLPair struct {
-	Statement **sql.Stmt
-	SQL       string
-}
-
-func prepareStatement(db *sql.DB, s statementSQLPair) error {
-	stmt, err := db.Prepare(s.SQL)
-	if err != nil {
-		return err
-	}
-	*(s.Statement) = stmt
-	return nil
-}
-
-// Open opens the underlying persistent data store.
-// Should be called before attempting to use any of the store or search methods.
-func (s *Storage) Open(dbPath string) error {
-	var err error
-	if s.db != nil {
-		return errors.New("attempting to call Open() on an already Open()'d Storage")
-	}
-	if len(dbPath) == 0 {
-		return errors.New("attempting to call Open() with an empty file name")
-	}
-	s.dbPath = dbPath
-	s.db, err = sql.Open("sqlite3", s.dbPath)
-	if err != nil {
-		return err
-	}
-	if _, err := s.db.Exec(schema); err != nil {
-		return err
-	}
-	for _, p := range []statementSQLPair{
-		{&s.insertChain, insertChain},
-		{&s.insertSCT, insertSCT},
-		{&s.insertSCTFeedback, insertSCTFeedback},
-		{&s.insertSTHPollination, insertSTHPollination},
-		{&s.selectChainID, selectChainID},
-		{&s.selectRandomRecentPollination, selectRandomRecentPollination},
-		{&s.selectSCTID, selectSCTID},
-		{&s.selectNumChains, selectNumChains},
-		{&s.selectNumFeedback, selectNumFeedback},
-		{&s.selectNumSCTs, selectNumSCTs},
-		{&s.selectNumSTHs, selectNumSTHs},
-		{&s.selectFeedback, selectFeedback},
-		{&s.selectSTH, selectSTH}} {
-		if err := prepareStatement(s.db, p); err != nil {
-			return err
-		}
-	}
-	return nil
-}
-
-// Close closes the underlying DB storage.
-func (s *Storage) Close() error {
-	return s.db.Close()
-}
-
-func selectThingID(getID *sql.Stmt, thing interface{}) (int64, error) {
-	rows, err := getID.Query(thing)
-	if err != nil {
-		return -1, err
-	}
-	if !rows.Next() {
-		return -1, fmt.Errorf("couldn't look up ID for %v", thing)
-	}
-	var id int64
-	if err = rows.Scan(&id); err != nil {
-		return -1, err
-	}
-	return id, nil
-}
-
-// insertThingOrSelectID will attempt to execute the insert Statement (under transaction tx), if that fails due to
-// a unique primary key constraint, it will look up that primary key by executing the getID Statement.
-// Returns the ID associated with persistent thing, or an error describing the failure.
-func insertThingOrSelectID(tx *sql.Tx, insert *sql.Stmt, getID *sql.Stmt, thing interface{}) (int64, error) {
-	txInsert := tx.Stmt(insert)
-	txGetID := tx.Stmt(getID)
-	r, err := txInsert.Exec(thing)
-	if err != nil {
-		switch e := err.(type) {
-		case sqlite3.Error:
-			if e.Code == sqlite3.ErrConstraint {
-				return selectThingID(txGetID, thing)
-			}
-		}
-		return -1, err
-	}
-	id, err := r.LastInsertId()
-	if err != nil {
-		return -1, err
-	}
-	return id, nil
-}
-
-func (s *Storage) addChainIfNotExists(tx *sql.Tx, chain []string) (int64, error) {
-	flatChain := strings.Join(chain, "")
-	return insertThingOrSelectID(tx, s.insertChain, s.selectChainID, flatChain)
-}
-
-func (s *Storage) addSCTIfNotExists(tx *sql.Tx, sct string) (int64, error) {
-	return insertThingOrSelectID(tx, s.insertSCT, s.selectSCTID, sct)
-}
-
-func (s *Storage) addSCTFeedbackIfNotExists(tx *sql.Tx, chainID, sctID int64) error {
-	stmt := tx.Stmt(s.insertSCTFeedback)
-	_, err := stmt.Exec(chainID, sctID)
-	if err != nil {
-		switch err.(type) {
-		case sqlite3.Error:
-			// If this is a dupe that's fine, no need to return an error
-			if err.(sqlite3.Error).Code != sqlite3.ErrConstraint {
-				return err
-			}
-		default:
-			return err
-		}
-	}
-	return nil
-}
-
-// AddSCTFeedback stores the passed in feedback object.
-func (s *Storage) AddSCTFeedback(feedback SCTFeedback) (err error) {
-	tx, err := s.db.Begin()
-	if err != nil {
-		return err
-	}
-	// If we return a non-nil error, then rollback the transaction.
-	defer func() {
-		if err != nil {
-			tx.Rollback()
-			return
-		}
-		err = tx.Commit()
-	}()
-
-	for _, f := range feedback.Feedback {
-		chainID, err := s.addChainIfNotExists(tx, f.X509Chain)
-		if err != nil {
-			return err
-		}
-		for _, sct := range f.SCTData {
-			sctID, err := s.addSCTIfNotExists(tx, sct)
-			if err != nil {
-				return err
-			}
-			if err = s.addSCTFeedbackIfNotExists(tx, chainID, sctID); err != nil {
-				return err
-			}
-		}
-	}
-	return nil
-}
-
-func (s *Storage) addSTHIfNotExists(tx *sql.Tx, sth ct.SignedTreeHead) error {
-	stmt := tx.Stmt(s.insertSTHPollination)
-	sigB64, err := sth.TreeHeadSignature.Base64String()
-	if err != nil {
-		return fmt.Errorf("Failed to base64 sth signature: %v", err)
-	}
-	_, err = stmt.Exec(sth.Version, sth.TreeSize, sth.Timestamp, sth.SHA256RootHash.Base64String(), sigB64, sth.LogID.Base64String())
-	if err != nil {
-		switch err.(type) {
-		case sqlite3.Error:
-			// If this is a dupe that's fine, no need to return an error
-			if err.(sqlite3.Error).Code != sqlite3.ErrConstraint {
-				return err
-			}
-		default:
-			return err
-		}
-	}
-	return nil
-}
-
-// GetRandomSTHPollination returns a random selection of "fresh" (i.e. at most 14 days old) STHs from the pool.
-func (s *Storage) GetRandomSTHPollination(newerThan time.Time, limit int) (*STHPollination, error) {
-	// Occasionally this fails to select the pollen which was added by the
-	// AddSTHPollination request which went on trigger this query, even though
-	// the transaction committed successfully.  Attempting this query under a
-	// transaction doesn't fix it. /sadface
-	// Still, that shouldn't really matter too much in practice.
-	r, err := s.selectRandomRecentPollination.Query(newerThan.Unix()*1000, limit)
-	if err != nil {
-		return nil, err
-	}
-	var pollination STHPollination
-	for r.Next() {
-		var entry ct.SignedTreeHead
-		var rootB64, sigB64, idB64 string
-		if err := r.Scan(&entry.Version, &entry.TreeSize, &entry.Timestamp, &rootB64, &sigB64, &idB64); err != nil {
-			return nil, err
-		}
-		if err := entry.SHA256RootHash.FromBase64String(rootB64); err != nil {
-			return nil, err
-		}
-		if err := entry.TreeHeadSignature.FromBase64String(sigB64); err != nil {
-			return nil, err
-		}
-		if err := entry.LogID.FromBase64String(idB64); err != nil {
-			return nil, err
-		}
-		pollination.STHs = append(pollination.STHs, entry)
-	}
-	// If there are no entries to return, wedge an empty array in there so that the json encoder returns something valid.
-	if pollination.STHs == nil {
-		pollination.STHs = make([]ct.SignedTreeHead, 0)
-	}
-	return &pollination, nil
-}
-
-// AddSTHPollination stores the passed in pollination object.
-func (s *Storage) AddSTHPollination(pollination STHPollination) error {
-	tx, err := s.db.Begin()
-	if err != nil {
-		return err
-	}
-	// If we return a non-nil error, then rollback the transaction.
-	defer func() {
-		if err != nil {
-			tx.Rollback()
-		}
-		err = tx.Commit()
-	}()
-
-	for _, sth := range pollination.STHs {
-		if err := s.addSTHIfNotExists(tx, sth); err != nil {
-			return err
-		}
-	}
-	return nil
-}
-
-func (s *Storage) getSCTID(sct string) (int64, error) {
-	return selectThingID(s.selectSCTID, sct)
-}
-
-func (s *Storage) getChainID(chain []string) (int64, error) {
-	flatChain := strings.Join(chain, "")
-	return selectThingID(s.selectChainID, flatChain)
-}
-
-func getNumThings(getCount *sql.Stmt) (int64, error) {
-	r, err := getCount.Query()
-	if err != nil {
-		return -1, err
-	}
-	if !r.Next() {
-		return -1, fmt.Errorf("Empty scan returned while querying %v", getCount)
-	}
-	var count int64
-	if err := r.Scan(&count); err != nil {
-		return -1, err
-	}
-	return count, nil
-}
-
-func (s *Storage) getNumChains() (int64, error) {
-	return getNumThings(s.selectNumChains)
-}
-
-func (s *Storage) getNumFeedback() (int64, error) {
-	return getNumThings(s.selectNumFeedback)
-}
-
-func (s *Storage) getNumSCTs() (int64, error) {
-	return getNumThings(s.selectNumSCTs)
-}
-
-func (s *Storage) getNumSTHs() (int64, error) {
-	return getNumThings(s.selectNumSTHs)
-}
-
-func (s *Storage) hasFeedback(sctID, chainID int64) bool {
-	r, err := s.selectFeedback.Query(sctID, chainID)
-	if err != nil {
-		return false
-	}
-	return r.Next()
-}
-
-func (s *Storage) hasSTH(sth ct.SignedTreeHead) bool {
-	sigB64, err := sth.TreeHeadSignature.Base64String()
-	if err != nil {
-		log.Printf("%v", err)
-		return false
-	}
-	r, err := s.selectSTH.Query(sth.Version, sth.TreeSize, sth.Timestamp, sth.SHA256RootHash.Base64String(), sigB64, sth.LogID.Base64String())
-	if err != nil {
-		return false
-	}
-	return r.Next()
-}
diff --git a/ct/gossip/types.go b/ct/gossip/types.go
deleted file mode 100644
index 36dbaca..0000000
--- a/ct/gossip/types.go
+++ /dev/null
@@ -1,30 +0,0 @@
-package gossip
-
-import (
-	ct "github.com/google/certificate-transparency/go"
-)
-
-// STHVersion reflects the STH Version field in RFC6862[-bis]
-type STHVersion int
-
-// STHVersion constants
-const (
-	STHVersion0 = 0
-	STHVersion1 = 1
-)
-
-// SCTFeedbackEntry represents a single piece of SCT feedback.
-type SCTFeedbackEntry struct {
-	X509Chain []string `json:"x509_chain"`
-	SCTData   []string `json:"sct_data"`
-}
-
-// SCTFeedback represents a collection of SCTFeedback which a client might send together.
-type SCTFeedback struct {
-	Feedback []SCTFeedbackEntry `json:"sct_feedback"`
-}
-
-// STHPollination represents a collection of STH pollination entries which a client might send together.
-type STHPollination struct {
-	STHs []ct.SignedTreeHead `json:"sths"`
-}
diff --git a/ct/merkletree/merkle_tree.go b/ct/merkletree/merkle_tree.go
deleted file mode 100644
index c134020..0000000
--- a/ct/merkletree/merkle_tree.go
+++ /dev/null
@@ -1,131 +0,0 @@
-package merkletree
-
-/*
-#cgo LDFLAGS: -lcrypto
-#cgo CPPFLAGS: -I../../cpp
-#cgo CXXFLAGS: -std=c++11
-#include "merkle_tree_go.h"
-*/
-import "C"
-import (
-	"errors"
-	"fmt"
-)
-
-// CPPMerkleTree provides an interface to the C++ CT MerkleTree library.
-// See the go/README file for details on how to build this.
-type CPPMerkleTree struct {
-	FullMerkleTreeInterface
-
-	// The C++ MerkleTree handle
-	peer C.TREE
-
-	// nodeSize contains the size in bytes of the nodes in the MerkleTree
-	// referenced by |peer|.
-	nodeSize C.size_t
-}
-
-func (m *CPPMerkleTree) LeafCount() uint64 {
-	return uint64(C.LeafCount(m.peer))
-}
-
-func (m *CPPMerkleTree) LevelCount() uint64 {
-	return uint64(C.LevelCount(m.peer))
-}
-
-func (m *CPPMerkleTree) AddLeaf(leaf []byte) uint64 {
-	return uint64(C.AddLeaf(m.peer, C.BYTE_SLICE(&leaf)))
-}
-
-func (m *CPPMerkleTree) AddLeafHash(hash []byte) uint64 {
-	return uint64(C.AddLeafHash(m.peer, C.BYTE_SLICE(&hash)))
-}
-
-func (m *CPPMerkleTree) LeafHash(leaf uint64) ([]byte, error) {
-	hash := make([]byte, m.nodeSize)
-	success := C.LeafHash(m.peer, C.BYTE_SLICE(&hash), C.size_t(leaf))
-	if !success {
-		return nil, fmt.Errorf("failed to get leafhash of leaf %d", leaf)
-	}
-	return hash, nil
-}
-
-func (m *CPPMerkleTree) CurrentRoot() ([]byte, error) {
-	hash := make([]byte, m.nodeSize)
-	success := C.CurrentRoot(m.peer, C.BYTE_SLICE(&hash))
-	if !success {
-		return nil, errors.New("failed to get current root")
-	}
-	return hash, nil
-}
-
-func (m *CPPMerkleTree) RootAtSnapshot(snapshot uint64) ([]byte, error) {
-	hash := make([]byte, m.nodeSize)
-	success := C.RootAtSnapshot(m.peer, C.BYTE_SLICE(&hash), C.size_t(snapshot))
-	if !success {
-		return nil, fmt.Errorf("failed to get root at snapshot %d", snapshot)
-	}
-	return hash, nil
-}
-
-func splitSlice(slice []byte, chunkSize int) ([][]byte, error) {
-	if len(slice)%chunkSize != 0 {
-		return nil, fmt.Errorf("slice len %d is not a multiple of chunkSize %d", len(slice), chunkSize)
-	}
-	numEntries := len(slice) / chunkSize
-	ret := make([][]byte, numEntries)
-	for i := 0; i < numEntries; i++ {
-		start := i * chunkSize
-		end := start + chunkSize
-		ret[i] = slice[start:end]
-	}
-	return ret, nil
-}
-
-func (m *CPPMerkleTree) PathToCurrentRoot(leaf uint64) ([][]byte, error) {
-	var numEntries C.size_t
-	entryBuffer := make([]byte, C.size_t(m.LevelCount())*m.nodeSize)
-	success := C.PathToCurrentRoot(m.peer, C.BYTE_SLICE(&entryBuffer), &numEntries, C.size_t(leaf))
-	if !success {
-		return nil, fmt.Errorf("failed to get path to current root from leaf %d", leaf)
-	}
-	return splitSlice(entryBuffer, int(m.nodeSize))
-}
-
-func (m *CPPMerkleTree) PathToRootAtSnapshot(leaf, snapshot uint64) ([][]byte, error) {
-	var num_entries C.size_t
-	entryBuffer := make([]byte, C.size_t(m.LevelCount())*m.nodeSize)
-	success := C.PathToRootAtSnapshot(m.peer, C.BYTE_SLICE(&entryBuffer), &num_entries, C.size_t(leaf), C.size_t(snapshot))
-	if !success {
-		return nil, fmt.Errorf("failed to get path to root at snapshot %d from leaf %d", snapshot, leaf)
-	}
-	return splitSlice(entryBuffer, int(m.nodeSize))
-}
-
-func (m *CPPMerkleTree) SnapshotConsistency(snapshot1, snapshot2 uint64) ([][]byte, error) {
-	var num_entries C.size_t
-	entryBuffer := make([]byte, C.size_t(m.LevelCount())*m.nodeSize)
-	success := C.SnapshotConsistency(m.peer, C.BYTE_SLICE(&entryBuffer), &num_entries, C.size_t(snapshot1), C.size_t(snapshot2))
-	if !success {
-		return nil, fmt.Errorf("failed to get path to snapshot consistency from %d to %d", snapshot1, snapshot2)
-	}
-	return splitSlice(entryBuffer, int(m.nodeSize))
-}
-
-// NewCPPMerkleTree returns a new wrapped C++ MerkleTree, using the
-// Sha256Hasher.
-// It is the caller's responsibility to call DeletePeer() when finished with
-// the tree to deallocate its resources.
-func NewCPPMerkleTree() *CPPMerkleTree {
-	m := &CPPMerkleTree{
-		peer: C.NewMerkleTree(C.NewSha256Hasher()),
-	}
-	m.nodeSize = C.size_t(C.NodeSize(m.peer))
-	return m
-}
-
-// DeletePeer deallocates the memory used by the C++ MerkleTree peer.
-func (m *CPPMerkleTree) DeletePeer() {
-	C.DeleteMerkleTree(m.peer)
-	m.peer = nil
-}
diff --git a/ct/merkletree/merkle_tree_go.cc b/ct/merkletree/merkle_tree_go.cc
deleted file mode 100644
index 7da8b36..0000000
--- a/ct/merkletree/merkle_tree_go.cc
+++ /dev/null
@@ -1,155 +0,0 @@
-#include "merkletree/merkle_tree.h"
-
-#include <assert.h>
-#include <cstdlib>
-#include <cstring>
-#include <memory>
-#include <vector>
-
-#include "_cgo_export.h"
-#include "merkle_tree_go.h"
-
-extern "C" {
-// Some hollow functions to cast the void* types into what they really
-// are, they're only really here to provide a little bit of type
-// safety.  Hopefully these should all be optimized away into oblivion
-// by the compiler.
-static inline MerkleTree* MT(TREE tree) {
-  assert(tree);
-  return static_cast<MerkleTree*>(tree);
-}
-static inline Sha256Hasher* H(HASHER hasher) {
-  assert(hasher);
-  return static_cast<Sha256Hasher*>(hasher);
-}
-static inline GoSlice* BS(BYTE_SLICE slice) {
-  assert(slice);
-  return static_cast<GoSlice*>(slice);
-}
-
-HASHER NewSha256Hasher() {
-  return new Sha256Hasher;
-}
-
-TREE NewMerkleTree(HASHER hasher) {
-  return new MerkleTree(std::unique_ptr<SerialHasher>(H(hasher)));
-}
-
-void DeleteMerkleTree(TREE tree) {
-  delete MT(tree);
-}
-
-size_t NodeSize(TREE tree) {
-  return MT(tree)->NodeSize();
-}
-
-size_t LeafCount(TREE tree) {
-  return MT(tree)->LeafCount();
-}
-
-bool LeafHash(TREE tree, BYTE_SLICE out, size_t leaf) {
-  GoSlice* slice(BS(out));
-  const MerkleTree* t(MT(tree));
-  const size_t nodesize(t->NodeSize());
-  if (slice->data == NULL || slice->cap < nodesize) {
-    return false;
-  }
-  const std::string& hash = t->LeafHash(leaf);
-  assert(nodesize == hash.size());
-  memcpy(slice->data, hash.data(), nodesize);
-  slice->len = nodesize;
-  return true;
-}
-
-size_t LevelCount(TREE tree) {
-  const MerkleTree* t(MT(tree));
-  return t->LevelCount();
-}
-
-size_t AddLeaf(TREE tree, BYTE_SLICE leaf) {
-  GoSlice* slice(BS(leaf));
-  MerkleTree* t(MT(tree));
-  return t->AddLeaf(std::string(static_cast<char*>(slice->data), slice->len));
-}
-
-size_t AddLeafHash(TREE tree, BYTE_SLICE hash) {
-  GoSlice* slice(BS(hash));
-  MerkleTree* t(MT(tree));
-  return t->AddLeafHash(
-      std::string(static_cast<char*>(slice->data), slice->len));
-}
-
-bool CurrentRoot(TREE tree, BYTE_SLICE out) {
-  GoSlice* slice(BS(out));
-  MerkleTree* t(MT(tree));
-  const size_t nodesize(t->NodeSize());
-  if (slice->data == NULL || slice->len != nodesize) {
-    return false;
-  }
-  const std::string& hash = t->CurrentRoot();
-  assert(nodesize == hash.size());
-  memcpy(slice->data, hash.data(), nodesize);
-  slice->len = nodesize;
-  return true;
-}
-
-bool RootAtSnapshot(TREE tree, BYTE_SLICE out, size_t snapshot) {
-  GoSlice* slice(BS(out));
-  MerkleTree* t(MT(tree));
-  const size_t nodesize(t->NodeSize());
-  if (slice->data == NULL || slice->len != nodesize) {
-    return false;
-  }
-  const std::string& hash = t->RootAtSnapshot(snapshot);
-  assert(nodesize == hash.size());
-  memcpy(slice->data, hash.data(), nodesize);
-  slice->len = nodesize;
-  return true;
-}
-
-// Copies the fixed-length entries from |path| into the GoSlice
-// pointed to by |dst|, one after the other in the same order.
-// |num_copied| is set to the number of entries copied.
-bool CopyNodesToSlice(const std::vector<std::string>& path, GoSlice* dst,
-                      size_t nodesize, size_t* num_copied) {
-  assert(dst);
-  assert(num_copied);
-  if (dst->cap < path.size() * nodesize) {
-    *num_copied = 0;
-    return false;
-  }
-  char* e = static_cast<char*>(dst->data);
-  for (int i = 0; i < path.size(); ++i) {
-    assert(nodesize == path[i].size());
-    memcpy(e, path[i].data(), nodesize);
-    e += nodesize;
-  }
-  dst->len = path.size() * nodesize;
-  *num_copied = path.size();
-  return true;
-}
-
-bool PathToCurrentRoot(TREE tree, BYTE_SLICE out, size_t* num_entries,
-                       size_t leaf) {
-  MerkleTree* t(MT(tree));
-  const std::vector<std::string> path = t->PathToCurrentRoot(leaf);
-  return CopyNodesToSlice(path, BS(out), t->NodeSize(), num_entries);
-}
-
-bool PathToRootAtSnapshot(TREE tree, BYTE_SLICE out, size_t* num_entries,
-                          size_t leaf, size_t snapshot) {
-  MerkleTree* t(MT(tree));
-  const std::vector<std::string> path =
-      t->PathToRootAtSnapshot(leaf, snapshot);
-  return CopyNodesToSlice(path, BS(out), t->NodeSize(), num_entries);
-}
-
-bool SnapshotConsistency(TREE tree, BYTE_SLICE out, size_t* num_entries,
-                         size_t snapshot1, size_t snapshot2) {
-  MerkleTree* t(MT(tree));
-  const std::vector<std::string> path =
-      t->SnapshotConsistency(snapshot1, snapshot2);
-  return CopyNodesToSlice(path, BS(out), t->NodeSize(), num_entries);
-}
-
-}  // extern "C"
diff --git a/ct/merkletree/merkle_tree_go.h b/ct/merkletree/merkle_tree_go.h
deleted file mode 100644
index 446d2a8..0000000
--- a/ct/merkletree/merkle_tree_go.h
+++ /dev/null
@@ -1,74 +0,0 @@
-#include <stdbool.h>
-#include <sys/types.h>
-
-#ifndef GO_MERKLETREE_MERKLE_TREE_H_
-#define GO_MERKLETREE_MERKLE_TREE_H_
-
-// These types & functions provide a trampoline to call the C++ MerkleTree
-// implementation from within Go code.
-//
-// Generally we try to jump through hoops to not allocate memory from the C++
-// side, but rather have Go allocate it inside its GC memory such that we don't
-// have to worry about leaks.  Apart from the obvious benefit of doing it this
-// way, it usually also means one less memcpy() too which is nice.
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-// The _cgo_export.h file doesn't appear to exist when this header is pulled in
-// to the .go file, because of this we can't use types like GoSlice here and so
-// we end up with void* everywhere;  we'll at least typedef them so that the
-// source is a _little_ more readable.
-// Grumble grumble.
-typedef void* HASHER;
-typedef void* TREE;
-typedef void* BYTE_SLICE;
-
-// Allocators & deallocators:
-
-// Creates a new Sha256Hasher
-HASHER NewSha256Hasher();
-
-// Creates a new MerkleTree passing in |hasher|.
-// The MerkleTree takes ownership of |hasher|.
-TREE NewMerkleTree(HASHER hasher);
-
-// Deletes the passed in |tree|.
-void DeleteMerkleTree(TREE tree);
-
-// MerkleTree methods below.
-// See the comments in ../../merkletree/merkle_tree.h for details
-
-size_t NodeSize(TREE tree);
-size_t LeafCount(TREE tree);
-bool LeafHash(TREE tree, BYTE_SLICE out, size_t leaf);
-size_t LevelCount(TREE tree);
-size_t AddLeaf(TREE tree, BYTE_SLICE leaf);
-size_t AddLeafHash(TREE tree, BYTE_SLICE hash);
-bool CurrentRoot(TREE tree, BYTE_SLICE out);
-bool RootAtSnapshot(TREE tree, BYTE_SLICE out, size_t snapshot);
-
-// |out| must contain sufficent space to hold all of the path elements
-// sequentially.
-// |num_entries| is set to the number of actual elements stored in |out|.
-bool PathToCurrentRoot(TREE tree, BYTE_SLICE out, size_t* num_entries,
-                       size_t leaf);
-
-// |out| must contain sufficent space to hold all of the path elements
-// sequentially.
-// |num_entries| is set to the number of actual elements stored in |out|.
-bool PathToRootAtSnapshot(TREE tree, BYTE_SLICE out, size_t* num_entries,
-                          size_t leaf, size_t snapshot);
-
-// |out| must contain sufficent space to hold all of the path elements
-// sequentially.
-// |num_entries| is set to the number of actual elements stored in |out|.
-bool SnapshotConsistency(TREE tree, BYTE_SLICE out, size_t* num_entries,
-                         size_t snapshot1, size_t snapshot2);
-
-#ifdef __cplusplus
-}
-#endif
-
-#endif  // GO_MERKLETREE_MERKLE_TREE_H_
diff --git a/ct/merkletree/merkle_tree_interface.go b/ct/merkletree/merkle_tree_interface.go
deleted file mode 100644
index 85c6faa..0000000
--- a/ct/merkletree/merkle_tree_interface.go
+++ /dev/null
@@ -1,38 +0,0 @@
-package merkletree
-
-// MerkleTreeInterface represents the common interface for basic MerkleTree functions.
-type MerkleTreeInterface interface {
-	// LeafCount returns the number of leaves in the tree
-	LeafCount() uint64
-
-	// LevelCount returns the number of levels in the tree
-	LevelCount() uint64
-
-	// AddLeaf adds the hash of |leaf| to the tree and returns the newly added
-	// leaf index
-	AddLeaf(leaf []byte) uint64
-
-	// LeafHash returns the hash of the leaf at index |leaf| or a non-nil error.
-	LeafHash(leaf uint64) ([]byte, error)
-
-	// CurrentRoot returns the current root hash of the merkle tree.
-	CurrentRoot() ([]byte, error)
-}
-
-// FullMerkleTreeInterface extends MerkleTreeInterface to the full range of
-// operations that only a non-compact tree representation can implement.
-type FullMerkleTreeInterface interface {
-	MerkleTreeInterface
-
-	// RootAtSnapshot returns the root hash at the tree size |snapshot|
-	// which must be <= than the current tree size.
-	RootAtSnapshot(snapshot uint64) ([]byte, error)
-
-	// PathToCurrentRoot returns the Merkle path (or inclusion proof) from the
-	// leaf hash at index |leaf| to the current root.
-	PathToCurrentRoot(leaf uint64) ([]byte, error)
-
-	// SnapshotConsistency returns a consistency proof between the two tree
-	// sizes specified in |snapshot1| and |snapshot2|.
-	SnapshotConsistency(snapshot1, snapshot2 uint64) ([]byte, error)
-}
diff --git a/ct/merkletree/merkle_tree_test.go b/ct/merkletree/merkle_tree_test.go
deleted file mode 100644
index 8ad9172..0000000
--- a/ct/merkletree/merkle_tree_test.go
+++ /dev/null
@@ -1,168 +0,0 @@
-package merkletree
-
-import (
-	"bytes"
-	"encoding/hex"
-	"log"
-	"reflect"
-	"testing"
-)
-
-func TestCreateMerkleTree(t *testing.T) {
-	tree := NewCPPMerkleTree()
-	defer tree.DeletePeer()
-	if tree == nil {
-		t.Fatal("tree is nil")
-	}
-}
-
-// Hex decodes |s| and returns the result.
-// If the decode fails logs a fatal error
-func mustDecode(s string) []byte {
-	b, err := hex.DecodeString(s)
-	if err != nil {
-		log.Fatal(err)
-	}
-	return b
-}
-
-// Some test leaves
-func testLeaves() [][]byte {
-	return [][]byte{{},
-		{0x00},
-		{0x10},
-		{0x20, 0x21},
-		{0x30, 0x31},
-		{0x40, 0x41, 0x42, 0x43},
-		{0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57},
-		{0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f}}
-}
-
-// Returns the correct root hash when |numLeaves| of the leaves returned by
-// testLeaves() have been added to the tree in order.
-// Logs a fatal error if |numLeaves| is too large.
-func rootForTestLeaves(numLeaves int) []byte {
-	switch numLeaves {
-	case 0:
-		return mustDecode("6e340b9cffb37a989ca544e6bb780a2c78901d3fb33738768511a30617afa01d")
-	case 1:
-		return mustDecode("fac54203e7cc696cf0dfcb42c92a1d9dbaf70ad9e621f4bd8d98662f00e3c125")
-	case 2:
-		return mustDecode("aeb6bcfe274b70a14fb067a5e5578264db0fa9b51af5e0ba159158f329e06e77")
-	case 3:
-		return mustDecode("d37ee418976dd95753c1c73862b9398fa2a2cf9b4ff0fdfe8b30cd95209614b7")
-	case 4:
-		return mustDecode("4e3bbb1f7b478dcfe71fb631631519a3bca12c9aefca1612bfce4c13a86264d4")
-	case 5:
-		return mustDecode("76e67dadbcdf1e10e1b74ddc608abd2f98dfb16fbce75277b5232a127f2087ef")
-	case 6:
-		return mustDecode("ddb89be403809e325750d3d263cd78929c2942b7942a34b77e122c9594a74c8c")
-	case 7:
-		return mustDecode("5dc9da79a70659a9ad559cb701ded9a2ab9d823aad2f4960cfe370eff4604328")
-	default:
-		log.Fatalf("Unexpected numLeaves %d", numLeaves)
-	}
-	return nil
-}
-
-func TestAddLeaf(t *testing.T) {
-	m := NewCPPMerkleTree()
-	defer m.DeletePeer()
-	for index, a := range testLeaves() {
-		i := m.AddLeaf(a)
-		if i != uint64(index+1) {
-			t.Fatalf("Got index %d, expected %d", i, index+1)
-		}
-		if m.LeafCount() != uint64(index+1) {
-			t.Fatalf("LeafCount() %d, didn't match index+1 %d", m.LeafCount(), index+1)
-		}
-		r, err := m.CurrentRoot()
-		if err != nil {
-			t.Fatal(err)
-		}
-		if bytes.Compare(r, rootForTestLeaves(index)) != 0 {
-			t.Fatalf("CurrentRoot:\n%v\ndid not equal expected root:\n%v\n", hex.Dump(r), hex.Dump(rootForTestLeaves(index)))
-		}
-	}
-}
-
-func checkPath(t *testing.T, m *CPPMerkleTree, index uint64, expectedPath [][]byte) {
-	path, err := m.PathToCurrentRoot(index)
-	if err != nil {
-		t.Fatal(err)
-	}
-	if !reflect.DeepEqual(path, expectedPath) {
-		t.Fatalf("Incorrect path returned for leaf@%d:\n%v\nexpected:\n%v", index, path, expectedPath)
-	}
-}
-
-func TestPathToCurrentRoot(t *testing.T) {
-	m := NewCPPMerkleTree()
-	defer m.DeletePeer()
-	for _, a := range testLeaves() {
-		m.AddLeaf(a)
-	}
-
-	pathToOne := [][]byte{
-		mustDecode("96a296d224f285c67bee93c30f8a309157f0daa35dc5b87e410b78630a09cfc7"),
-		mustDecode("5f083f0a1a33ca076a95279832580db3e0ef4584bdff1f54c8a360f50de3031e"),
-		mustDecode("6b47aaf29ee3c2af9af889bc1fb9254dabd31177f16232dd6aab035ca39bf6e4")}
-	pathToSix := [][]byte{
-		mustDecode("bc1a0643b12e4d2d7c77918f44e0f4f79a838b6cf9ec5b5c283e1f4d88599e6b"),
-		mustDecode("ca854ea128ed050b41b35ffc1b87b8eb2bde461e9e3b5596ece6b9d5975a0ae0"),
-		mustDecode("d37ee418976dd95753c1c73862b9398fa2a2cf9b4ff0fdfe8b30cd95209614b7")}
-
-	checkPath(t, m, 1, pathToOne)
-	checkPath(t, m, 6, pathToSix)
-}
-
-func checkConsistency(t *testing.T, m *CPPMerkleTree, from, to uint64, expectedProof [][]byte) {
-	proof, err := m.SnapshotConsistency(from, to)
-	if err != nil {
-		t.Fatal(err)
-	}
-	if !reflect.DeepEqual(proof, expectedProof) {
-		t.Fatalf("Incorrect proof returned for consistency %d to %d:\n%v\nexpected:\n%v", from, to, proof, expectedProof)
-	}
-}
-
-func TestSnapshotConsistency(t *testing.T) {
-	m := NewCPPMerkleTree()
-	defer m.DeletePeer()
-	for _, a := range testLeaves() {
-		m.AddLeaf(a)
-	}
-
-	oneToEight := [][]byte{
-		mustDecode("96a296d224f285c67bee93c30f8a309157f0daa35dc5b87e410b78630a09cfc7"),
-		mustDecode("5f083f0a1a33ca076a95279832580db3e0ef4584bdff1f54c8a360f50de3031e"),
-		mustDecode("6b47aaf29ee3c2af9af889bc1fb9254dabd31177f16232dd6aab035ca39bf6e4")}
-	sixToEight := [][]byte{
-		mustDecode("0ebc5d3437fbe2db158b9f126a1d118e308181031d0a949f8dededebc558ef6a"),
-		mustDecode("ca854ea128ed050b41b35ffc1b87b8eb2bde461e9e3b5596ece6b9d5975a0ae0"),
-		mustDecode("d37ee418976dd95753c1c73862b9398fa2a2cf9b4ff0fdfe8b30cd95209614b7")}
-	twoToFive := [][]byte{
-		mustDecode("5f083f0a1a33ca076a95279832580db3e0ef4584bdff1f54c8a360f50de3031e"),
-		mustDecode("bc1a0643b12e4d2d7c77918f44e0f4f79a838b6cf9ec5b5c283e1f4d88599e6b")}
-
-	checkConsistency(t, m, 1, 8, oneToEight)
-	checkConsistency(t, m, 6, 8, sixToEight)
-	checkConsistency(t, m, 2, 5, twoToFive)
-}
-
-func TestAddLeafHash(t *testing.T) {
-	hashValue := "0123456789abcdef0123456789abcdef"
-	m := NewCPPMerkleTree()
-	defer m.DeletePeer()
-	index := m.AddLeafHash([]byte(hashValue))
-	if index != 1 {
-		t.Fatalf("Expected index of 1, got %d", index)
-	}
-	gotHash, err := m.LeafHash(index)
-	if err != nil {
-		t.Fatal(err)
-	}
-	if bytes.Compare([]byte(hashValue), gotHash) != 0 {
-		t.Fatalf("Added leafhash:\n%v\nGot:\n%v", hex.Dump([]byte(hashValue)), hex.Dump(gotHash))
-	}
-}
diff --git a/ct/merkletree/wrap_merkle_tree.cc b/ct/merkletree/wrap_merkle_tree.cc
deleted file mode 100644
index 060d246..0000000
--- a/ct/merkletree/wrap_merkle_tree.cc
+++ /dev/null
@@ -1 +0,0 @@
-#include "merkletree/merkle_tree.cc"
diff --git a/ct/merkletree/wrap_merkle_tree_math.cc b/ct/merkletree/wrap_merkle_tree_math.cc
deleted file mode 100644
index e8b44be..0000000
--- a/ct/merkletree/wrap_merkle_tree_math.cc
+++ /dev/null
@@ -1 +0,0 @@
-#include "merkletree/merkle_tree_math.cc"
diff --git a/ct/merkletree/wrap_serial_hasher.cc b/ct/merkletree/wrap_serial_hasher.cc
deleted file mode 100644
index bbcd621..0000000
--- a/ct/merkletree/wrap_serial_hasher.cc
+++ /dev/null
@@ -1 +0,0 @@
-#include "merkletree/serial_hasher.cc"
diff --git a/ct/merkletree/wrap_tree_hasher.cc b/ct/merkletree/wrap_tree_hasher.cc
deleted file mode 100644
index e798f8c..0000000
--- a/ct/merkletree/wrap_tree_hasher.cc
+++ /dev/null
@@ -1 +0,0 @@
-#include "merkletree/tree_hasher.cc"
diff --git a/ct/preload/dumpscts/main/dumpscts.go b/ct/preload/dumpscts/main/dumpscts.go
deleted file mode 100644
index 311b162..0000000
--- a/ct/preload/dumpscts/main/dumpscts.go
+++ /dev/null
@@ -1,57 +0,0 @@
-package main
-
-import (
-	"compress/zlib"
-	"encoding/gob"
-	"flag"
-	"io"
-	"log"
-	"os"
-
-	"github.com/google/certificate-transparency/go/preload"
-)
-
-var sctFile = flag.String("sct_file", "", "File to load SCTs & leaf data from")
-
-func main() {
-	flag.Parse()
-	var sctReader io.ReadCloser
-	if *sctFile == "" {
-		log.Fatal("Must specify --sct_file")
-	}
-
-	sctFileReader, err := os.Open(*sctFile)
-	if err != nil {
-		log.Fatal(err)
-	}
-	sctReader, err = zlib.NewReader(sctFileReader)
-	if err != nil {
-		log.Fatal(err)
-	}
-	defer func() {
-		err := sctReader.Close()
-		if err != nil && err != io.EOF {
-			log.Fatalf("Error closing file: %s", err)
-		}
-	}()
-
-	// TODO(alcutter) should probably store this stuff in a protobuf really.
-	decoder := gob.NewDecoder(sctReader)
-	var addedCert preload.AddedCert
-	numAdded := 0
-	numFailed := 0
-	for {
-		err = decoder.Decode(&addedCert)
-		if err != nil {
-			break
-		}
-		if addedCert.AddedOk {
-			log.Println(addedCert.SignedCertificateTimestamp)
-			numAdded++
-		} else {
-			log.Printf("Cert was not added: %s", addedCert.ErrorMessage)
-			numFailed++
-		}
-	}
-	log.Printf("Num certs added: %d, num failed: %d\n", numAdded, numFailed)
-}
diff --git a/ct/preload/main/preload.go b/ct/preload/main/preload.go
deleted file mode 100644
index abf7035..0000000
--- a/ct/preload/main/preload.go
+++ /dev/null
@@ -1,197 +0,0 @@
-package main
-
-import (
-	"compress/zlib"
-	"encoding/gob"
-	"flag"
-	"io"
-	"io/ioutil"
-	"log"
-	"os"
-	"regexp"
-	"sync"
-
-	"github.com/google/certificate-transparency/go"
-	"github.com/google/certificate-transparency/go/client"
-	"github.com/google/certificate-transparency/go/preload"
-	"github.com/google/certificate-transparency/go/scanner"
-)
-
-const (
-	// A regex which cannot match any input
-	MatchesNothingRegex = "a^"
-)
-
-var sourceLogUri = flag.String("source_log_uri", "http://ct.googleapis.com/aviator", "CT log base URI to fetch entries from")
-var targetLogUri = flag.String("target_log_uri", "http://example.com/ct", "CT log base URI to add entries to")
-var batchSize = flag.Int("batch_size", 1000, "Max number of entries to request at per call to get-entries")
-var numWorkers = flag.Int("num_workers", 2, "Number of concurrent matchers")
-var parallelFetch = flag.Int("parallel_fetch", 2, "Number of concurrent GetEntries fetches")
-var parallelSubmit = flag.Int("parallel_submit", 2, "Number of concurrent add-[pre]-chain requests")
-var startIndex = flag.Int64("start_index", 0, "Log index to start scanning at")
-var quiet = flag.Bool("quiet", false, "Don't print out extra logging messages, only matches.")
-var sctInputFile = flag.String("sct_file", "", "File to save SCTs & leaf data to")
-var precertsOnly = flag.Bool("precerts_only", false, "Only match precerts")
-
-func createMatcher() (scanner.Matcher, error) {
-	// Make a "match everything" regex matcher
-	precertRegex := regexp.MustCompile(".*")
-	var certRegex *regexp.Regexp
-	if *precertsOnly {
-		certRegex = regexp.MustCompile(MatchesNothingRegex)
-	} else {
-		certRegex = precertRegex
-	}
-	return scanner.MatchSubjectRegex{
-		CertificateSubjectRegex:    certRegex,
-		PrecertificateSubjectRegex: precertRegex}, nil
-}
-
-func recordSct(addedCerts chan<- *preload.AddedCert, certDer ct.ASN1Cert, sct *ct.SignedCertificateTimestamp) {
-	addedCert := preload.AddedCert{
-		CertDER:                    certDer,
-		SignedCertificateTimestamp: *sct,
-		AddedOk:                    true,
-	}
-	addedCerts <- &addedCert
-}
-
-func recordFailure(addedCerts chan<- *preload.AddedCert, certDer ct.ASN1Cert, addError error) {
-	addedCert := preload.AddedCert{
-		CertDER:      certDer,
-		AddedOk:      false,
-		ErrorMessage: addError.Error(),
-	}
-	addedCerts <- &addedCert
-}
-
-func sctWriterJob(addedCerts <-chan *preload.AddedCert, sctWriter io.Writer, wg *sync.WaitGroup) {
-	encoder := gob.NewEncoder(sctWriter)
-
-    numAdded := 0
-    numFailed := 0
-
-	for c := range addedCerts {
-      if c.AddedOk {
-        numAdded++
-      } else {
-        numFailed++
-      }
-		if encoder != nil {
-			err := encoder.Encode(c)
-			if err != nil {
-				log.Fatalf("failed to encode to %s: %v", *sctInputFile, err)
-			}
-		}
-	}
-    log.Printf("Added %d certs, %d failed, total: %d\n", numAdded, numFailed, numAdded+numFailed)
-	wg.Done()
-}
-
-func certSubmitterJob(addedCerts chan<- *preload.AddedCert, log_client *client.LogClient, certs <-chan *ct.LogEntry,
-	wg *sync.WaitGroup) {
-	for c := range certs {
-		chain := make([]ct.ASN1Cert, len(c.Chain)+1)
-		chain[0] = c.X509Cert.Raw
-		copy(chain[1:], c.Chain)
-		sct, err := log_client.AddChain(chain)
-		if err != nil {
-			log.Printf("failed to add chain with CN %s: %v\n", c.X509Cert.Subject.CommonName, err)
-			recordFailure(addedCerts, chain[0], err)
-			continue
-		}
-		recordSct(addedCerts, chain[0], sct)
-		if !*quiet {
-			log.Printf("Added chain for CN '%s', SCT: %s\n", c.X509Cert.Subject.CommonName, sct)
-		}
-	}
-	wg.Done()
-}
-
-func precertSubmitterJob(addedCerts chan<- *preload.AddedCert, log_client *client.LogClient,
-	precerts <-chan *ct.LogEntry,
-	wg *sync.WaitGroup) {
-	for c := range precerts {
-		sct, err := log_client.AddPreChain(c.Chain)
-		if err != nil {
-			log.Printf("failed to add pre-chain with CN %s: %v", c.Precert.TBSCertificate.Subject.CommonName, err)
-			recordFailure(addedCerts, c.Chain[0], err)
-			continue
-		}
-		recordSct(addedCerts, c.Chain[0], sct)
-		if !*quiet {
-			log.Printf("Added precert chain for CN '%s', SCT: %s\n", c.Precert.TBSCertificate.Subject.CommonName, sct)
-		}
-	}
-	wg.Done()
-}
-
-func main() {
-	flag.Parse()
-	var sctFileWriter io.Writer
-	var err error
-	if *sctInputFile != "" {
-		sctFileWriter, err = os.Create(*sctInputFile)
-		if err != nil {
-			log.Fatal(err)
-		}
-	} else {
-		sctFileWriter = ioutil.Discard
-	}
-
-	sctWriter := zlib.NewWriter(sctFileWriter)
-	defer func() {
-		err := sctWriter.Close()
-		if err != nil {
-			log.Fatal(err)
-		}
-	}()
-
-	fetchLogClient := client.New(*sourceLogUri)
-	matcher, err := createMatcher()
-	if err != nil {
-		log.Fatal(err)
-	}
-
-	opts := scanner.ScannerOptions{
-		Matcher:       matcher,
-		BatchSize:     *batchSize,
-		NumWorkers:    *numWorkers,
-		ParallelFetch: *parallelFetch,
-		StartIndex:    *startIndex,
-		Quiet:         *quiet,
-	}
-	scanner := scanner.NewScanner(fetchLogClient, opts)
-
-	certs := make(chan *ct.LogEntry, *batchSize**parallelFetch)
-	precerts := make(chan *ct.LogEntry, *batchSize**parallelFetch)
-	addedCerts := make(chan *preload.AddedCert, *batchSize**parallelFetch)
-
-	var sctWriterWG sync.WaitGroup
-	sctWriterWG.Add(1)
-	go sctWriterJob(addedCerts, sctWriter, &sctWriterWG)
-
-	submitLogClient := client.New(*targetLogUri)
-
-	var submitterWG sync.WaitGroup
-	for w := 0; w < *parallelSubmit; w++ {
-		submitterWG.Add(2)
-		go certSubmitterJob(addedCerts, submitLogClient, certs, &submitterWG)
-		go precertSubmitterJob(addedCerts, submitLogClient, precerts, &submitterWG)
-	}
-
-	addChainFunc := func(entry *ct.LogEntry) {
-		certs <- entry
-	}
-	addPreChainFunc := func(entry *ct.LogEntry) {
-		precerts <- entry
-	}
-
-	scanner.Scan(addChainFunc, addPreChainFunc)
-
-	close(certs)
-	close(precerts)
-	submitterWG.Wait()
-	close(addedCerts)
-	sctWriterWG.Wait()
-}
diff --git a/ct/preload/types.go b/ct/preload/types.go
deleted file mode 100644
index 17e676a..0000000
--- a/ct/preload/types.go
+++ /dev/null
@@ -1,12 +0,0 @@
-package preload
-
-import (
-	"github.com/google/certificate-transparency/go"
-)
-
-type AddedCert struct {
-	CertDER                    ct.ASN1Cert
-	SignedCertificateTimestamp ct.SignedCertificateTimestamp
-	AddedOk                    bool
-	ErrorMessage               string
-}
diff --git a/ct/scanner/main/scanner.go b/ct/scanner/main/scanner.go
deleted file mode 100644
index 3c38f02..0000000
--- a/ct/scanner/main/scanner.go
+++ /dev/null
@@ -1,120 +0,0 @@
-package main
-
-import (
-	"flag"
-	"fmt"
-	"log"
-	"math/big"
-	"regexp"
-
-	"encoding/base64"
-	"github.com/google/certificate-transparency/go"
-	"github.com/google/certificate-transparency/go/client"
-	"github.com/google/certificate-transparency/go/scanner"
-)
-
-const (
-	// A regex which cannot match any input
-	MatchesNothingRegex = "a^"
-)
-
-var logUri = flag.String("log_uri", "http://ct.googleapis.com/aviator", "CT log base URI")
-var matchSubjectRegex = flag.String("match_subject_regex", ".*", "Regex to match CN/SAN")
-var matchIssuerRegex = flag.String("match_issuer_regex", "", "Regex to match in issuer CN")
-var precertsOnly = flag.Bool("precerts_only", false, "Only match precerts")
-var serialNumber = flag.String("serial_number", "", "Serial number of certificate of interest")
-var batchSize = flag.Int("batch_size", 1000, "Max number of entries to request at per call to get-entries")
-var numWorkers = flag.Int("num_workers", 2, "Number of concurrent matchers")
-var parallelFetch = flag.Int("parallel_fetch", 2, "Number of concurrent GetEntries fetches")
-var startIndex = flag.Int64("start_index", 0, "Log index to start scanning at")
-var quiet = flag.Bool("quiet", false, "Don't print out extra logging messages, only matches.")
-var printChains = flag.Bool("print_chains", false, "If true prints the whole chain rather than a summary")
-
-// Prints out a short bit of info about |cert|, found at |index| in the
-// specified log
-func logCertInfo(entry *ct.LogEntry) {
-	log.Printf("Interesting cert at index %d: CN: '%s'", entry.Index, entry.X509Cert.Subject.CommonName)
-}
-
-// Prints out a short bit of info about |precert|, found at |index| in the
-// specified log
-func logPrecertInfo(entry *ct.LogEntry) {
-	log.Printf("Interesting precert at index %d: CN: '%s' Issuer: %s", entry.Index,
-		entry.Precert.TBSCertificate.Subject.CommonName, entry.Precert.TBSCertificate.Issuer.CommonName)
-}
-
-func chainToString(certs []ct.ASN1Cert) string {
-	var output []byte
-
-	for _, cert := range certs {
-		output = append(output, cert...)
-	}
-
-	return base64.StdEncoding.EncodeToString(output)
-}
-
-func logFullChain(entry *ct.LogEntry) {
-	log.Printf("Index %d: Chain: %s", entry.Index, chainToString(entry.Chain))
-}
-
-func createRegexes(regexValue string) (*regexp.Regexp, *regexp.Regexp) {
-	// Make a regex matcher
-	var certRegex *regexp.Regexp
-	precertRegex := regexp.MustCompile(regexValue)
-	switch *precertsOnly {
-	case true:
-		certRegex = regexp.MustCompile(MatchesNothingRegex)
-	case false:
-		certRegex = precertRegex
-	}
-
-	return certRegex, precertRegex
-}
-
-func createMatcherFromFlags() (scanner.Matcher, error) {
-	if *matchIssuerRegex != "" {
-		certRegex, precertRegex := createRegexes(*matchIssuerRegex)
-		return scanner.MatchIssuerRegex{
-			CertificateIssuerRegex:    certRegex,
-			PrecertificateIssuerRegex: precertRegex}, nil
-	}
-	if *serialNumber != "" {
-		log.Printf("Using SerialNumber matcher on %s", *serialNumber)
-		var sn big.Int
-		_, success := sn.SetString(*serialNumber, 0)
-		if !success {
-			return nil, fmt.Errorf("Invalid serialNumber %s", *serialNumber)
-		}
-		return scanner.MatchSerialNumber{SerialNumber: sn}, nil
-	} else {
-		certRegex, precertRegex := createRegexes(*matchSubjectRegex)
-		return scanner.MatchSubjectRegex{
-			CertificateSubjectRegex:    certRegex,
-			PrecertificateSubjectRegex: precertRegex}, nil
-	}
-}
-
-func main() {
-	flag.Parse()
-	logClient := client.New(*logUri)
-	matcher, err := createMatcherFromFlags()
-	if err != nil {
-		log.Fatal(err)
-	}
-
-	opts := scanner.ScannerOptions{
-		Matcher:       matcher,
-		BatchSize:     *batchSize,
-		NumWorkers:    *numWorkers,
-		ParallelFetch: *parallelFetch,
-		StartIndex:    *startIndex,
-		Quiet:         *quiet,
-	}
-	scanner := scanner.NewScanner(logClient, opts)
-
-	if *printChains {
-		scanner.Scan(logFullChain, logFullChain)
-	} else {
-		scanner.Scan(logCertInfo, logPrecertInfo)
-	}
-}
diff --git a/ct/scanner/scanner.go b/ct/scanner/scanner.go
index fb0291c..db16aa7 100644
--- a/ct/scanner/scanner.go
+++ b/ct/scanner/scanner.go
@@ -3,18 +3,20 @@ package scanner
 import (
 	"container/list"
 	"fmt"
-	"log"
 	"math/big"
 	"regexp"
 	"sync"
 	"sync/atomic"
 	"time"
 
-	"github.com/google/certificate-transparency/go"
-	"github.com/google/certificate-transparency/go/client"
-	"github.com/google/certificate-transparency/go/x509"
+	"github.com/op/go-logging"
+	"github.com/zmap/zcrypto/ct"
+	"github.com/zmap/zcrypto/ct/client"
+	"github.com/zmap/zcrypto/ct/x509"
 )
 
+var log *logging.Logger
+
 // Clients wishing to implement their own Matchers should implement this interface:
 type Matcher interface {
 	// CertificateMatches is called by the scanner for each X509 Certificate found in the log.
@@ -119,7 +121,7 @@ type ScannerOptions struct {
 	PrecertOnly bool
 
 	// Number of entries to request in one batch from the Log
-	BatchSize int
+	BatchSize int64
 
 	// Number of concurrent matchers to run
 	NumWorkers int
@@ -132,6 +134,11 @@ type ScannerOptions struct {
 
 	// Don't print any status messages to stdout
 	Quiet bool
+
+	// The name of the CT server we're pulling certs from
+	Name string
+
+	MaximumIndex int64
 }
 
 // Creates a new ScannerOptions struct with sensible defaults
@@ -144,6 +151,8 @@ func DefaultScannerOptions() *ScannerOptions {
 		ParallelFetch: 1,
 		StartIndex:    0,
 		Quiet:         false,
+		Name:          "https://ct.googleapis.com/rocketeer",
+		MaximumIndex:  0,
 	}
 }
 
@@ -196,17 +205,17 @@ func (s *Scanner) handleParseEntryError(err error, entryType ct.LogEntryType, in
 	case x509.NonFatalErrors:
 		s.entriesWithNonFatalErrors++
 		// We'll make a note, but continue.
-		s.Log(fmt.Sprintf("Non-fatal error in %+v at index %d: %s", entryType, index, err.Error()))
+		s.LogWarn(fmt.Sprintf("Non-fatal error in %+v at index %d of log at %s: %s", entryType, index, s.logClient.Uri, err.Error()))
 	default:
 		s.unparsableEntries++
-		s.Log(fmt.Sprintf("Failed to parse in %+v at index %d : %s", entryType, index, err.Error()))
+		s.LogError(fmt.Sprintf("Failed to parse in %+v at index %d of log at %s: %s", entryType, index, s.logClient.Uri, err.Error()))
 		return err
 	}
 	return nil
 }
 
 // Processes the given |entry| in the specified log.
-func (s *Scanner) processEntry(entry ct.LogEntry, foundCert func(*ct.LogEntry), foundPrecert func(*ct.LogEntry)) {
+func (s *Scanner) processEntry(entry ct.LogEntry, foundCert func(*ct.LogEntry, string), foundPrecert func(*ct.LogEntry, string)) {
 	atomic.AddInt64(&s.certsProcessed, 1)
 	switch entry.Leaf.TimestampedEntry.EntryType {
 	case ct.X509LogEntryType:
@@ -221,7 +230,7 @@ func (s *Scanner) processEntry(entry ct.LogEntry, foundCert func(*ct.LogEntry),
 		}
 		if s.opts.Matcher.CertificateMatches(cert) {
 			entry.X509Cert = cert
-			foundCert(&entry)
+			foundCert(&entry, s.opts.Name)
 		}
 	case ct.PrecertLogEntryType:
 		c, err := x509.ParseTBSCertificate(entry.Leaf.TimestampedEntry.PrecertEntry.TBSCertificate)
@@ -235,7 +244,7 @@ func (s *Scanner) processEntry(entry ct.LogEntry, foundCert func(*ct.LogEntry),
 			IssuerKeyHash:  entry.Leaf.TimestampedEntry.PrecertEntry.IssuerKeyHash}
 		if s.opts.Matcher.PrecertificateMatches(precert) {
 			entry.Precert = precert
-			foundPrecert(&entry)
+			foundPrecert(&entry, s.opts.Name)
 		}
 		s.precertsSeen++
 	}
@@ -244,7 +253,7 @@ func (s *Scanner) processEntry(entry ct.LogEntry, foundCert func(*ct.LogEntry),
 // Worker function to match certs.
 // Accepts MatcherJobs over the |entries| channel, and processes them.
 // Returns true over the |done| channel when the |entries| channel is closed.
-func (s *Scanner) matcherJob(id int, entries <-chan matcherJob, foundCert func(*ct.LogEntry), foundPrecert func(*ct.LogEntry), wg *sync.WaitGroup) {
+func (s *Scanner) matcherJob(id int, entries <-chan matcherJob, foundCert func(*ct.LogEntry, string), foundPrecert func(*ct.LogEntry, string), wg *sync.WaitGroup) {
 	for e := range entries {
 		s.processEntry(e.entry, foundCert, foundPrecert)
 	}
@@ -266,6 +275,14 @@ func (s *Scanner) fetcherJob(id int, ranges <-chan fetchRange, entries chan<- ma
 			logEntries, err := s.logClient.GetEntries(r.start, r.end)
 			if err != nil {
 				s.Log(fmt.Sprintf("Problem fetching from log: %s", err.Error()))
+				if err.Error() == "HTTP error: 500 Internal Server Error" {
+					time.Sleep(500 * time.Millisecond)
+				}
+				continue
+			}
+			if len(logEntries) == 0 {
+				s.Log(fmt.Sprintf("Log %s gave empty slice of certificates for range %d-%d", s.logClient.Uri, r.start, r.end))
+				time.Sleep(500 * time.Millisecond)
 				continue
 			}
 			for _, logEntry := range logEntries {
@@ -327,7 +344,19 @@ func humanTime(seconds int) string {
 
 func (s Scanner) Log(msg string) {
 	if !s.opts.Quiet {
-		log.Print(msg)
+		log.Info(msg)
+	}
+}
+
+func (s Scanner) LogWarn(msg string) {
+	if !s.opts.Quiet {
+		log.Warning(msg)
+	}
+}
+
+func (s Scanner) LogError(msg string) {
+	if !s.opts.Quiet {
+		log.Error(msg)
 	}
 }
 
@@ -338,8 +367,8 @@ func (s Scanner) Log(msg string) {
 // precert string as the arguments.
 //
 // This method blocks until the scan is complete.
-func (s *Scanner) Scan(foundCert func(*ct.LogEntry),
-	foundPrecert func(*ct.LogEntry)) error {
+func (s *Scanner) Scan(foundCert func(*ct.LogEntry, string),
+	foundPrecert func(*ct.LogEntry, string), updater chan int64) (int64, error) {
 	s.Log("Starting up...\n")
 	s.certsProcessed = 0
 	s.precertsSeen = 0
@@ -348,28 +377,44 @@ func (s *Scanner) Scan(foundCert func(*ct.LogEntry),
 
 	latestSth, err := s.logClient.GetSTH()
 	if err != nil {
-		return err
+		return 0, err
+	}
+	s.Log(fmt.Sprintf("Got %s STH with %d certs", s.opts.Name, latestSth.TreeSize))
+
+	stopIndex := s.opts.MaximumIndex
+	if s.opts.MaximumIndex == 0 {
+		stopIndex = int64(latestSth.TreeSize)
 	}
-	s.Log(fmt.Sprintf("Got STH with %d certs", latestSth.TreeSize))
 
 	ticker := time.NewTicker(time.Second)
 	startTime := time.Now()
 	fetches := make(chan fetchRange, 1000)
 	jobs := make(chan matcherJob, 100000)
+	//done := make(chan bool)
 	go func() {
+		//oldProc := int64(0)
 		for range ticker.C {
+
 			throughput := float64(s.certsProcessed) / time.Since(startTime).Seconds()
-			remainingCerts := int64(latestSth.TreeSize) - int64(s.opts.StartIndex) - s.certsProcessed
+			remainingCerts := int64(stopIndex) - int64(s.opts.StartIndex) - s.certsProcessed
+
+			if remainingCerts == 0 {
+				updater <- int64(stopIndex)
+				return
+			}
+
 			remainingSeconds := int(float64(remainingCerts) / throughput)
 			remainingString := humanTime(remainingSeconds)
-			s.Log(fmt.Sprintf("Processed: %d certs (to index %d). Throughput: %3.2f ETA: %s\n", s.certsProcessed,
+			s.Log(fmt.Sprintf("Processed: %d %s certs (to index %d). Throughput: %3.2f ETA: %s\n", s.certsProcessed, s.opts.Name,
 				s.opts.StartIndex+int64(s.certsProcessed), throughput, remainingString))
+
+			updater <- int64(stopIndex) - remainingCerts
 		}
 	}()
 
 	var ranges list.List
-	for start := s.opts.StartIndex; start < int64(latestSth.TreeSize); {
-		end := min(start+int64(s.opts.BatchSize), int64(latestSth.TreeSize)) - 1
+	for start := s.opts.StartIndex; start < int64(stopIndex); {
+		end := min(start+int64(s.opts.BatchSize), int64(stopIndex)) - 1
 		ranges.PushBack(fetchRange{start, end})
 		start = end + 1
 	}
@@ -392,16 +437,17 @@ func (s *Scanner) Scan(foundCert func(*ct.LogEntry),
 	fetcherWG.Wait()
 	close(jobs)
 	matcherWG.Wait()
+	ticker.Stop()
 
-	s.Log(fmt.Sprintf("Completed %d certs in %s", s.certsProcessed, humanTime(int(time.Since(startTime).Seconds()))))
+	s.Log(fmt.Sprintf("Completed %d %s certs in %s", s.certsProcessed, s.opts.Name, humanTime(int(time.Since(startTime).Seconds()))))
 	s.Log(fmt.Sprintf("Saw %d precerts", s.precertsSeen))
 	s.Log(fmt.Sprintf("%d unparsable entries, %d non-fatal errors", s.unparsableEntries, s.entriesWithNonFatalErrors))
-	return nil
+	return int64(s.opts.StartIndex) + s.certsProcessed, nil
 }
 
 // Creates a new Scanner instance using |client| to talk to the log, and taking
 // configuration options from |opts|.
-func NewScanner(client *client.LogClient, opts ScannerOptions) *Scanner {
+func NewScanner(client *client.LogClient, opts ScannerOptions, scanLog *logging.Logger) *Scanner {
 	var scanner Scanner
 	scanner.logClient = client
 	// Set a default match-everything regex if none was provided:
@@ -409,5 +455,6 @@ func NewScanner(client *client.LogClient, opts ScannerOptions) *Scanner {
 		opts.Matcher = &MatchAll{}
 	}
 	scanner.opts = opts
+	log = scanLog
 	return &scanner
 }
diff --git a/ct/scanner/scanner_test.go b/ct/scanner/scanner_test.go
deleted file mode 100644
index 7e9ce19..0000000
--- a/ct/scanner/scanner_test.go
+++ /dev/null
@@ -1,241 +0,0 @@
-package scanner
-
-import (
-	"container/list"
-	"log"
-	"net/http"
-	"net/http/httptest"
-	"regexp"
-	"testing"
-
-	"github.com/google/certificate-transparency/go"
-	"github.com/google/certificate-transparency/go/client"
-	"github.com/google/certificate-transparency/go/x509"
-)
-
-func CertMatchesRegex(r *regexp.Regexp, cert *x509.Certificate) bool {
-	if r.FindStringIndex(cert.Subject.CommonName) != nil {
-		return true
-	}
-	for _, alt := range cert.DNSNames {
-		if r.FindStringIndex(alt) != nil {
-			return true
-		}
-	}
-	return false
-}
-
-func TestScannerMatchAll(t *testing.T) {
-	var cert x509.Certificate
-	m := &MatchAll{}
-	if !m.CertificateMatches(&cert) {
-		t.Fatal("MatchAll didn't match!")
-	}
-}
-func TestScannerMatchNone(t *testing.T) {
-	var cert x509.Certificate
-	m := &MatchNone{}
-	if m.CertificateMatches(&cert) {
-		t.Fatal("MatchNone matched!")
-	}
-}
-
-func TestScannerMatchSubjectRegexMatchesCertificateCommonName(t *testing.T) {
-	const SubjectName = "www.example.com"
-	const SubjectRegEx = ".*example.com"
-	var cert x509.Certificate
-	cert.Subject.CommonName = SubjectName
-
-	m := MatchSubjectRegex{regexp.MustCompile(SubjectRegEx), nil}
-	if !m.CertificateMatches(&cert) {
-		t.Fatal("MatchSubjectRegex failed to match on Cert Subject CommonName")
-	}
-}
-
-func TestScannerMatchSubjectRegexIgnoresDifferentCertificateCommonName(t *testing.T) {
-	const SubjectName = "www.google.com"
-	const SubjectRegEx = ".*example.com"
-	var cert x509.Certificate
-	cert.Subject.CommonName = SubjectName
-
-	m := MatchSubjectRegex{regexp.MustCompile(SubjectRegEx), nil}
-	if m.CertificateMatches(&cert) {
-		t.Fatal("MatchSubjectRegex incorrectly matched on Cert Subject CommonName")
-	}
-}
-
-func TestScannerMatchSubjectRegexIgnoresDifferentCertificateSAN(t *testing.T) {
-	const SubjectName = "www.google.com"
-	const SubjectRegEx = ".*example.com"
-	var cert x509.Certificate
-	cert.Subject.CommonName = SubjectName
-
-	m := MatchSubjectRegex{regexp.MustCompile(SubjectRegEx), nil}
-	cert.Subject.CommonName = "Wibble"              // Doesn't match
-	cert.DNSNames = append(cert.DNSNames, "Wibble") // Nor this
-	cert.DNSNames = append(cert.DNSNames, SubjectName)
-
-	if m.CertificateMatches(&cert) {
-		t.Fatal("MatchSubjectRegex incorrectly matched on Cert SubjectAlternativeName")
-	}
-}
-
-func TestScannerMatchSubjectRegexMatchesCertificateSAN(t *testing.T) {
-	const SubjectName = "www.example.com"
-	const SubjectRegEx = ".*example.com"
-	var cert x509.Certificate
-	cert.Subject.CommonName = SubjectName
-
-	m := MatchSubjectRegex{regexp.MustCompile(SubjectRegEx), nil}
-	cert.Subject.CommonName = "Wibble"              // Doesn't match
-	cert.DNSNames = append(cert.DNSNames, "Wibble") // Nor this
-	cert.DNSNames = append(cert.DNSNames, SubjectName)
-
-	if !m.CertificateMatches(&cert) {
-		t.Fatal("MatchSubjectRegex failed to match on Cert SubjectAlternativeName")
-	}
-}
-
-func TestScannerMatchSubjectRegexMatchesPrecertificateCommonName(t *testing.T) {
-	const SubjectName = "www.example.com"
-	const SubjectRegEx = ".*example.com"
-	var precert ct.Precertificate
-	precert.TBSCertificate.Subject.CommonName = SubjectName
-
-	m := MatchSubjectRegex{nil, regexp.MustCompile(SubjectRegEx)}
-	if !m.PrecertificateMatches(&precert) {
-		t.Fatal("MatchSubjectRegex failed to match on Precert Subject CommonName")
-	}
-}
-
-func TestScannerMatchSubjectRegexIgnoresDifferentPrecertificateCommonName(t *testing.T) {
-	const SubjectName = "www.google.com"
-	const SubjectRegEx = ".*example.com"
-	var precert ct.Precertificate
-	precert.TBSCertificate.Subject.CommonName = SubjectName
-
-	m := MatchSubjectRegex{nil, regexp.MustCompile(SubjectRegEx)}
-	if m.PrecertificateMatches(&precert) {
-		t.Fatal("MatchSubjectRegex incorrectly matched on Precert Subject CommonName")
-	}
-}
-
-func TestScannerMatchSubjectRegexIgnoresDifferentPrecertificateSAN(t *testing.T) {
-	const SubjectName = "www.google.com"
-	const SubjectRegEx = ".*example.com"
-	var precert ct.Precertificate
-	precert.TBSCertificate.Subject.CommonName = SubjectName
-
-	m := MatchSubjectRegex{nil, regexp.MustCompile(SubjectRegEx)}
-	precert.TBSCertificate.Subject.CommonName = "Wibble"                                // Doesn't match
-	precert.TBSCertificate.DNSNames = append(precert.TBSCertificate.DNSNames, "Wibble") // Nor this
-	precert.TBSCertificate.DNSNames = append(precert.TBSCertificate.DNSNames, SubjectName)
-
-	if m.PrecertificateMatches(&precert) {
-		t.Fatal("MatchSubjectRegex incorrectly matched on Precert SubjectAlternativeName")
-	}
-}
-
-func TestScannerMatchSubjectRegexMatchesPrecertificateSAN(t *testing.T) {
-	const SubjectName = "www.example.com"
-	const SubjectRegEx = ".*example.com"
-	var precert ct.Precertificate
-	precert.TBSCertificate.Subject.CommonName = SubjectName
-
-	m := MatchSubjectRegex{nil, regexp.MustCompile(SubjectRegEx)}
-	precert.TBSCertificate.Subject.CommonName = "Wibble"                                // Doesn't match
-	precert.TBSCertificate.DNSNames = append(precert.TBSCertificate.DNSNames, "Wibble") // Nor this
-	precert.TBSCertificate.DNSNames = append(precert.TBSCertificate.DNSNames, SubjectName)
-
-	if !m.PrecertificateMatches(&precert) {
-		t.Fatal("MatchSubjectRegex failed to match on Precert SubjectAlternativeName")
-	}
-}
-
-func TestScannerEndToEnd(t *testing.T) {
-	ts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
-		switch r.URL.Path {
-		case "/ct/v1/get-sth":
-			log.Printf("GetSTH")
-			if _, err := w.Write([]byte(FourEntrySTH)); err != nil {
-				t.Fatal("Failed to write get-sth response")
-			}
-		case "/ct/v1/get-entries":
-			log.Printf("GetEntries %s", r.URL.RawQuery)
-			if _, err := w.Write([]byte(FourEntries)); err != nil {
-				t.Fatal("Failed to write get-sth response")
-			}
-		default:
-			t.Fatal("Unexpected request")
-		}
-	}))
-	defer ts.Close()
-
-	logClient := client.New(ts.URL)
-	opts := ScannerOptions{
-		Matcher:       &MatchSubjectRegex{regexp.MustCompile(".*\\.google\\.com"), nil},
-		BatchSize:     10,
-		NumWorkers:    1,
-		ParallelFetch: 1,
-		StartIndex:    0,
-	}
-	scanner := NewScanner(logClient, opts)
-
-	var matchedCerts list.List
-	var matchedPrecerts list.List
-
-	err := scanner.Scan(func(e *ct.LogEntry) {
-		// Annoyingly we can't t.Fatal() in here, as this is run in another go
-		// routine
-		matchedCerts.PushBack(*e.X509Cert)
-	}, func(e *ct.LogEntry) {
-		matchedPrecerts.PushBack(*e.Precert)
-	})
-
-	if err != nil {
-		t.Fatal(err)
-	}
-
-	if matchedPrecerts.Len() != 0 {
-		t.Fatal("Found unexpected Precert")
-	}
-
-	switch matchedCerts.Len() {
-	case 0:
-		t.Fatal("Failed to find mail.google.com cert")
-	case 1:
-		if matchedCerts.Front().Value.(x509.Certificate).Subject.CommonName != "mail.google.com" {
-			t.Fatal("Matched unexpected cert")
-		}
-	default:
-		t.Fatal("Found unexpected number of certs")
-	}
-}
-
-func TestDefaultScannerOptions(t *testing.T) {
-	opts := DefaultScannerOptions()
-	switch opts.Matcher.(type) {
-	case *MatchAll:
-		// great
-	default:
-		t.Fatalf("Default Matcher is a %T, expected MatchAll.", opts.Matcher)
-	}
-	if opts.PrecertOnly {
-		t.Fatal("Expected PrecertOnly to be false.")
-	}
-	if opts.BatchSize < 1 {
-		t.Fatalf("Insane BatchSize %d", opts.BatchSize)
-	}
-	if opts.NumWorkers < 1 {
-		t.Fatalf("Insane NumWorkers %d", opts.NumWorkers)
-	}
-	if opts.ParallelFetch < 1 {
-		t.Fatalf("Insane ParallelFetch %d", opts.ParallelFetch)
-	}
-	if opts.StartIndex != 0 {
-		t.Fatalf("Expected StartIndex to be 0, but was %d", opts.StartIndex)
-	}
-	if opts.Quiet {
-		t.Fatal("Expected Quiet to be false.")
-	}
-}
diff --git a/ct/scanner/scanner_test_data.go b/ct/scanner/scanner_test_data.go
deleted file mode 100644
index d943227..0000000
--- a/ct/scanner/scanner_test_data.go
+++ /dev/null
@@ -1,379 +0,0 @@
-package scanner
-
-import (
-	"crypto/sha256"
-	"encoding/base64"
-	"log"
-)
-
-const (
-	// TODO(alcutter): this signature is syntactically correct, but invalid.
-	FourEntrySTH = "{" +
-		"\"tree_size\":4,\"timestamp\":1396877652123,\"sha256_root_hash\":\"0JBu0CkZnKXc1niEndDaqqgCRHucCfVt1/WBAXs/5T8=\",\"tree_head_signature\":\"AAAACXNpZ25hdHVyZQ==\"}"
-	FourEntries = "{\"entries\":[{\"leaf_input\":\"AAAAAAE9pCDoYwAAAAOGMIIDgjCCAuu" +
-		"gAwIBAgIKFIT5BQAAAAB9PDANBgkqhkiG9w0BAQUFADBGMQswCQYDVQQGEwJVUzETMBEGA1UEChMKR29" +
-		"vZ2xlIEluYzEiMCAGA1UEAxMZR29vZ2xlIEludGVybmV0IEF1dGhvcml0eTAeFw0xMzAyMjAxMzM0NTF" +
-		"aFw0xMzA2MDcxOTQzMjdaMGkxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQ" +
-		"HEw1Nb3VudGFpbiBWaWV3MRMwEQYDVQQKEwpHb29nbGUgSW5jMRgwFgYDVQQDEw9tYWlsLmdvb2dsZS5" +
-		"jb20wgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAOD1FbMyG0IT8JOi2El6RVciBJp4ENfTkpJ2vn/" +
-		"HUq+gjprmUNxLSvcK+D8vBpkq8N41Qv+82PyTuZIB0pg2CJfs07C5+ZAQnwm01DiQjM/j2jKb5GegOBR" +
-		"YngbRkAPSGCufzJy+QBWbd1htqceIREEI/JH7pUGgg90XUQgBddBbAgMBAAGjggFSMIIBTjAdBgNVHSU" +
-		"EFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIwHQYDVR0OBBYEFAgZmgKeyK8PXIGOAU+/5r/xNy5hMB8GA1U" +
-		"dIwQYMBaAFL/AMOv1QxE+Z7qekfv8atrjaxIkMFsGA1UdHwRUMFIwUKBOoEyGSmh0dHA6Ly93d3cuZ3N" +
-		"0YXRpYy5jb20vR29vZ2xlSW50ZXJuZXRBdXRob3JpdHkvR29vZ2xlSW50ZXJuZXRBdXRob3JpdHkuY3J" +
-		"sMGYGCCsGAQUFBwEBBFowWDBWBggrBgEFBQcwAoZKaHR0cDovL3d3dy5nc3RhdGljLmNvbS9Hb29nbGV" +
-		"JbnRlcm5ldEF1dGhvcml0eS9Hb29nbGVJbnRlcm5ldEF1dGhvcml0eS5jcnQwDAYDVR0TAQH/BAIwADA" +
-		"aBgNVHREEEzARgg9tYWlsLmdvb2dsZS5jb20wDQYJKoZIhvcNAQEFBQADgYEAX0lVXCymPXGdCwvn2kp" +
-		"qJw5Q+Hf8gzGhxDG6aMlO5wj2wf8qPWABDRwHdb4mdSmRMuwhzCJhE3PceXLNf3pOlR/Prt18mDY/r6c" +
-		"LwfldIXgTOYkw/uckGwvb0BwMsEi2FDE/T3d3SOo+lHvqPX9sOVa2uyA0wmIYnbT+5uQY6m0AAA==\"," +
-		"\"extra_data\":\"AAXeAAK0MIICsDCCAhmgAwIBAgIDC2dxMA0GCSqGSIb3DQEBBQUAME4xCzAJBgN" +
-		"VBAYTAlVTMRAwDgYDVQQKEwdFcXVpZmF4MS0wKwYDVQQLEyRFcXVpZmF4IFNlY3VyZSBDZXJ0aWZpY2F" +
-		"0ZSBBdXRob3JpdHkwHhcNMDkwNjA4MjA0MzI3WhcNMTMwNjA3MTk0MzI3WjBGMQswCQYDVQQGEwJVUzE" +
-		"TMBEGA1UEChMKR29vZ2xlIEluYzEiMCAGA1UEAxMZR29vZ2xlIEludGVybmV0IEF1dGhvcml0eTCBnzA" +
-		"NBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEAye23pIucV+eEPkB9hPSP0XFjU5nneXQUr0SZMyCSjXvlKAy" +
-		"6rWxJfoNfNFlOCnowzdDXxFdF7dWq1nMmzq0yE7jXDx07393cCDaob1FEm8rWIFJztyaHNWrbqeXUWaU" +
-		"r/GcZOfqTGBhs3t0lig4zFEfC7wFQeeT9adGnwKziV28CAwEAAaOBozCBoDAOBgNVHQ8BAf8EBAMCAQY" +
-		"wHQYDVR0OBBYEFL/AMOv1QxE+Z7qekfv8atrjaxIkMB8GA1UdIwQYMBaAFEjmaPkr0rKV10fYIyAQTzO" +
-		"YkJ/UMBIGA1UdEwEB/wQIMAYBAf8CAQAwOgYDVR0fBDMwMTAvoC2gK4YpaHR0cDovL2NybC5nZW90cnV" +
-		"zdC5jb20vY3Jscy9zZWN1cmVjYS5jcmwwDQYJKoZIhvcNAQEFBQADgYEAuIojxkiWsRF8YHdeBZqrocb" +
-		"6ghwYB8TrgbCoZutJqOkM0ymt9e8kTP3kS8p/XmOrmSfLnzYhLLkQYGfN0rTw8Ktx5YtaiScRhKqOv5n" +
-		"wnQkhClIZmloJ0pC3+gz4fniisIWvXEyZ2VxVKfmlUUIuOss4jHg7y/j7lYe8vJD5UDIAAyQwggMgMII" +
-		"CiaADAgECAgQ13vTPMA0GCSqGSIb3DQEBBQUAME4xCzAJBgNVBAYTAlVTMRAwDgYDVQQKEwdFcXVpZmF" +
-		"4MS0wKwYDVQQLEyRFcXVpZmF4IFNlY3VyZSBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkwHhcNOTgwODIyMTY" +
-		"0MTUxWhcNMTgwODIyMTY0MTUxWjBOMQswCQYDVQQGEwJVUzEQMA4GA1UEChMHRXF1aWZheDEtMCsGA1U" +
-		"ECxMkRXF1aWZheCBTZWN1cmUgQ2VydGlmaWNhdGUgQXV0aG9yaXR5MIGfMA0GCSqGSIb3DQEBAQUAA4G" +
-		"NADCBiQKBgQDBXbFYZwhi7qCaLR8IbZEUaJgKHv7aBG8ThGIhw9F8zp8F4LgB8E407OKKlQRkrPFrU18" +
-		"Fs8tngL9CAo7+3QEJ7OEAFE/8+/AM3UO6WyvhH4BwmRVXkxbxD5dqt8JoIxzMTVkwrFEeO68r1u5jRXv" +
-		"F2V9Q0uNQDzqI578U/eDHuQIDAQABo4IBCTCCAQUwcAYDVR0fBGkwZzBloGOgYaRfMF0xCzAJBgNVBAY" +
-		"TAlVTMRAwDgYDVQQKEwdFcXVpZmF4MS0wKwYDVQQLEyRFcXVpZmF4IFNlY3VyZSBDZXJ0aWZpY2F0ZSB" +
-		"BdXRob3JpdHkxDTALBgNVBAMTBENSTDEwGgYDVR0QBBMwEYEPMjAxODA4MjIxNjQxNTFaMAsGA1UdDwQ" +
-		"EAwIBBjAfBgNVHSMEGDAWgBRI5mj5K9KylddH2CMgEE8zmJCf1DAdBgNVHQ4EFgQUSOZo+SvSspXXR9g" +
-		"jIBBPM5iQn9QwDAYDVR0TBAUwAwEB/zAaBgkqhkiG9n0HQQAEDTALGwVWMy4wYwMCBsAwDQYJKoZIhvc" +
-		"NAQEFBQADgYEAWM4p6vz33rXOArkXtYXRuePglcwlMQ0AppJuf7aSY55QldGab+QR3mOFbpjuqP9ayNN" +
-		"VsmZxV97AIes9KqcjSQEEhkJ7/O5/ohZStWdn00DbOyZYsih3Pa4Ud2HW+ipmJ6AN+qdzXOpw8ZQhZUR" +
-		"f+vzvKWipood573nvT6wHdzg=\"},{\"leaf_input\":\"AAAAAAE9pe0GcwAAAATWMIIE0jCCA7qgA" +
-		"wIBAgIDAPY6MA0GCSqGSIb3DQEBBQUAMEAxCzAJBgNVBAYTAlVTMRcwFQYDVQQKEw5HZW9UcnVzdCwgS" +
-		"W5jLjEYMBYGA1UEAxMPR2VvVHJ1c3QgU1NMIENBMB4XDTExMTAyMTExMDUwNloXDTEzMTEyMjA0MzI0N" +
-		"1owgc4xKTAnBgNVBAUTIFRqbGZoUTB0cXp3WmtNa0svNXFNdGZqbjJ6aWRVNzRoMQswCQYDVQQGEwJVU" +
-		"zEXMBUGA1UECBMOU291dGggQ2Fyb2xpbmExEzARBgNVBAcTCkNoYXJsZXN0b24xFzAVBgNVBAoTDkJsY" +
-		"WNrYmF1ZCBJbmMuMRAwDgYDVQQLEwdIb3N0aW5nMTswOQYDVQQDEzJ3d3cuc3RydWxlYXJ0c2NlbnRyZ" +
-		"S5wdXJjaGFzZS10aWNrZXRzLW9ubGluZS5jby51azCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCg" +
-		"gEBAJtkbcF8x3TtIARHC8BDRtoIAdh9HO9fo+5UUDtoc8f4xq7Rb2xbWOiEX29JqZOdsuucYTuYbbDf0" +
-		"uBYcJpkwhEg4Vg5skyfp0jAd6pXm1euQ+RiRShzEQYKJ8y4/IjZHttA/8HSzEKWJnuidsYrl/twFhlX5" +
-		"WIZq3BUVQ9GVqGe9n1r2eIFTs6FxYUpaVzTkc6OLh1qSz+cnDDPigLUoUOK/KqN7ybmJxSefJw9WpFW/" +
-		"pIn6M0gFAbu0egFgDybQ3JwUAEh8ddzpKRCqGq1mdZAKpKFHcqmi5nG5aFD4p1NFmPjDVQXohXLQvwtm" +
-		"wwKS2Zo+tnulPnEe9jjET/f+MUCAwEAAaOCAUQwggFAMB8GA1UdIwQYMBaAFEJ5VBthzVUrPmPVPEhX9" +
-		"Z/7Rc5KMA4GA1UdDwEB/wQEAwIEsDAdBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIwPQYDVR0RB" +
-		"DYwNIIyd3d3LnN0cnVsZWFydHNjZW50cmUucHVyY2hhc2UtdGlja2V0cy1vbmxpbmUuY28udWswPQYDV" +
-		"R0fBDYwNDAyoDCgLoYsaHR0cDovL2d0c3NsLWNybC5nZW90cnVzdC5jb20vY3Jscy9ndHNzbC5jcmwwH" +
-		"QYDVR0OBBYEFDIdT1lJ84lcDpGuBOuAXrP0AlBVMAwGA1UdEwEB/wQCMAAwQwYIKwYBBQUHAQEENzA1M" +
-		"DMGCCsGAQUFBzAChidodHRwOi8vZ3Rzc2wtYWlhLmdlb3RydXN0LmNvbS9ndHNzbC5jcnQwDQYJKoZIh" +
-		"vcNAQEFBQADggEBAFhFfVTB5NWG3rVaq1jM72uGneGCjGk4qV4uKtEFn+zTJe9W2N/u8V2+mLvWQfDGP" +
-		"r8X5u8KzBOQ+fl6aRxvI71EM3kjMu6UuJkUwXsoocK1c/iVBwWSpqem20t/2Z2n5oIN54QsKZX6tQd9J" +
-		"HQ95YwtlyC7H4VeDKtJZ5x9UhJi8v35C+UgYPmiU5PdeoTdwxCf285FoQL9fBAPbv+EGek1XVaVg2yJK" +
-		"ptG2OeM8AaynHsFcK/OcZJtsiGhtu2s9F910OBpoU+lhnPylwxOf4k35JcLaqHJ3BbLUtybbduNqtf3+" +
-		"sYhkvp5IcCypoJy/Rk4fHgD8VTNiNWj7KGuHRYAAA==\",\"extra_data\":\"AAqLAAPdMIID2TCCA" +
-		"sGgAwIBAgIDAjbQMA0GCSqGSIb3DQEBBQUAMEIxCzAJBgNVBAYTAlVTMRYwFAYDVQQKEw1HZW9UcnVzd" +
-		"CBJbmMuMRswGQYDVQQDExJHZW9UcnVzdCBHbG9iYWwgQ0EwHhcNMTAwMjE5MjIzOTI2WhcNMjAwMjE4M" +
-		"jIzOTI2WjBAMQswCQYDVQQGEwJVUzEXMBUGA1UEChMOR2VvVHJ1c3QsIEluYy4xGDAWBgNVBAMTD0dlb" +
-		"1RydXN0IFNTTCBDQTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAJCzgMHk5UatcGA9uuUU3" +
-		"Z6KXot1WubKbUGlI+g5hSZ6p1V3mkihkn46HhrxJ6ujTDnMyz1Hr4GuFmpcN+9FQf37mpc8oEOdxt8XI" +
-		"dGKolbCA0mEEoE+yQpUYGa5jFTk+eb5lPHgX3UR8im55IaisYmtph6DKWOy8FQchQt65+EuDa+kvc3ns" +
-		"VrXjAVaDktzKIt1XTTYdwvhdGLicTBi2LyKBeUxY0pUiWozeKdOVSQdl+8a5BLGDzAYtDRN4dgjOyFbL" +
-		"TAZJQ5096QhS6CkIMlszZhWwPKoXz4mdaAN+DaIiixafWcwqQ/RmXAueOFRJq9VeiS+jDkNd53eAsMMv" +
-		"R8CAwEAAaOB2TCB1jAOBgNVHQ8BAf8EBAMCAQYwHQYDVR0OBBYEFEJ5VBthzVUrPmPVPEhX9Z/7Rc5KM" +
-		"B8GA1UdIwQYMBaAFMB6mGiNifurBWQMEX2qfWW4ysxOMBIGA1UdEwEB/wQIMAYBAf8CAQAwOgYDVR0fB" +
-		"DMwMTAvoC2gK4YpaHR0cDovL2NybC5nZW90cnVzdC5jb20vY3Jscy9ndGdsb2JhbC5jcmwwNAYIKwYBB" +
-		"QUHAQEEKDAmMCQGCCsGAQUFBzABhhhodHRwOi8vb2NzcC5nZW90cnVzdC5jb20wDQYJKoZIhvcNAQEFB" +
-		"QADggEBANTvU4ToGr2hiwTAqfVfoRB4RV2yV2pOJMtlTjGXkZrUJPjiJ2ZwMZzBYlQG55cdOprApClIC" +
-		"q8kx6jEmlTBfEx4TCtoLF0XplR4TEbigMMfOHES0tdT41SFULgCy+5jOvhWiU1Vuy7AyBh3hjELC3Dwf" +
-		"jWDpCoTZFZnNF0WX3OsewYk2k9QbSqr0E1TQcKOu3EDSSmGGM8hQkx0YlEVxW+o78Qn5Rsz3VqI138S0" +
-		"adhJR/V4NwdzxoQ2KDLX4z6DOW/cf/lXUQdpj6HR/oaToODEj+IZpWYeZqF6wJHzSXj8gYETpnKXKBue" +
-		"rvdo5AaRTPvvz7SBMS24CqFZUE+ENQAA4EwggN9MIIC5qADAgECAgMSu+YwDQYJKoZIhvcNAQEFBQAwT" +
-		"jELMAkGA1UEBhMCVVMxEDAOBgNVBAoTB0VxdWlmYXgxLTArBgNVBAsTJEVxdWlmYXggU2VjdXJlIENlc" +
-		"nRpZmljYXRlIEF1dGhvcml0eTAeFw0wMjA1MjEwNDAwMDBaFw0xODA4MjEwNDAwMDBaMEIxCzAJBgNVB" +
-		"AYTAlVTMRYwFAYDVQQKEw1HZW9UcnVzdCBJbmMuMRswGQYDVQQDExJHZW9UcnVzdCBHbG9iYWwgQ0Ewg" +
-		"gEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDazBhjMP30FyMaVn5b3zxsOORxt3iR1Lyh2Ez4q" +
-		"EO2A+lNIQcIiNpYL2Y5Kb0FeIudOOgFt2p+caTmxGCmsO+A5IkoD54l1u2D862mkceYyUIYNRSdrZhGk" +
-		"i5PyvGHQ8EWlVctUO+JLYB6V63y7l9r0gCNuRT4FBU12cBGo3tyyJG/yVUrzdCXPpwmZMzfzoMZccpO5" +
-		"tTVe6kZzVXeyOzSXjhT5VxPjC3+UCM2/Gbmy46kORkAt5UCOZELDv44LtEdBZr2TT5vDwcdrywej2A54" +
-		"vo2UxM51F4mK9s9qBS9MusYAyhSBHHlqzM94Ti7BzaEYpx56hYw9F/AK+hxa+T5AgMBAAGjgfAwge0wH" +
-		"wYDVR0jBBgwFoAUSOZo+SvSspXXR9gjIBBPM5iQn9QwHQYDVR0OBBYEFMB6mGiNifurBWQMEX2qfWW4y" +
-		"sxOMA8GA1UdEwEB/wQFMAMBAf8wDgYDVR0PAQH/BAQDAgEGMDoGA1UdHwQzMDEwL6AtoCuGKWh0dHA6L" +
-		"y9jcmwuZ2VvdHJ1c3QuY29tL2NybHMvc2VjdXJlY2EuY3JsME4GA1UdIARHMEUwQwYEVR0gADA7MDkGC" +
-		"CsGAQUFBwIBFi1odHRwczovL3d3dy5nZW90cnVzdC5jb20vcmVzb3VyY2VzL3JlcG9zaXRvcnkwDQYJK" +
-		"oZIhvcNAQEFBQADgYEAduESbk5LFhKGMAaygQjP8AjHx3F+Zu7C7dQ7H//w8MhO1kM4sLkwfRjQVYOia" +
-		"ss2EZzoSGajbX+4E9RH/otaXHP8rtkbMhk4q5c0FKqW0uujHBQISba75ZHvgzbrHVZvytq8c2OQ5H97P" +
-		"iLLPQftXzh0nOMDUE6hr5juYfKEPxIAAyQwggMgMIICiaADAgECAgQ13vTPMA0GCSqGSIb3DQEBBQUAM" +
-		"E4xCzAJBgNVBAYTAlVTMRAwDgYDVQQKEwdFcXVpZmF4MS0wKwYDVQQLEyRFcXVpZmF4IFNlY3VyZSBDZ" +
-		"XJ0aWZpY2F0ZSBBdXRob3JpdHkwHhcNOTgwODIyMTY0MTUxWhcNMTgwODIyMTY0MTUxWjBOMQswCQYDV" +
-		"QQGEwJVUzEQMA4GA1UEChMHRXF1aWZheDEtMCsGA1UECxMkRXF1aWZheCBTZWN1cmUgQ2VydGlmaWNhd" +
-		"GUgQXV0aG9yaXR5MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDBXbFYZwhi7qCaLR8IbZEUaJgKH" +
-		"v7aBG8ThGIhw9F8zp8F4LgB8E407OKKlQRkrPFrU18Fs8tngL9CAo7+3QEJ7OEAFE/8+/AM3UO6WyvhH" +
-		"4BwmRVXkxbxD5dqt8JoIxzMTVkwrFEeO68r1u5jRXvF2V9Q0uNQDzqI578U/eDHuQIDAQABo4IBCTCCA" +
-		"QUwcAYDVR0fBGkwZzBloGOgYaRfMF0xCzAJBgNVBAYTAlVTMRAwDgYDVQQKEwdFcXVpZmF4MS0wKwYDV" +
-		"QQLEyRFcXVpZmF4IFNlY3VyZSBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkxDTALBgNVBAMTBENSTDEwGgYDV" +
-		"R0QBBMwEYEPMjAxODA4MjIxNjQxNTFaMAsGA1UdDwQEAwIBBjAfBgNVHSMEGDAWgBRI5mj5K9KylddH2" +
-		"CMgEE8zmJCf1DAdBgNVHQ4EFgQUSOZo+SvSspXXR9gjIBBPM5iQn9QwDAYDVR0TBAUwAwEB/zAaBgkqh" +
-		"kiG9n0HQQAEDTALGwVWMy4wYwMCBsAwDQYJKoZIhvcNAQEFBQADgYEAWM4p6vz33rXOArkXtYXRuePgl" +
-		"cwlMQ0AppJuf7aSY55QldGab+QR3mOFbpjuqP9ayNNVsmZxV97AIes9KqcjSQEEhkJ7/O5/ohZStWdn0" +
-		"0DbOyZYsih3Pa4Ud2HW+ipmJ6AN+qdzXOpw8ZQhZURf+vzvKWipood573nvT6wHdzg=\"},{\"leaf_i" +
-		"nput\":\"AAAAAAE9pe0GcwAAAATjMIIE3zCCA8egAwIBAgIUCimKXmNJ+wiDS2zJvg6LC2cvrvQwDQY" +
-		"JKoZIhvcNAQEFBQAwWjELMAkGA1UEBhMCSlAxIzAhBgNVBAoMGkN5YmVydHJ1c3QgSmFwYW4gQ28uLCB" +
-		"MdGQuMSYwJAYDVQQDDB1DeWJlcnRydXN0IEphcGFuIFB1YmxpYyBDQSBHMjAeFw0xMjAzMTkwMzE0MzN" +
-		"aFw0xNTAzMzExNDU5MDBaMIGKMQswCQYDVQQGEwJKUDEOMAwGA1UECBMFVG9reW8xEDAOBgNVBAcTB0N" +
-		"odW8ta3UxHjAcBgNVBAoTFU5ldCBEcmVhbWVycyBDby4sTHRkLjEeMBwGA1UECxMVTWVnYSBNZWRpYSB" +
-		"EZXBhcnRtZW50MRkwFwYDVQQDExB3d3cubmV0a2VpYmEuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8" +
-		"AMIIBCgKCAQEA2to03F4GdlRiGljXrSmT08/WrY59UWaoe/H4wQN6S5eQKVtaLjBWUF5Ro4sm/kND7au" +
-		"fyDqXUePxiZkphupV+VO7PeKp9e5yqEijK4z2XoFQhrCH5kkn1GDrTNzonxyAQtiBJ/k6gVTJV5fn4s7" +
-		"I6bZ2aXiJLIlTCFwMDNkrB3fj9py86WwymXaypSHkmo9Sx6PFiIOwPH6vXRK4UyAfFpXPiLGJENEWOY2" +
-		"AtzMJiIoupgAuyvmoY0G0Vk34mA9gOIOrKE2QmVSR3AtA31UpNZ33qvimfz96rHtCeiZj5HNxZRBMGBs" +
-		"HTlu5e49xypiYCCV41jQvmfZOShan3R3o2QIDAQABo4IBajCCAWYwCQYDVR0TBAIwADCBuAYDVR0gBIG" +
-		"wMIGtMIGqBggqgwiMmxEBATCBnTBXBggrBgEFBQcCAjBLGklGb3IgbW9yZSBkZXRhaWxzLCBwbGVhc2U" +
-		"gdmlzaXQgb3VyIHdlYnNpdGUgaHR0cHM6Ly93d3cuY3liZXJ0cnVzdC5uZS5qcCAuMEIGCCsGAQUFBwI" +
-		"BFjZodHRwczovL3d3dy5jeWJlcnRydXN0Lm5lLmpwL3NzbC9yZXBvc2l0b3J5L2luZGV4Lmh0bWwwGwY" +
-		"DVR0RBBQwEoIQd3d3Lm5ldGtlaWJhLmNvbTALBgNVHQ8EBAMCBaAwHQYDVR0lBBYwFAYIKwYBBQUHAwE" +
-		"GCCsGAQUFBwMCMFUGA1UdHwROMEwwSqBIoEaGRGh0dHA6Ly9zdXJlc2VyaWVzLWNybC5jeWJlcnRydXN" +
-		"0Lm5lLmpwL1N1cmVTZXJ2ZXIvY3RqcHViY2FnMi9jZHAuY3JsMA0GCSqGSIb3DQEBBQUAA4IBAQAw8sX" +
-		"P2ecKp5QGXtzcxKwkkznqocaddzoG69atcyzwshySLfo0ElMHP5WG9TpVrb6XSh2a1edwduAWBVAHQsH" +
-		"i4bt4wX9e9DBMnQx/jelcJevABQsXJPGc86diisXYDkHKQesi+8CvWvE0GmbVJRoq0RDo14WASQszuqT" +
-		"NW993walCzNTg88s7MniFgmgFd8n31SVls6QhY2Fmlr13JLDtzVDQDbj6MCPuwG8DdmR1bCM/ugcnk0a" +
-		"7ZVy3d4yTjdhKpocToFklhHtHg0AINghPXIqU0njjUsy3ujNYIYo1TaZ3835Bo0lDwdvKK68Jka24Cfc" +
-		"m+vfUfHKB56sIzquxAAA=\",\"extra_data\":\"AArbAAQ4MIIENDCCAxygAwIBAgIEBydcJjANBgk" +
-		"qhkiG9w0BAQUFADBaMQswCQYDVQQGEwJJRTESMBAGA1UEChMJQmFsdGltb3JlMRMwEQYDVQQLEwpDeWJ" +
-		"lclRydXN0MSIwIAYDVQQDExlCYWx0aW1vcmUgQ3liZXJUcnVzdCBSb290MB4XDTExMDgxODE4MzYzM1o" +
-		"XDTE4MDgwOTE4MzU0OVowWjELMAkGA1UEBhMCSlAxIzAhBgNVBAoMGkN5YmVydHJ1c3QgSmFwYW4gQ28" +
-		"uLCBMdGQuMSYwJAYDVQQDDB1DeWJlcnRydXN0IEphcGFuIFB1YmxpYyBDQSBHMjCCASIwDQYJKoZIhvc" +
-		"NAQEBBQADggEPADCCAQoCggEBALbcdvu5RPsSfFSwu0F1dPA1R54nukNERWAZzUQKsnjl+h4kOwIfaHd" +
-		"g9OsiBQo3btv3FSC7PVPU0BGO1OtnvtjdBTeUQSUj75oQo8P3AL26JpJngVCpT56RPE4gulJ//0xNjqq" +
-		"tTl+8J5cCKf2Vg0m/CrqxNRg1qXOIYlGsFBc0UOefxvOTXbnFAE83kHqBD9T1cinojGKscTvzLt8qXOm" +
-		"+51Ykgiiavz39cUL9xXtrNwlHUD5ykao7xU+dEm49gANUSUEVPPKGRHQo9bmjG9t2x+oDiaBg6VH2oWQ" +
-		"+dJvbKssYPMHnaBiJ7Ks4LlC5b24VMygdL9WAF4Yi8x0M4IcCAwEAAaOCAQAwgf0wEgYDVR0TAQH/BAg" +
-		"wBgEB/wIBADBTBgNVHSAETDBKMEgGCSsGAQQBsT4BADA7MDkGCCsGAQUFBwIBFi1odHRwOi8vY3liZXJ" +
-		"0cnVzdC5vbW5pcm9vdC5jb20vcmVwb3NpdG9yeS5jZm0wDgYDVR0PAQH/BAQDAgEGMB8GA1UdIwQYMBa" +
-		"AFOWdWTCCR1jMrPoIVDaGezq1BE3wMEIGA1UdHwQ7MDkwN6A1oDOGMWh0dHA6Ly9jZHAxLnB1YmxpYy1" +
-		"0cnVzdC5jb20vQ1JML09tbmlyb290MjAyNS5jcmwwHQYDVR0OBBYEFBvkje86cWsSZWjPtpG8OUMBjXX" +
-		"JMA0GCSqGSIb3DQEBBQUAA4IBAQBtK+3pj7Yp1rYwuuZttcNT0sm4Ck5In/E/Oiq0+3SW5r0YvKd5wHj" +
-		"BObog406A0iTVpXt/YqPa1A8NqZ2qxem8CMlIZpiewPneq23lsDPCcNCW1x5vmAQVY0i7moVdG2nztE/" +
-		"zpnAWDyEZf62wAzlJhoyic06T3CEBaLDvDXAaeqKyzCJCkVS9rHAEjUxc/Dqikvb5KhJAzXa3ZvTX0qv" +
-		"ejizZ3Qk1NydWC662rpqDYPBff/Ctsxz6uHRfx+zADq3Yw8+f0jAOXFEfPhniwdKpkA/mV7mvBHai8gg" +
-		"EJQo1u3MEMdCYRn82wWEWo4qMmd4QBfLe7aUJZJeEj0KoeyLEAAQ8MIIEODCCA6GgAwIBAgIEBydtuTA" +
-		"NBgkqhkiG9w0BAQUFADB1MQswCQYDVQQGEwJVUzEYMBYGA1UEChMPR1RFIENvcnBvcmF0aW9uMScwJQY" +
-		"DVQQLEx5HVEUgQ3liZXJUcnVzdCBTb2x1dGlvbnMsIEluYy4xIzAhBgNVBAMTGkdURSBDeWJlclRydXN" +
-		"0IEdsb2JhbCBSb290MB4XDTEwMTEzMDE2MzUyMVoXDTE4MDgxMDE1MzQyNlowWjELMAkGA1UEBhMCSUU" +
-		"xEjAQBgNVBAoTCUJhbHRpbW9yZTETMBEGA1UECxMKQ3liZXJUcnVzdDEiMCAGA1UEAxMZQmFsdGltb3J" +
-		"lIEN5YmVyVHJ1c3QgUm9vdDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAKMEuyKrmD1X6CZ" +
-		"ymrV51Cni4eiVgLGw41uOKymaZN+hXe2wCQVt2yguzmKiYv60iNoS6zjrIZ3AQSsBUnuId9Mcj8e6uYi" +
-		"1agnnc+gRQKfRzMpijS3ljwumUNKoUMMo6vWrJYeKmpYcqWe4PwzV9/lSEy/CG9VwcPCPwBLKBsua4dn" +
-		"KM3p31vjsufFoREJIE9LAwqSuXmD+tqYF/LTdB1kC1FkYmGP1pWPgkAx9XbIGevOF6uvUA65ehD5f/xX" +
-		"tabz5OTZydc93Uk3zyZAsuT3lySNTPx8kmCFcB5kpvcY67Oduhjprl3RjM71oGDHweI12v/yejl0qhqd" +
-		"NkNwnGjkCAwEAAaOCAWowggFmMBIGA1UdEwEB/wQIMAYBAf8CAQMwTgYDVR0gBEcwRTBDBgRVHSAAMDs" +
-		"wOQYIKwYBBQUHAgEWLWh0dHA6Ly9jeWJlcnRydXN0Lm9tbmlyb290LmNvbS9yZXBvc2l0b3J5LmNmbTA" +
-		"OBgNVHQ8BAf8EBAMCAQYwgYkGA1UdIwSBgTB/oXmkdzB1MQswCQYDVQQGEwJVUzEYMBYGA1UEChMPR1R" +
-		"FIENvcnBvcmF0aW9uMScwJQYDVQQLEx5HVEUgQ3liZXJUcnVzdCBTb2x1dGlvbnMsIEluYy4xIzAhBgN" +
-		"VBAMTGkdURSBDeWJlclRydXN0IEdsb2JhbCBSb290ggIBpTBFBgNVHR8EPjA8MDqgOKA2hjRodHRwOi8" +
-		"vd3d3LnB1YmxpYy10cnVzdC5jb20vY2dpLWJpbi9DUkwvMjAxOC9jZHAuY3JsMB0GA1UdDgQWBBTlnVk" +
-		"wgkdYzKz6CFQ2hns6tQRN8DANBgkqhkiG9w0BAQUFAAOBgQAWtCzJ8V7honubeCB6SnBwhhkAtwUq6Mk" +
-		"lOQ/DZDx1CdmJFYAHwo28KaVkUM9xdUcjvU3Yf3eaURBuTh8gPEecQ3R/loQQTBNDvvjgci7/v648CgN" +
-		"ggktv+ZrFHvavkDufYTs+3psFGsYsPFchCA9U+ihjbOgbnA/P3TBEE7lX/gACXjCCAlowggHDAgIBpTA" +
-		"NBgkqhkiG9w0BAQQFADB1MQswCQYDVQQGEwJVUzEYMBYGA1UEChMPR1RFIENvcnBvcmF0aW9uMScwJQY" +
-		"DVQQLEx5HVEUgQ3liZXJUcnVzdCBTb2x1dGlvbnMsIEluYy4xIzAhBgNVBAMTGkdURSBDeWJlclRydXN" +
-		"0IEdsb2JhbCBSb290MB4XDTk4MDgxMzAwMjkwMFoXDTE4MDgxMzIzNTkwMFowdTELMAkGA1UEBhMCVVM" +
-		"xGDAWBgNVBAoTD0dURSBDb3Jwb3JhdGlvbjEnMCUGA1UECxMeR1RFIEN5YmVyVHJ1c3QgU29sdXRpb25" +
-		"zLCBJbmMuMSMwIQYDVQQDExpHVEUgQ3liZXJUcnVzdCBHbG9iYWwgUm9vdDCBnzANBgkqhkiG9w0BAQE" +
-		"FAAOBjQAwgYkCgYEAlQ+gtvBQnOh6x4jN3RcOLrCU0Bs9DvaUwIqUxwbIkJfIuGQaen5sPFPhNyhzYH+" +
-		"yl1MHn1P5bViU0q+NbYhngObtspXPcjHKpRxyulwC52RC5/mpLNY6DayNQqokATnmnD8BhVcNWIdF+NO" +
-		"FqpNpJoVwSIA/EhXHebQfBS87YpkCAwEAATANBgkqhkiG9w0BAQQFAAOBgQBt6xsJ6V7ZUdtnImGkKjx" +
-		"Id+OgfKbec6IUA4U9+6sOMMWDFjOBEwieezRO30DIdNe5fdz0dlV9m2NUGOnw6vNcsdmLQh65wJVOuvr" +
-		"V4nz1aGG/juwFl19bsNejhTTEJKcND5WT78uU2J4fnVyFbceqrk8fIrXNla26p8z5qwt6fw==\"},{\"" +
-		"leaf_input\":\"AAAAAAE9pe0GdAAAAAWmMIIFojCCBIqgAwIBAgISESE1Pz3s7WxTnxbUXmwjh7QhM" +
-		"A0GCSqGSIb3DQEBBQUAMFkxCzAJBgNVBAYTAkJFMRkwFwYDVQQKExBHbG9iYWxTaWduIG52LXNhMS8wL" +
-		"QYDVQQDEyZHbG9iYWxTaWduIEV4dGVuZGVkIFZhbGlkYXRpb24gQ0EgLSBHMjAeFw0xMTEwMTAxNDE2M" +
-		"zdaFw0xMzEwMTAxNDE2MzdaMIHpMR0wGwYDVQQPDBRQcml2YXRlIE9yZ2FuaXphdGlvbjERMA8GA1UEB" +
-		"RMIMDIzOTczNzMxEzARBgsrBgEEAYI3PAIBAxMCR0IxCzAJBgNVBAYTAkdCMRQwEgYDVQQIEwtPeGZvc" +
-		"mRzaGlyZTEPMA0GA1UEBxMGT3hmb3JkMRgwFgYDVQQJEw9CZWF1bW9udCBTdHJlZXQxCzAJBgNVBAsTA" +
-		"klUMSMwIQYDVQQKExpUaGUgT3hmb3JkIFBsYXlob3VzZSBUcnVzdDEgMB4GA1UEAxMXd3d3Lm94Zm9yZ" +
-		"HBsYXlob3VzZS5jb20wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC2VgUJx+QIlEn4vMq5Y" +
-		"ajmJEk1Lv5Kwc95oqEb2EbQMVhCJct0OA0wKJbnFGaNIo5DJHIouuz98JoHixMB54EwZi5I64wvqyq1o" +
-		"hquTrUk4CS/4Y4odDw61dIqE2UZCxJYui9y4fTkptjNWmTaytw3LpGkt4Yx+AIcB+Oc7c7IPjTZEvR6L" +
-		"5lK9WqfZmrS/Y+Tgflz6W79rpgUb2CyfqLUX0Hxohw5/Zp197y4XhOwou/f+Vaju3j/Gt1WBAbWrKxpK" +
-		"AROVesfqT/H7Y/iOJ6jkPt5rqrLosStbGMpPUNNGRY0a8F1HBAUUzjTrRAE6CGZAPgBbcloYFc1zUsxP" +
-		"LcZAgMBAAGjggHRMIIBzTAOBgNVHQ8BAf8EBAMCBaAwTAYDVR0gBEUwQzBBBgkrBgEEAaAyAQEwNDAyB" +
-		"ggrBgEFBQcCARYmaHR0cHM6Ly93d3cuZ2xvYmFsc2lnbi5jb20vcmVwb3NpdG9yeS8wNwYDVR0RBDAwL" +
-		"oIXd3d3Lm94Zm9yZHBsYXlob3VzZS5jb22CE294Zm9yZHBsYXlob3VzZS5jb20wCQYDVR0TBAIwADAdB" +
-		"gNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIwPwYDVR0fBDgwNjA0oDKgMIYuaHR0cDovL2NybC5nb" +
-		"G9iYWxzaWduLmNvbS9ncy9nc2V4dGVuZHZhbGcyLmNybDCBiAYIKwYBBQUHAQEEfDB6MEEGCCsGAQUFB" +
-		"zAChjVodHRwOi8vc2VjdXJlLmdsb2JhbHNpZ24uY29tL2NhY2VydC9nc2V4dGVuZHZhbGcyLmNydDA1B" +
-		"ggrBgEFBQcwAYYpaHR0cDovL29jc3AyLmdsb2JhbHNpZ24uY29tL2dzZXh0ZW5kdmFsZzIwHQYDVR0OB" +
-		"BYEFNp+MVYdHILBfTE6JM8O6Ul+Xwx3MB8GA1UdIwQYMBaAFLCwSv0cdSj4HGGqE/b6wZA9axajMA0GC" +
-		"SqGSIb3DQEBBQUAA4IBAQALHuvJlSvi3OqKwDiXBrsx0zb7DGGLAzwQCyr60iwJuc1S8SkWURlM0CKIq" +
-		"0Qupj5vYIAY2g6gDWxdf/JFMh/Rxzv90JE/xZm9YlnMh2Evz3glLLQ5y2x1ddc0RU9YFoeOmJcgDOROI" +
-		"8aQvhcn9Jdj1Yk7BkKhbQv/pM9ETqtSro3Xbv/qcwPTG/oRysMCrN/DUxedUr95dFjrS3zpo+6Hr7Jab" +
-		"TcaAak40ksY+vHEQWbqm4YluJ4/c+6qfpsTTUih6//7xs92UxObeSMtWPaxySxedXekTPYrGt5X8XXPY" +
-		"oTKJnuJrxlkEBv0K7wozbn5Km2dpOqCAaqbf8WKa3mvAAA=\",\"extra_data\":\"AAgjAARfMIIEW" +
-		"zCCA0OgAwIBAgILBAAAAAABL07hW2MwDQYJKoZIhvcNAQEFBQAwTDEgMB4GA1UECxMXR2xvYmFsU2lnb" +
-		"iBSb290IENBIC0gUjIxEzARBgNVBAoTCkdsb2JhbFNpZ24xEzARBgNVBAMTCkdsb2JhbFNpZ24wHhcNM" +
-		"TEwNDEzMTAwMDAwWhcNMjIwNDEzMTAwMDAwWjBZMQswCQYDVQQGEwJCRTEZMBcGA1UEChMQR2xvYmFsU" +
-		"2lnbiBudi1zYTEvMC0GA1UEAxMmR2xvYmFsU2lnbiBFeHRlbmRlZCBWYWxpZGF0aW9uIENBIC0gRzIwg" +
-		"gEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDNoUbMUpq4pbR/WNnN2EugcgyXW6aIIMO5PUbc0" +
-		"FxSMPb6WU+FX7DbiLSpXysjSKyr9ZJ4FLYyD/tcaoVbAJDgu2X1WvlPZ37HbCnsk8ArysRe2LDb1r4/m" +
-		"wvAj6ldrvcAAqT8umYROHf+IyAlVRDFvYK5TLFoxuJwe4NcE2fBofN8C6iZmtDimyUxyCuNQPZSY7Ggr" +
-		"Vou9Xk2bTUsDt0F5NDiB0i3KF4r1VjVbNAMoQFGAVqPxq9kx1UBXeHRxmxQJaAFrQCrDI1la93rwnJUy" +
-		"Q88ABeHIu/buYZ4FlGud9mmKE3zWI2DZ7k0JZscUYBR84OSaqOuR5rW5IsbwO2xAgMBAAGjggEvMIIBK" +
-		"zAOBgNVHQ8BAf8EBAMCAQYwEgYDVR0TAQH/BAgwBgEB/wIBADAdBgNVHQ4EFgQUsLBK/Rx1KPgcYaoT9" +
-		"vrBkD1rFqMwRwYDVR0gBEAwPjA8BgRVHSAAMDQwMgYIKwYBBQUHAgEWJmh0dHBzOi8vd3d3Lmdsb2Jhb" +
-		"HNpZ24uY29tL3JlcG9zaXRvcnkvMDYGA1UdHwQvMC0wK6ApoCeGJWh0dHA6Ly9jcmwuZ2xvYmFsc2lnb" +
-		"i5uZXQvcm9vdC1yMi5jcmwwRAYIKwYBBQUHAQEEODA2MDQGCCsGAQUFBzABhihodHRwOi8vb2NzcC5nb" +
-		"G9iYWxzaWduLmNvbS9FeHRlbmRlZFNTTENBMB8GA1UdIwQYMBaAFJviB1dnHB7AagbeWbSaLd/cGYYuM" +
-		"A0GCSqGSIb3DQEBBQUAA4IBAQBfKJAMLekgsjB8iKtABfqxnVwik9WdyjUx+izqHZNZGcSgDfsJQDHaZ" +
-		"FbNUr7nGGbobQmbstuUPu42RR4kVLYgBZO1MRq4ZFfm0ywBTDmWef63BJgS77cuWnf+R/N5mELdFr5ba" +
-		"SvJJsgpaHfmrPZOkBMoZwTsciUf16cKUH84DnIYsSm4/66h1FS4Zk2g1c/T76kyKsWXYtKEzLCg2Jipy" +
-		"jjkzEQ1b2EmsC6Ycvk4Mg20oWIKIWIV3rttkxA2UztKIXvC9b4u9gIT6a5McOkq9h/Di+Wf4I0qKOgZL" +
-		"LNl3ffxb5c1ntuSNWOB1yfkK2Kq+mKhcZKMCha3PbVKZVsCAAO+MIIDujCCAqKgAwIBAgILBAAAAAABD" +
-		"4Ym5g0wDQYJKoZIhvcNAQEFBQAwTDEgMB4GA1UECxMXR2xvYmFsU2lnbiBSb290IENBIC0gUjIxEzARB" +
-		"gNVBAoTCkdsb2JhbFNpZ24xEzARBgNVBAMTCkdsb2JhbFNpZ24wHhcNMDYxMjE1MDgwMDAwWhcNMjExM" +
-		"jE1MDgwMDAwWjBMMSAwHgYDVQQLExdHbG9iYWxTaWduIFJvb3QgQ0EgLSBSMjETMBEGA1UEChMKR2xvY" +
-		"mFsU2lnbjETMBEGA1UEAxMKR2xvYmFsU2lnbjCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBA" +
-		"KbPJA6+Lm8omUVCxKs+IVSbC9N/hHD6ErPLv4dfxn+G07IwXNb9rfF73OX4YJYJkhD10FPe+3t+c4isU" +
-		"oh7SqbKSaZeqKeMWhG8eoLrvozps6yWJQeXSpkqBy+0Hne/ig+1AnwblrjFuTosvNYSuetZfeLQBoZfX" +
-		"klqtTleiDTsvHgMCJiEbKjNS7SgfQx5TfC4LcshytVsW33hoCmEofnTlEnLJGKRILzdC9XZzPnqJworc" +
-		"5HGnRusyMvo4KD0L5CLTfuwNhv2GXqF4G3yYROIXJ/gkwpRl4pazq+r1feqCapgvdzZX99yqWATXgABy" +
-		"Ur6P6TqBwMhAo6CygPCm48CAwEAAaOBnDCBmTAOBgNVHQ8BAf8EBAMCAQYwDwYDVR0TAQH/BAUwAwEB/" +
-		"zAdBgNVHQ4EFgQUm+IHV2ccHsBqBt5ZtJot39wZhi4wNgYDVR0fBC8wLTAroCmgJ4YlaHR0cDovL2Nyb" +
-		"C5nbG9iYWxzaWduLm5ldC9yb290LXIyLmNybDAfBgNVHSMEGDAWgBSb4gdXZxwewGoG3lm0mi3f3BmGL" +
-		"jANBgkqhkiG9w0BAQUFAAOCAQEAmYFThxxol4aR7OBKuEQLq4GsJ0/WwbgcQ3izDJr86iw8bmEbTUsp9" +
-		"Z8FHSbBuOmDAGJFtqkIk7mpM0sYmsL4h4hO291xNBrBVNpGP+DTKqttVCL1OmLNIG+6KYnX3ZHu01yiP" +
-		"qFbQfXf5WRDLenVOavSot+3i9DAgBkcRcAtjOj4LaR0VknFBbVPFd5uRHg5h6h+u/N5GJG79G+dwfCMN" +
-		"YxdAfvDbbnvRG15RjF+Cv6pgsH/76tuIMRQyV+dTZsXjAzlAcmgQWpzU/qlULRuJQ/7TBj0/VLZjmmx6" +
-		"BEP3ojY+x1J96relc8geMJgEtslQIxq/H5COEBkEveegeGTLg==\"}]}"
-
-	Entry0 = "AAAAAAE9pCDoYwAAAAOGMIIDgjCCAuugAwIBAgIKFIT5BQAA" +
-		"AAB9PDANBgkqhkiG9w0BAQUFADBGMQswCQYDVQQGEwJVUzETMBEGA1UEChMKR29vZ2xlIEluYzEiMCAG" +
-		"A1UEAxMZR29vZ2xlIEludGVybmV0IEF1dGhvcml0eTAeFw0xMzAyMjAxMzM0NTFaFw0xMzA2MDcxOTQz" +
-		"MjdaMGkxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBW" +
-		"aWV3MRMwEQYDVQQKEwpHb29nbGUgSW5jMRgwFgYDVQQDEw9tYWlsLmdvb2dsZS5jb20wgZ8wDQYJKoZI" +
-		"hvcNAQEBBQADgY0AMIGJAoGBAOD1FbMyG0IT8JOi2El6RVciBJp4ENfTkpJ2vn/HUq+gjprmUNxLSvcK" +
-		"+D8vBpkq8N41Qv+82PyTuZIB0pg2CJfs07C5+ZAQnwm01DiQjM/j2jKb5GegOBRYngbRkAPSGCufzJy+" +
-		"QBWbd1htqceIREEI/JH7pUGgg90XUQgBddBbAgMBAAGjggFSMIIBTjAdBgNVHSUEFjAUBggrBgEFBQcD" +
-		"AQYIKwYBBQUHAwIwHQYDVR0OBBYEFAgZmgKeyK8PXIGOAU+/5r/xNy5hMB8GA1UdIwQYMBaAFL/AMOv1" +
-		"QxE+Z7qekfv8atrjaxIkMFsGA1UdHwRUMFIwUKBOoEyGSmh0dHA6Ly93d3cuZ3N0YXRpYy5jb20vR29v" +
-		"Z2xlSW50ZXJuZXRBdXRob3JpdHkvR29vZ2xlSW50ZXJuZXRBdXRob3JpdHkuY3JsMGYGCCsGAQUFBwEB" +
-		"BFowWDBWBggrBgEFBQcwAoZKaHR0cDovL3d3dy5nc3RhdGljLmNvbS9Hb29nbGVJbnRlcm5ldEF1dGhv" +
-		"cml0eS9Hb29nbGVJbnRlcm5ldEF1dGhvcml0eS5jcnQwDAYDVR0TAQH/BAIwADAaBgNVHREEEzARgg9t" +
-		"YWlsLmdvb2dsZS5jb20wDQYJKoZIhvcNAQEFBQADgYEAX0lVXCymPXGdCwvn2kpqJw5Q+Hf8gzGhxDG6" +
-		"aMlO5wj2wf8qPWABDRwHdb4mdSmRMuwhzCJhE3PceXLNf3pOlR/Prt18mDY/r6cLwfldIXgTOYkw/uck" +
-		"Gwvb0BwMsEi2FDE/T3d3SOo+lHvqPX9sOVa2uyA0wmIYnbT+5uQY6m0AAA=="
-
-	Entry1 = "AAAAAAE9pe0GcwAAAATWMIIE0jCCA7qgAwIBAgIDAPY6MA0GCS" +
-		"qGSIb3DQEBBQUAMEAxCzAJBgNVBAYTAlVTMRcwFQYDVQQKEw5HZW9UcnVzdCwgSW5jLjEYMBYGA1UEAx" +
-		"MPR2VvVHJ1c3QgU1NMIENBMB4XDTExMTAyMTExMDUwNloXDTEzMTEyMjA0MzI0N1owgc4xKTAnBgNVBA" +
-		"UTIFRqbGZoUTB0cXp3WmtNa0svNXFNdGZqbjJ6aWRVNzRoMQswCQYDVQQGEwJVUzEXMBUGA1UECBMOU2" +
-		"91dGggQ2Fyb2xpbmExEzARBgNVBAcTCkNoYXJsZXN0b24xFzAVBgNVBAoTDkJsYWNrYmF1ZCBJbmMuMR" +
-		"AwDgYDVQQLEwdIb3N0aW5nMTswOQYDVQQDEzJ3d3cuc3RydWxlYXJ0c2NlbnRyZS5wdXJjaGFzZS10aW" +
-		"NrZXRzLW9ubGluZS5jby51azCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAJtkbcF8x3TtIA" +
-		"RHC8BDRtoIAdh9HO9fo+5UUDtoc8f4xq7Rb2xbWOiEX29JqZOdsuucYTuYbbDf0uBYcJpkwhEg4Vg5sk" +
-		"yfp0jAd6pXm1euQ+RiRShzEQYKJ8y4/IjZHttA/8HSzEKWJnuidsYrl/twFhlX5WIZq3BUVQ9GVqGe9n" +
-		"1r2eIFTs6FxYUpaVzTkc6OLh1qSz+cnDDPigLUoUOK/KqN7ybmJxSefJw9WpFW/pIn6M0gFAbu0egFgD" +
-		"ybQ3JwUAEh8ddzpKRCqGq1mdZAKpKFHcqmi5nG5aFD4p1NFmPjDVQXohXLQvwtmwwKS2Zo+tnulPnEe9" +
-		"jjET/f+MUCAwEAAaOCAUQwggFAMB8GA1UdIwQYMBaAFEJ5VBthzVUrPmPVPEhX9Z/7Rc5KMA4GA1UdDw" +
-		"EB/wQEAwIEsDAdBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIwPQYDVR0RBDYwNIIyd3d3LnN0cn" +
-		"VsZWFydHNjZW50cmUucHVyY2hhc2UtdGlja2V0cy1vbmxpbmUuY28udWswPQYDVR0fBDYwNDAyoDCgLo" +
-		"YsaHR0cDovL2d0c3NsLWNybC5nZW90cnVzdC5jb20vY3Jscy9ndHNzbC5jcmwwHQYDVR0OBBYEFDIdT1" +
-		"lJ84lcDpGuBOuAXrP0AlBVMAwGA1UdEwEB/wQCMAAwQwYIKwYBBQUHAQEENzA1MDMGCCsGAQUFBzAChi" +
-		"dodHRwOi8vZ3Rzc2wtYWlhLmdlb3RydXN0LmNvbS9ndHNzbC5jcnQwDQYJKoZIhvcNAQEFBQADggEBAF" +
-		"hFfVTB5NWG3rVaq1jM72uGneGCjGk4qV4uKtEFn+zTJe9W2N/u8V2+mLvWQfDGPr8X5u8KzBOQ+fl6aR" +
-		"xvI71EM3kjMu6UuJkUwXsoocK1c/iVBwWSpqem20t/2Z2n5oIN54QsKZX6tQd9JHQ95YwtlyC7H4VeDK" +
-		"tJZ5x9UhJi8v35C+UgYPmiU5PdeoTdwxCf285FoQL9fBAPbv+EGek1XVaVg2yJKptG2OeM8AaynHsFcK" +
-		"/OcZJtsiGhtu2s9F910OBpoU+lhnPylwxOf4k35JcLaqHJ3BbLUtybbduNqtf3+sYhkvp5IcCypoJy/R" +
-		"k4fHgD8VTNiNWj7KGuHRYAAA=="
-
-	Entry2 = "AAAAAAE9pe0GcwAAAATjMIIE3zCCA8egAwIBAgIUCimKXmNJ+wiDS2zJvg6LC2cvr" +
-		"vQwDQYJKoZIhvcNAQEFBQAwWjELMAkGA1UEBhMCSlAxIzAhBgNVBAoMGkN5YmVydHJ1c3QgSmFwYW4gQ" +
-		"28uLCBMdGQuMSYwJAYDVQQDDB1DeWJlcnRydXN0IEphcGFuIFB1YmxpYyBDQSBHMjAeFw0xMjAzMTkwM" +
-		"zE0MzNaFw0xNTAzMzExNDU5MDBaMIGKMQswCQYDVQQGEwJKUDEOMAwGA1UECBMFVG9reW8xEDAOBgNVB" +
-		"AcTB0NodW8ta3UxHjAcBgNVBAoTFU5ldCBEcmVhbWVycyBDby4sTHRkLjEeMBwGA1UECxMVTWVnYSBNZ" +
-		"WRpYSBEZXBhcnRtZW50MRkwFwYDVQQDExB3d3cubmV0a2VpYmEuY29tMIIBIjANBgkqhkiG9w0BAQEFA" +
-		"AOCAQ8AMIIBCgKCAQEA2to03F4GdlRiGljXrSmT08/WrY59UWaoe/H4wQN6S5eQKVtaLjBWUF5Ro4sm/" +
-		"kND7aufyDqXUePxiZkphupV+VO7PeKp9e5yqEijK4z2XoFQhrCH5kkn1GDrTNzonxyAQtiBJ/k6gVTJV" +
-		"5fn4s7I6bZ2aXiJLIlTCFwMDNkrB3fj9py86WwymXaypSHkmo9Sx6PFiIOwPH6vXRK4UyAfFpXPiLGJE" +
-		"NEWOY2AtzMJiIoupgAuyvmoY0G0Vk34mA9gOIOrKE2QmVSR3AtA31UpNZ33qvimfz96rHtCeiZj5HNxZ" +
-		"RBMGBsHTlu5e49xypiYCCV41jQvmfZOShan3R3o2QIDAQABo4IBajCCAWYwCQYDVR0TBAIwADCBuAYDV" +
-		"R0gBIGwMIGtMIGqBggqgwiMmxEBATCBnTBXBggrBgEFBQcCAjBLGklGb3IgbW9yZSBkZXRhaWxzLCBwb" +
-		"GVhc2UgdmlzaXQgb3VyIHdlYnNpdGUgaHR0cHM6Ly93d3cuY3liZXJ0cnVzdC5uZS5qcCAuMEIGCCsGA" +
-		"QUFBwIBFjZodHRwczovL3d3dy5jeWJlcnRydXN0Lm5lLmpwL3NzbC9yZXBvc2l0b3J5L2luZGV4Lmh0b" +
-		"WwwGwYDVR0RBBQwEoIQd3d3Lm5ldGtlaWJhLmNvbTALBgNVHQ8EBAMCBaAwHQYDVR0lBBYwFAYIKwYBB" +
-		"QUHAwEGCCsGAQUFBwMCMFUGA1UdHwROMEwwSqBIoEaGRGh0dHA6Ly9zdXJlc2VyaWVzLWNybC5jeWJlc" +
-		"nRydXN0Lm5lLmpwL1N1cmVTZXJ2ZXIvY3RqcHViY2FnMi9jZHAuY3JsMA0GCSqGSIb3DQEBBQUAA4IBA" +
-		"QAw8sXP2ecKp5QGXtzcxKwkkznqocaddzoG69atcyzwshySLfo0ElMHP5WG9TpVrb6XSh2a1edwduAWB" +
-		"VAHQsHi4bt4wX9e9DBMnQx/jelcJevABQsXJPGc86diisXYDkHKQesi+8CvWvE0GmbVJRoq0RDo14WAS" +
-		"QszuqTNW993walCzNTg88s7MniFgmgFd8n31SVls6QhY2Fmlr13JLDtzVDQDbj6MCPuwG8DdmR1bCM/u" +
-		"gcnk0a7ZVy3d4yTjdhKpocToFklhHtHg0AINghPXIqU0njjUsy3ujNYIYo1TaZ3835Bo0lDwdvKK68Jk" +
-		"a24Cfcm+vfUfHKB56sIzquxAAA="
-
-	Entry3 = "AAAAAAE9pe0GdAAAAAWmMIIFojCCBIqgAwIBAgISESE1Pz3s7WxTnxbUXmwjh7Q" +
-		"hMA0GCSqGSIb3DQEBBQUAMFkxCzAJBgNVBAYTAkJFMRkwFwYDVQQKExBHbG9iYWxTaWduIG52LXNhMS8" +
-		"wLQYDVQQDEyZHbG9iYWxTaWduIEV4dGVuZGVkIFZhbGlkYXRpb24gQ0EgLSBHMjAeFw0xMTEwMTAxNDE" +
-		"2MzdaFw0xMzEwMTAxNDE2MzdaMIHpMR0wGwYDVQQPDBRQcml2YXRlIE9yZ2FuaXphdGlvbjERMA8GA1U" +
-		"EBRMIMDIzOTczNzMxEzARBgsrBgEEAYI3PAIBAxMCR0IxCzAJBgNVBAYTAkdCMRQwEgYDVQQIEwtPeGZ" +
-		"vcmRzaGlyZTEPMA0GA1UEBxMGT3hmb3JkMRgwFgYDVQQJEw9CZWF1bW9udCBTdHJlZXQxCzAJBgNVBAs" +
-		"TAklUMSMwIQYDVQQKExpUaGUgT3hmb3JkIFBsYXlob3VzZSBUcnVzdDEgMB4GA1UEAxMXd3d3Lm94Zm9" +
-		"yZHBsYXlob3VzZS5jb20wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC2VgUJx+QIlEn4vMq" +
-		"5YajmJEk1Lv5Kwc95oqEb2EbQMVhCJct0OA0wKJbnFGaNIo5DJHIouuz98JoHixMB54EwZi5I64wvqyq" +
-		"1ohquTrUk4CS/4Y4odDw61dIqE2UZCxJYui9y4fTkptjNWmTaytw3LpGkt4Yx+AIcB+Oc7c7IPjTZEvR" +
-		"6L5lK9WqfZmrS/Y+Tgflz6W79rpgUb2CyfqLUX0Hxohw5/Zp197y4XhOwou/f+Vaju3j/Gt1WBAbWrKx" +
-		"pKAROVesfqT/H7Y/iOJ6jkPt5rqrLosStbGMpPUNNGRY0a8F1HBAUUzjTrRAE6CGZAPgBbcloYFc1zUs" +
-		"xPLcZAgMBAAGjggHRMIIBzTAOBgNVHQ8BAf8EBAMCBaAwTAYDVR0gBEUwQzBBBgkrBgEEAaAyAQEwNDA" +
-		"yBggrBgEFBQcCARYmaHR0cHM6Ly93d3cuZ2xvYmFsc2lnbi5jb20vcmVwb3NpdG9yeS8wNwYDVR0RBDA" +
-		"wLoIXd3d3Lm94Zm9yZHBsYXlob3VzZS5jb22CE294Zm9yZHBsYXlob3VzZS5jb20wCQYDVR0TBAIwADA" +
-		"dBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIwPwYDVR0fBDgwNjA0oDKgMIYuaHR0cDovL2NybC5" +
-		"nbG9iYWxzaWduLmNvbS9ncy9nc2V4dGVuZHZhbGcyLmNybDCBiAYIKwYBBQUHAQEEfDB6MEEGCCsGAQU" +
-		"FBzAChjVodHRwOi8vc2VjdXJlLmdsb2JhbHNpZ24uY29tL2NhY2VydC9nc2V4dGVuZHZhbGcyLmNydDA" +
-		"1BggrBgEFBQcwAYYpaHR0cDovL29jc3AyLmdsb2JhbHNpZ24uY29tL2dzZXh0ZW5kdmFsZzIwHQYDVR0" +
-		"OBBYEFNp+MVYdHILBfTE6JM8O6Ul+Xwx3MB8GA1UdIwQYMBaAFLCwSv0cdSj4HGGqE/b6wZA9axajMA0" +
-		"GCSqGSIb3DQEBBQUAA4IBAQALHuvJlSvi3OqKwDiXBrsx0zb7DGGLAzwQCyr60iwJuc1S8SkWURlM0CK" +
-		"Iq0Qupj5vYIAY2g6gDWxdf/JFMh/Rxzv90JE/xZm9YlnMh2Evz3glLLQ5y2x1ddc0RU9YFoeOmJcgDOR" +
-		"OI8aQvhcn9Jdj1Yk7BkKhbQv/pM9ETqtSro3Xbv/qcwPTG/oRysMCrN/DUxedUr95dFjrS3zpo+6Hr7J" +
-		"abTcaAak40ksY+vHEQWbqm4YluJ4/c+6qfpsTTUih6//7xs92UxObeSMtWPaxySxedXekTPYrGt5X8XX" +
-		"PYoTKJnuJrxlkEBv0K7wozbn5Km2dpOqCAaqbf8WKa3mvAAA="
-)
-
-func makeParent(a []byte, b []byte) [sha256.Size]byte {
-	if len(a) != len(b) {
-		log.Fatalf("a & b are different lengths: %d vs %d", len(a), len(b))
-	}
-	if len(a) != sha256.Size {
-		log.Fatalf("a & b incorrect length for Sha256 hash")
-	}
-	var r [sha256.Size * 2]byte
-	copy(r[0:31], a)
-	copy(r[32:63], b)
-	return sha256.Sum256(r[:])
-}
-
-func CalcRootHash() {
-	e0, err := base64.StdEncoding.DecodeString(Entry0)
-	if err != nil {
-		log.Fatal(err)
-	}
-	h0 := sha256.Sum256(e0)
-	e1, err := base64.StdEncoding.DecodeString(Entry1)
-	if err != nil {
-		log.Fatal(err)
-	}
-	h1 := sha256.Sum256(e1)
-	e2, err := base64.StdEncoding.DecodeString(Entry2)
-	if err != nil {
-		log.Fatal(err)
-	}
-	h2 := sha256.Sum256(e2)
-	e3, err := base64.StdEncoding.DecodeString(Entry3)
-	if err != nil {
-		log.Fatal(err)
-	}
-	h3 := sha256.Sum256(e3)
-
-	hash01 := makeParent(h0[:], h1[:])
-	hash23 := makeParent(h2[:], h3[:])
-	root := makeParent(hash01[:], hash23[:])
-	log.Println(base64.StdEncoding.EncodeToString(root[:]))
-}
diff --git a/ct/serialization.go b/ct/serialization.go
index 56e0ec9..a80048f 100644
--- a/ct/serialization.go
+++ b/ct/serialization.go
@@ -80,7 +80,7 @@ func readVarBytes(r io.Reader, numLenBytes int) ([]byte, error) {
 		return nil, err
 	}
 	data := make([]byte, l)
-	if n, err := io.ReadFull(r, data);  err != nil {
+	if n, err := io.ReadFull(r, data); err != nil {
 		if err == io.EOF || err == io.ErrUnexpectedEOF {
 			return nil, fmt.Errorf("short read: expected %d but got %d", l, n)
 		}
@@ -145,6 +145,9 @@ func ReadTimestampedEntryInto(r io.Reader, t *TimestampedEntry) error {
 		return fmt.Errorf("unknown EntryType: %d", t.EntryType)
 	}
 	t.Extensions, err = readVarBytes(r, ExtensionsLengthBytes)
+	if err != nil {
+		return err
+	}
 	return nil
 }
 
diff --git a/ct/serialization_test.go b/ct/serialization_test.go
deleted file mode 100644
index 4b425d2..0000000
--- a/ct/serialization_test.go
+++ /dev/null
@@ -1,445 +0,0 @@
-package ct
-
-import (
-	"bytes"
-	"encoding/hex"
-	"strings"
-	"testing"
-
-	"github.com/stretchr/testify/assert"
-)
-
-// Returns a "variable-length" byte buffer containing |dataSize| data bytes
-// along with an appropriate header.
-// The buffer format is [header][data]
-// where [header] is a bigendian representation of the size of [data].
-// sizeof([header]) is the minimum number of bytes necessary to represent
-// |dataSize|.
-func createVarByteBuf(dataSize uint64) []byte {
-	lenBytes := uint64(0)
-	for x := dataSize; x > 0; x >>= 8 {
-		lenBytes++
-	}
-	buf := make([]byte, dataSize+lenBytes)
-	for t, x := dataSize, uint64(0); x < lenBytes; x++ {
-		buf[lenBytes-x-1] = byte(t)
-		t >>= 8
-	}
-	for x := uint64(0); x < dataSize; x++ {
-		buf[lenBytes+x] = byte(x)
-	}
-	return buf
-}
-
-func TestCreateVarByteBuf(t *testing.T) {
-	buf := createVarByteBuf(56)
-	if len(buf) != 56+1 {
-		t.Errorf("Wrong buffer size returned, expected %d", 56+1)
-	}
-	if buf[0] != 56 {
-		t.Errorf("Buffer has incorrect size header %02x", buf[0])
-	}
-	buf = createVarByteBuf(256)
-	if len(buf) != 256+2 {
-		t.Errorf("Wrong buffer size returned, expected %d", 256+2)
-	}
-	if buf[0] != 0x01 || buf[1] != 0x00 {
-		t.Errorf("Buffer has incorrect size header %02x,%02x", buf[0], buf[1])
-	}
-	buf = createVarByteBuf(65536)
-	if len(buf) != 65536+3 {
-		t.Errorf("Wrong buffer size returned, expected %d", 65536+3)
-	}
-	if buf[0] != 0x01 || buf[1] != 0x00 || buf[2] != 0x00 {
-		t.Errorf("Buffer has incorrect size header %02x,%02x,%02x", buf[0], buf[1], buf[2])
-	}
-}
-
-func TestWriteVarBytes(t *testing.T) {
-	const dataSize = 453641
-	data := make([]byte, dataSize)
-	for x := uint64(0); x < dataSize; x++ {
-		data[x] = byte(x)
-	}
-
-	var buf bytes.Buffer
-	if err := writeVarBytes(&buf, data, 3); err != nil {
-		t.Errorf("Failed to write data to buffer: %v", err)
-	}
-	if buf.Len() != dataSize+3 {
-		t.Errorf("Wrong buffer size created, expected %d but got %d", dataSize+3, buf.Len())
-	}
-	b := buf.Bytes()
-	if b[0] != 0x06 || b[1] != 0xec || b[2] != 0x09 {
-		t.Errorf("Buffer has incorrect size header %02x,%02x,%02x", b[0], b[1], b[2])
-	}
-	if bytes.Compare(data, b[3:]) != 0 {
-		t.Errorf("Buffer data corrupt")
-	}
-}
-
-func TestReadVarBytes(t *testing.T) {
-	const BufSize = 453641
-	r := createVarByteBuf(BufSize)
-	buf, err := readVarBytes(bytes.NewReader(r), 3)
-	if err != nil {
-		t.Fatal(err)
-	}
-	if len(buf) != BufSize {
-		t.Fatalf("Incorrect size buffer returned, expected %d, got %d", BufSize, len(buf))
-	}
-	for i := range buf {
-		if buf[i] != byte(i) {
-			t.Fatalf("Buffer contents incorrect, expected %02x, got %02x.", byte(i), buf[i])
-		}
-	}
-}
-
-func TestReadVarBytesTooLarge(t *testing.T) {
-	_, err := readVarBytes(nil, 9)
-	if err == nil || !strings.Contains(err.Error(), "too large") {
-		t.Fatal("readVarBytes didn't fail when trying to read too large a data size: ", err)
-	}
-}
-
-func TestReadVarBytesZero(t *testing.T) {
-	_, err := readVarBytes(nil, 0)
-	if err == nil || !strings.Contains(err.Error(), "should be > 0") {
-		t.Fatal("readVarBytes didn't fail when trying to read zero length data")
-	}
-}
-
-func TestReadVarBytesShortRead(t *testing.T) {
-	r := make([]byte, 2)
-	r[0] = 2 // but only 1 byte available...
-	_, err := readVarBytes(bytes.NewReader(r), 1)
-	if err == nil || !strings.Contains(err.Error(), "short read") {
-		t.Fatal("readVarBytes didn't fail with a short read")
-	}
-}
-
-func TestReadTimestampedEntryIntoChecksEntryType(t *testing.T) {
-	buffer := []byte{0, 1, 2, 3, 4, 5, 6, 7, 0x45, 0x45}
-	var tse TimestampedEntry
-	err := ReadTimestampedEntryInto(bytes.NewReader(buffer), &tse)
-	if err == nil || !strings.Contains(err.Error(), "unknown EntryType") {
-		t.Fatal("Failed to check EntryType - accepted 0x4545")
-	}
-}
-
-func TestCheckCertificateFormatOk(t *testing.T) {
-	if err := checkCertificateFormat([]byte("I'm a cert, honest.")); err != nil {
-		t.Fatalf("checkCertificateFormat objected to valid format: %v", err)
-	}
-}
-
-func TestCheckCertificateFormatZeroSize(t *testing.T) {
-	if checkCertificateFormat([]byte("")) == nil {
-		t.Fatalf("checkCertificateFormat failed to object to zero length cert")
-	}
-}
-
-func TestCheckCertificateFormatTooBig(t *testing.T) {
-	big := make([]byte, MaxCertificateLength+1)
-	if checkCertificateFormat(big) == nil {
-		t.Fatalf("checkCertificateFormat failed to object to cert of length %d (max %d)", len(big), MaxCertificateLength)
-	}
-}
-
-func TestCheckExtensionsFormatOk(t *testing.T) {
-	if err := checkExtensionsFormat([]byte("I'm an extension, honest.")); err != nil {
-		t.Fatalf("checkExtensionsFormat objected to valid format: %v", err)
-	}
-}
-
-func TestCheckExtensionsFormatTooBig(t *testing.T) {
-	big := make([]byte, MaxExtensionsLength+1)
-	if checkExtensionsFormat(big) == nil {
-		t.Fatalf("checkExtensionsFormat failed to object to extension of length %d (max %d)", len(big), MaxExtensionsLength)
-	}
-}
-
-const (
-	defaultSCTLogIDString          string = "iamapublickeyshatwofivesixdigest"
-	defaultSCTTimestamp            uint64 = 1234
-	defaultSCTSignatureString      string = "\x04\x03\x00\x09signature"
-	defaultCertifictateString      string = "certificate"
-	defaultPrecertString           string = "precert"
-	defaultPrecertIssuerHashString string = "iamapublickeyshatwofivesixdigest"
-	defaultPrecertTBSString        string = "tbs"
-
-	defaultCertificateSCTSignatureInputHexString string =
-	// version, 1 byte
-	"00" +
-		// signature type, 1 byte
-		"00" +
-		// timestamp, 8 bytes
-		"00000000000004d2" +
-		// entry type, 2 bytes
-		"0000" +
-		// leaf certificate length, 3 bytes
-		"00000b" +
-		// leaf certificate, 11 bytes
-		"6365727469666963617465" +
-		// extensions length, 2 bytes
-		"0000" +
-		// extensions, 0 bytes
-		""
-
-	defaultPrecertSCTSignatureInputHexString string =
-	// version, 1 byte
-	"00" +
-		// signature type, 1 byte
-		"00" +
-		// timestamp, 8 bytes
-		"00000000000004d2" +
-		// entry type, 2 bytes
-		"0001" +
-		// issuer key hash, 32 bytes
-		"69616d617075626c69636b657973686174776f66697665736978646967657374" +
-		// tbs certificate length, 3 bytes
-		"000003" +
-		// tbs certificate, 3 bytes
-		"746273" +
-		// extensions length, 2 bytes
-		"0000" +
-		// extensions, 0 bytes
-		""
-
-	defaultSTHSignedHexString string =
-	// version, 1 byte
-	"00" +
-		// signature type, 1 byte
-		"01" +
-		// timestamp, 8 bytes
-		"0000000000000929" +
-		// tree size, 8 bytes
-		"0000000000000006" +
-		// root hash, 32 bytes
-		"696d757374626565786163746c7974686972747974776f62797465736c6f6e67"
-
-	defaultSCTHexString string =
-	// version, 1 byte
-	"00" +
-		// keyid, 32 bytes
-		"69616d617075626c69636b657973686174776f66697665736978646967657374" +
-		// timestamp, 8 bytes
-		"00000000000004d2" +
-		// extensions length, 2 bytes
-		"0000" +
-		// extensions, 0 bytes
-		// hash algo, sig algo, 2 bytes
-		"0403" +
-		// signature length, 2 bytes
-		"0009" +
-		// signature, 9 bytes
-		"7369676e6174757265"
-)
-
-func defaultSCTLogID() SHA256Hash {
-	var id SHA256Hash
-	copy(id[:], defaultSCTLogIDString)
-	return id
-}
-
-func defaultSCTSignature() DigitallySigned {
-	ds, err := UnmarshalDigitallySigned(bytes.NewReader([]byte(defaultSCTSignatureString)))
-	if err != nil {
-		panic(err)
-	}
-	return *ds
-}
-
-func defaultSCT() SignedCertificateTimestamp {
-	return SignedCertificateTimestamp{
-		SCTVersion: V1,
-		LogID:      defaultSCTLogID(),
-		Timestamp:  defaultSCTTimestamp,
-		Extensions: []byte{},
-		Signature:  defaultSCTSignature()}
-}
-
-func defaultCertificate() []byte {
-	return []byte(defaultCertifictateString)
-}
-
-func defaultExtensions() []byte {
-	return []byte{}
-}
-
-func defaultCertificateSCTSignatureInput(t *testing.T) []byte {
-	r, err := hex.DecodeString(defaultCertificateSCTSignatureInputHexString)
-	if err != nil {
-		t.Fatalf("failed to decode defaultCertificateSCTSignatureInputHexString: %v", err)
-	}
-	return r
-}
-
-func defaultCertificateLogEntry() LogEntry {
-	return LogEntry{
-		Index: 1,
-		Leaf: MerkleTreeLeaf{
-			Version:  V1,
-			LeafType: TimestampedEntryLeafType,
-			TimestampedEntry: TimestampedEntry{
-				Timestamp: defaultSCTTimestamp,
-				EntryType: X509LogEntryType,
-				X509Entry: defaultCertificate(),
-			},
-		},
-	}
-}
-
-func defaultPrecertSCTSignatureInput(t *testing.T) []byte {
-	r, err := hex.DecodeString(defaultPrecertSCTSignatureInputHexString)
-	if err != nil {
-		t.Fatalf("failed to decode defaultPrecertSCTSignatureInputHexString: %v", err)
-	}
-	return r
-}
-
-func defaultPrecertTBS() []byte {
-	return []byte(defaultPrecertTBSString)
-}
-
-func defaultPrecertIssuerHash() [issuerKeyHashLength]byte {
-	var b [issuerKeyHashLength]byte
-	copy(b[:], []byte(defaultPrecertIssuerHashString))
-	return b
-}
-
-func defaultPrecertLogEntry() LogEntry {
-	return LogEntry{
-		Index: 1,
-		Leaf: MerkleTreeLeaf{
-			Version:  V1,
-			LeafType: TimestampedEntryLeafType,
-			TimestampedEntry: TimestampedEntry{
-				Timestamp: defaultSCTTimestamp,
-				EntryType: PrecertLogEntryType,
-				PrecertEntry: PreCert{
-					IssuerKeyHash:  defaultPrecertIssuerHash(),
-					TBSCertificate: defaultPrecertTBS(),
-				},
-			},
-		},
-	}
-}
-
-func defaultSTH() SignedTreeHead {
-	var root SHA256Hash
-	copy(root[:], "imustbeexactlythirtytwobyteslong")
-	return SignedTreeHead{
-		TreeSize:       6,
-		Timestamp:      2345,
-		SHA256RootHash: root,
-		TreeHeadSignature: DigitallySigned{
-			HashAlgorithm:      SHA256,
-			SignatureAlgorithm: ECDSA,
-			Signature:          []byte("tree_signature"),
-		},
-	}
-}
-
-//////////////////////////////////////////////////////////////////////////////////
-// Tests start here:
-//////////////////////////////////////////////////////////////////////////////////
-
-func TestSerializeV1SCTSignatureInputForCertificateKAT(t *testing.T) {
-	serialized, err := SerializeSCTSignatureInput(defaultSCT(), defaultCertificateLogEntry())
-	if err != nil {
-		t.Fatalf("Failed to serialize SCT for signing: %v", err)
-	}
-	if bytes.Compare(serialized, defaultCertificateSCTSignatureInput(t)) != 0 {
-		t.Fatalf("Serialized certificate signature input doesn't match expected answer:\n%v\n%v", serialized, defaultCertificateSCTSignatureInput(t))
-	}
-}
-
-func TestSerializeV1SCTSignatureInputForPrecertKAT(t *testing.T) {
-	serialized, err := SerializeSCTSignatureInput(defaultSCT(), defaultPrecertLogEntry())
-	if err != nil {
-		t.Fatalf("Failed to serialize SCT for signing: %v", err)
-	}
-	if bytes.Compare(serialized, defaultPrecertSCTSignatureInput(t)) != 0 {
-		t.Fatalf("Serialized precertificate signature input doesn't match expected answer:\n%v\n%v", serialized, defaultPrecertSCTSignatureInput(t))
-	}
-}
-
-func TestSerializeV1STHSignatureKAT(t *testing.T) {
-	b, err := SerializeSTHSignatureInput(defaultSTH())
-	if err != nil {
-		t.Fatalf("Failed to serialize defaultSTH: %v", err)
-	}
-	if bytes.Compare(b, mustDehex(t, defaultSTHSignedHexString)) != 0 {
-		t.Fatalf("defaultSTH incorrectly serialized, expected:\n%v\ngot:\n%v", mustDehex(t, defaultSTHSignedHexString), b)
-	}
-}
-
-func TestMarshalDigitallySigned(t *testing.T) {
-	b, err := MarshalDigitallySigned(
-		DigitallySigned{
-			HashAlgorithm:      SHA512,
-			SignatureAlgorithm: ECDSA,
-			Signature:          []byte("signature")})
-	if err != nil {
-		t.Fatalf("Failed to marshal DigitallySigned struct: %v", err)
-	}
-	if b[0] != byte(SHA512) {
-		t.Fatalf("Expected b[0] == SHA512, but found %v", HashAlgorithm(b[0]))
-	}
-	if b[1] != byte(ECDSA) {
-		t.Fatalf("Expected b[1] == ECDSA, but found %v", SignatureAlgorithm(b[1]))
-	}
-	if b[2] != 0x00 || b[3] != 0x09 {
-		t.Fatalf("Found incorrect length bytes, expected (0x00, 0x09) found %v", b[2:3])
-	}
-	if string(b[4:]) != "signature" {
-		t.Fatalf("Found incorrect signature bytes, expected %v, found %v", []byte("signature"), b[4:])
-	}
-}
-
-func TestUnmarshalDigitallySigned(t *testing.T) {
-	ds, err := UnmarshalDigitallySigned(bytes.NewReader([]byte("\x01\x02\x00\x0aSiGnAtUrE!")))
-	if err != nil {
-		t.Fatalf("Failed to unmarshal DigitallySigned: %v", err)
-	}
-	if ds.HashAlgorithm != MD5 {
-		t.Fatalf("Expected HashAlgorithm %v, but got %v", MD5, ds.HashAlgorithm)
-	}
-	if ds.SignatureAlgorithm != DSA {
-		t.Fatalf("Expected SignatureAlgorithm %v, but got %v", DSA, ds.SignatureAlgorithm)
-	}
-	if string(ds.Signature) != "SiGnAtUrE!" {
-		t.Fatalf("Expected Signature %v, but got %v", []byte("SiGnAtUrE!"), ds.Signature)
-	}
-}
-
-func TestSCTSerializationRoundTrip(t *testing.T) {
-	b, err := SerializeSCT(defaultSCT())
-	if err != nil {
-		t.Fatalf("Failed to serialize SCT: %v", err)
-	}
-	sct, err := DeserializeSCT(bytes.NewReader(b))
-	if err != nil {
-		t.Fatalf("Failed to deserialize SCT: %v", err)
-	}
-	assert.Equal(t, defaultSCT(), *sct)
-}
-
-func TestSerializeSCT(t *testing.T) {
-	b, err := SerializeSCT(defaultSCT())
-	if err != nil {
-		t.Fatalf("Failed to serialize SCT: %v", err)
-	}
-	if bytes.Compare(mustDehex(t, defaultSCTHexString), b) != 0 {
-		t.Fatalf("Serialized SCT differs from expected KA. Expected:\n%v\nGot:\n%v", mustDehex(t, defaultSCTHexString), b)
-	}
-}
-
-func TestDeserializeSCT(t *testing.T) {
-	sct, err := DeserializeSCT(bytes.NewReader(mustDehex(t, defaultSCTHexString)))
-	if err != nil {
-		t.Fatalf("Failed to deserialize SCT: %v", err)
-	}
-	assert.Equal(t, defaultSCT(), *sct)
-}
diff --git a/ct/signatures.go b/ct/signatures.go
index 600db24..1d8f70e 100644
--- a/ct/signatures.go
+++ b/ct/signatures.go
@@ -10,14 +10,14 @@ import (
 	"encoding/asn1"
 	"encoding/pem"
 	"errors"
-	"flag"
+	//"flag"
 	"fmt"
 	"log"
 	"math/big"
 )
 
-var allowVerificationWithNonCompliantKeys = flag.Bool("allow_verification_with_non_compliant_keys", false,
-	"Allow a SignatureVerifier to use keys which are technically non-compliant with RFC6962.")
+var allowVerificationWithNonCompliantKeys = false //flag.Bool("allow_verification_with_non_compliant_keys", false,
+//"Allow a SignatureVerifier to use keys which are technically non-compliant with RFC6962.")
 
 // PublicKeyFromPEM parses a PEM formatted block and returns the public key contained within and any remaining unread bytes, or an error.
 func PublicKeyFromPEM(b []byte) (crypto.PublicKey, SHA256Hash, []byte, error) {
@@ -40,7 +40,7 @@ func NewSignatureVerifier(pk crypto.PublicKey) (*SignatureVerifier, error) {
 	case *rsa.PublicKey:
 		if pkType.N.BitLen() < 2048 {
 			e := fmt.Errorf("public key is RSA with < 2048 bits (size:%d)", pkType.N.BitLen())
-			if !(*allowVerificationWithNonCompliantKeys) {
+			if !(allowVerificationWithNonCompliantKeys) {
 				return nil, e
 			}
 			log.Printf("WARNING: %v", e)
@@ -49,7 +49,7 @@ func NewSignatureVerifier(pk crypto.PublicKey) (*SignatureVerifier, error) {
 		params := *(pkType.Params())
 		if params != *elliptic.P256().Params() {
 			e := fmt.Errorf("public is ECDSA, but not on the P256 curve")
-			if !(*allowVerificationWithNonCompliantKeys) {
+			if !(allowVerificationWithNonCompliantKeys) {
 				return nil, e
 			}
 			log.Printf("WARNING: %v", e)
diff --git a/ct/signatures_test.go b/ct/signatures_test.go
deleted file mode 100644
index dd06ce6..0000000
--- a/ct/signatures_test.go
+++ /dev/null
@@ -1,463 +0,0 @@
-package ct
-
-import (
-	"bytes"
-	"crypto"
-	"crypto/dsa"
-	"crypto/ecdsa"
-	"crypto/elliptic"
-	"crypto/rand"
-	"crypto/rsa"
-	"encoding/hex"
-	mrand "math/rand"
-	"testing"
-)
-
-const (
-	sigTestDERCertString = "308202ca30820233a003020102020102300d06092a864886f70d01010505003055310b300" +
-		"906035504061302474231243022060355040a131b4365727469666963617465205472616e" +
-		"73706172656e6379204341310e300c0603550408130557616c65733110300e06035504071" +
-		"3074572772057656e301e170d3132303630313030303030305a170d323230363031303030" +
-		"3030305a3052310b30090603550406130247423121301f060355040a13184365727469666" +
-		"963617465205472616e73706172656e6379310e300c0603550408130557616c6573311030" +
-		"0e060355040713074572772057656e30819f300d06092a864886f70d010101050003818d0" +
-		"030818902818100b8742267898b99ba6bfd6e6f7ada8e54337f58feb7227c46248437ba5f" +
-		"89b007cbe1ecb4545b38ed23fddbf6b9742cafb638157f68184776a1b38ab39318ddd7344" +
-		"89b4d750117cd83a220a7b52f295d1e18571469a581c23c68c57d973761d9787a091fb586" +
-		"4936b166535e21b427e3c6d690b2e91a87f36b7ec26f59ce53b50203010001a381ac3081a" +
-		"9301d0603551d0e041604141184e1187c87956dffc31dd0521ff564efbeae8d307d060355" +
-		"1d23047630748014a3b8d89ba2690dfb48bbbf87c1039ddce56256c6a159a4573055310b3" +
-		"00906035504061302474231243022060355040a131b436572746966696361746520547261" +
-		"6e73706172656e6379204341310e300c0603550408130557616c65733110300e060355040" +
-		"713074572772057656e82010030090603551d1304023000300d06092a864886f70d010105" +
-		"050003818100292ecf6e46c7a0bcd69051739277710385363341c0a9049637279707ae23c" +
-		"c5128a4bdea0d480ed0206b39e3a77a2b0c49b0271f4140ab75c1de57aba498e09459b479" +
-		"cf92a4d5d5dd5cbe3f0a11e25f04078df88fc388b61b867a8de46216c0e17c31fc7d8003e" +
-		"cc37be22292f84242ab87fb08bd4dfa3c1b9ce4d3ee6667da"
-
-	sigTestSCTTimestamp = 1348589665525
-
-	sigTestCertSCTSignatureEC = "0403" + "0048" +
-		"3046022100d3f7690e7ee80d9988a54a3821056393e9eb0c686ad67fbae3686c888fb1a3c" +
-		"e022100f9a51c6065bbba7ad7116a31bea1c31dbed6a921e1df02e4b403757fae3254ae"
-
-	sigTestEC256PrivateKeyPEM = "-----BEGIN EC PRIVATE KEY-----\n" +
-		"MHcCAQEEIG8QAquNnarN6Ik2cMIZtPBugh9wNRe0e309MCmDfBGuoAoGCCqGSM49\n" +
-		"AwEHoUQDQgAES0AfBkjr7b8b19p5Gk8plSAN16wWXZyhYsH6FMCEUK60t7pem/ck\n" +
-		"oPX8hupuaiJzJS0ZQ0SEoJGlFxkUFwft5g==\n" +
-		"-----END EC PRIVATE KEY-----\n"
-
-	sigTestEC256PublicKeyPEM = "-----BEGIN PUBLIC KEY-----\n" +
-		"MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAES0AfBkjr7b8b19p5Gk8plSAN16wW\n" +
-		"XZyhYsH6FMCEUK60t7pem/ckoPX8hupuaiJzJS0ZQ0SEoJGlFxkUFwft5g==\n" +
-		"-----END PUBLIC KEY-----\n"
-
-	sigTestEC256PublicKey2PEM = "-----BEGIN PUBLIC KEY-----\n" +
-		"MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEfahLEimAoz2t01p3uMziiLOl/fHT\n" +
-		"DM0YDOhBRuiBARsV4UvxG2LdNgoIGLrtCzWE0J5APC2em4JlvR8EEEFMoA==\n" +
-		"-----END PUBLIC KEY-----\n"
-
-	sigTestRSAPrivateKeyPEM = "-----BEGIN RSA PRIVATE KEY-----\n" +
-		"MIIEpAIBAAKCAQEAxy7llbig9kL0wo5AyV1FhmJLvWTWxzAMwGdhG1h1CqQpaWut\n" +
-		"XGI9WKRDJSZ/9dr9vgvqdRX2QsnUdJbJ3cz5Z1ie/RdT/mSVO7ZEqvJS93PIHnqu\n" +
-		"FZXxNnIerGnQ7guC+Zm9BlQ2DIhYpnvVRRVyD/D8KT92R7qOu3JACduoMrF1synk\n" +
-		"nL8rb8lZvCej8tbhJ38yibMWTmkxsFS+a29Xqk8pkhgwIwvUZqcMaqZo+4/iCuKL\n" +
-		"bVc85V98SvbcnmsX3gqeQnyRtxlctlclcbvHmJt5U+3yF1UtcuiyZf1gjcAqnOgv\n" +
-		"ZZYzsodXi0KGV7NRQhTPvwH0C8In2qL+v4qWAQIDAQABAoIBAQCdyqsaNw9cx6I6\n" +
-		"1pLAcuF3GjvCKDZ1ybzwV3V4QlVGPtKHr0PBIhpTNJ30ulE4pWnKuoncg695LYbf\n" +
-		"be0xhwY1NuGMwoRJzcjjavtvKVVMry5j5vAuLYDPjwx5rcJUMk5qCb7TWrcOqp0A\n" +
-		"Fq3XcqvPsSsyShIbtNEJ8fKFXLwcm07bGDgOacrXieP/nL2Hh6joeAJLgnKAOtU5\n" +
-		"qw6fdweYGThfhdCwaBq0WSaxj6nMG3Q40bHurvdOAtU1GF2a27BGsnfKFyKlvk8+\n" +
-		"K7tCc4oXo4WWEUuOwu6SmB1kYIZLf258B0PFQJwN8OA3Mbek+F4Bm3DzWe1aLS5L\n" +
-		"wpOYxrq5AoGBAO0sGq+ic+9K81FvBBUYXiFtt9rv3nU9jZhjqpfvdqRs2KXt8ldz\n" +
-		"2M+JCRFHt8rLDEutK/NZuZcq3wAXS3EeMIp33QZ7Yuj5LeG9eD0asX8yq51Toua3\n" +
-		"gRDbiR00Vz/3BINM8JufN/sPLoUiuAV5mlOTktZ8+z7ixO4ravMB1Z9HAoGBANb+\n" +
-		"w+1Hre8+4JEnl3yRh1UNDmbhCc2tRxCD4QJyb9qaOl2IK1QXuDcwD8owdenwOrAi\n" +
-		"I5yKx7y4oKNfdSrP2wlAGS/GAEL5f+JhLtv2cNoKNxMXNRgYfJAQeMKBjINdECia\n" +
-		"G89lbPVCm+F3guzrO70giA4617GFSEA31rRC1BR3AoGBAKcQLiwRrsCcdxChtqp1\n" +
-		"Y7kAZEXgOT80gI0bh4tGrrfbxC/9kHtxqwNlb/GwJxK+PIcCELd2OHj3ReX2grnH\n" +
-		"nkGrdRGf0GhzPZKJuCyypN0IgEJuK42BLXUGb2sW926jPZaPl9zHJtO+OfKmJiIV\n" +
-		"KlQ8224i04fUjQuHoepTHHr5AoGAS8AZ4lmWFCywTRSJEG/qIfJmt6LkpF5AIraE\n" +
-		"qisN9BTRKbFXqtpsoq1BcvjeIt3sn7B3oalYNMtMdiOlEb+Iqlq2RRnbb72e7HFX\n" +
-		"ZFMRchGVVBmiMGo4QT48fjPNAV/h2Jxr3ggbetLMP4WvULCVLM7wgSsEYlzWlyHV\n" +
-		"eU/uj4MCgYADGpY3Q3ueB23eTTnAMtESwmAQvjTBOPKVpaV/ohHb8BdzAjwcgEUA\n" +
-		"wB1be/bHCrLbW09Pi3HVp0I0x0mBAYoUP2NRYKCYlhs28cu+ygB4nsy+YZPg00+E\n" +
-		"ByqqrQ0zuN82ytXzRFHmh2Hb2O+HOj6aJjgVuj/rR7aifIt8scSAhg==\n" +
-		"-----END RSA PRIVATE KEY-----\n"
-
-	sigTestRSAPublicKeyPEM = "-----BEGIN PUBLIC KEY-----\n" +
-		"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxy7llbig9kL0wo5AyV1F\n" +
-		"hmJLvWTWxzAMwGdhG1h1CqQpaWutXGI9WKRDJSZ/9dr9vgvqdRX2QsnUdJbJ3cz5\n" +
-		"Z1ie/RdT/mSVO7ZEqvJS93PIHnquFZXxNnIerGnQ7guC+Zm9BlQ2DIhYpnvVRRVy\n" +
-		"D/D8KT92R7qOu3JACduoMrF1synknL8rb8lZvCej8tbhJ38yibMWTmkxsFS+a29X\n" +
-		"qk8pkhgwIwvUZqcMaqZo+4/iCuKLbVc85V98SvbcnmsX3gqeQnyRtxlctlclcbvH\n" +
-		"mJt5U+3yF1UtcuiyZf1gjcAqnOgvZZYzsodXi0KGV7NRQhTPvwH0C8In2qL+v4qW\n" +
-		"AQIDAQAB\n" +
-		"-----END PUBLIC KEY-----\n"
-
-	sigTestCertSCTSignatureRSA = "0401" + "0100" +
-		"6bc1fecfe9052036e31278cd7eded90d000b127f2b657831baf5ecb31ee3" +
-		"c17497abd9562df6319928a36df0ab1a1a917b3f4530e1ca0000ae6c4a0c" +
-		"0efada7df83beb95da8eea98f1a27c70afa1ccaa7a0245e1db785b1c0d9f" +
-		"ee307e926e14bed1eac0d01c34939e659360432a9552c02b89c3ef3c44aa" +
-		"22fc31f2444522975ee83989dd7af1ab05b91bbf0985ca4d04245b68a683" +
-		"01d300f0c976ce13d58618dad1b49c0ec5cdc4352016823fc88c479ef214" +
-		"76c5f19923af207dbb1b2cff72d4e1e5ee77dd420b85d0f9dcc30a0f617c" +
-		"2d3c916eb77f167323500d1b53dc4253321a106e441af343cf2f68630873" +
-		"abd43ca52629c586107eb7eb85f2c3ee"
-
-	sigTestCertSCTSignatureUnsupportedSignatureAlgorithm = "0402" + "0000"
-
-	sigTestCertSCTSignatureUnsupportedHashAlgorithm = "0303" + "0000"
-
-	// Some time in September 2012.
-	sigTestDefaultSTHTimestamp = 1348589667204
-
-	sigTestDefaultTreeSize = 42
-
-	// *Some* hash that we pretend is a valid root hash.
-	sigTestDefaultRootHash = "18041bd4665083001fba8c5411d2d748e8abbfdcdfd9218cb02b68a78e7d4c23"
-
-	sigTestDefaultSTHSerialized = "000100000139fe354384000000000000002a18041bd4665083001fba8c5411d2d748e8abb" +
-		"fdcdfd9218cb02b68a78e7d4c23"
-
-	sigTestDefaultSTHSignature = "0403" + "0048" +
-		"3046022100befd8060563763a5e49ba53e6443c13f7624fd6403178113736e16012aca983" +
-		"e022100f572568dbfe9a86490eb915c4ee16ad5ecd708fed35ed4e5cd1b2c3f087b4130"
-
-	sigTestKeyIDEC = "b69d879e3f2c4402556dcda2f6b2e02ff6b6df4789c53000e14f4b125ae847aa"
-
-	sigTestKeyIDRSA = "b853f84c71a7aa5f23905ba5340f183af927c330c7ce590ba1524981c4ec4358"
-)
-
-func mustDehex(t *testing.T, h string) []byte {
-	r, err := hex.DecodeString(h)
-	if err != nil {
-		t.Fatalf("Failed to decode hex string (%s): %v", h, err)
-	}
-	return r
-}
-
-func sigTestSCTWithSignature(t *testing.T, sig, keyID string) SignedCertificateTimestamp {
-	ds, err := UnmarshalDigitallySigned(bytes.NewReader(mustDehex(t, sig)))
-	if err != nil {
-		t.Fatalf("Failed to unmarshal sigTestCertSCTSignatureEC: %v", err)
-	}
-	var id SHA256Hash
-	copy(id[:], mustDehex(t, keyID))
-	return SignedCertificateTimestamp{
-		SCTVersion: V1,
-		LogID:      id,
-		Timestamp:  sigTestSCTTimestamp,
-		Signature:  *ds,
-	}
-}
-
-func sigTestSCTEC(t *testing.T) SignedCertificateTimestamp {
-	return sigTestSCTWithSignature(t, sigTestCertSCTSignatureEC, sigTestKeyIDEC)
-}
-
-func sigTestSCTRSA(t *testing.T) SignedCertificateTimestamp {
-	return sigTestSCTWithSignature(t, sigTestCertSCTSignatureRSA, sigTestKeyIDEC)
-}
-
-func sigTestECPublicKey(t *testing.T) crypto.PublicKey {
-	pk, _, _, err := PublicKeyFromPEM([]byte(sigTestEC256PublicKeyPEM))
-	if err != nil {
-		t.Fatalf("Failed to parse sigTestEC256PublicKey: %v", err)
-	}
-	return pk
-}
-
-func sigTestECPublicKey2(t *testing.T) crypto.PublicKey {
-	pk, _, _, err := PublicKeyFromPEM([]byte(sigTestEC256PublicKey2PEM))
-	if err != nil {
-		t.Fatalf("Failed to parse sigTestEC256PublicKey2: %v", err)
-	}
-	return pk
-}
-
-func sigTestRSAPublicKey(t *testing.T) crypto.PublicKey {
-	pk, _, _, err := PublicKeyFromPEM([]byte(sigTestRSAPublicKeyPEM))
-	if err != nil {
-		t.Fatalf("Failed to parse sigTestRSAPublicKey: %v", err)
-	}
-	return pk
-}
-
-func sigTestCertLogEntry(t *testing.T) LogEntry {
-	return LogEntry{
-		Index: 0,
-		Leaf: MerkleTreeLeaf{
-			Version:  V1,
-			LeafType: TimestampedEntryLeafType,
-			TimestampedEntry: TimestampedEntry{
-				Timestamp: sigTestSCTTimestamp,
-				EntryType: X509LogEntryType,
-				X509Entry: mustDehex(t, sigTestDERCertString),
-			},
-		},
-	}
-}
-
-func sigTestDefaultSTH(t *testing.T) SignedTreeHead {
-	ds, err := UnmarshalDigitallySigned(bytes.NewReader(mustDehex(t, sigTestDefaultSTHSignature)))
-	if err != nil {
-		t.Fatalf("Failed to unmarshal sigTestCertSCTSignatureEC: %v", err)
-	}
-	var rootHash SHA256Hash
-	copy(rootHash[:], mustDehex(t, sigTestDefaultRootHash))
-	return SignedTreeHead{
-		Version:           V1,
-		Timestamp:         sigTestDefaultSTHTimestamp,
-		TreeSize:          sigTestDefaultTreeSize,
-		SHA256RootHash:    rootHash,
-		TreeHeadSignature: *ds,
-	}
-}
-
-func mustCreateSignatureVerifier(t *testing.T, pk crypto.PublicKey) SignatureVerifier {
-	sv, err := NewSignatureVerifier(pk)
-	if err != nil {
-		t.Fatalf("Failed to create SignatureVerifier: %v", err)
-	}
-	return *sv
-}
-
-func corruptByteAt(b []byte, pos int) {
-	b[pos] ^= byte(mrand.Intn(255) + 1)
-}
-
-func corruptBytes(b []byte) {
-	corruptByteAt(b, mrand.Intn(len(b)))
-}
-
-func expectVerifySCTToFail(t *testing.T, sv SignatureVerifier, sct SignedCertificateTimestamp, msg string) {
-	if err := sv.VerifySCTSignature(sct, sigTestCertLogEntry(t)); err == nil {
-		t.Fatal(msg)
-	}
-}
-
-func TestVerifySCTSignatureEC(t *testing.T) {
-	v := mustCreateSignatureVerifier(t, sigTestECPublicKey(t))
-	if err := v.VerifySCTSignature(sigTestSCTEC(t), sigTestCertLogEntry(t)); err != nil {
-		t.Fatalf("Failed to verify signature on SCT: %v", err)
-	}
-
-}
-
-func TestVerifySCTSignatureRSA(t *testing.T) {
-	v := mustCreateSignatureVerifier(t, sigTestRSAPublicKey(t))
-	if err := v.VerifySCTSignature(sigTestSCTRSA(t), sigTestCertLogEntry(t)); err != nil {
-		t.Fatalf("Failed to verify signature on SCT: %v", err)
-	}
-
-}
-
-func TestVerifySCTSignatureFailsForMismatchedSignatureAlgorithm(t *testing.T) {
-	v := mustCreateSignatureVerifier(t, sigTestECPublicKey(t))
-	expectVerifySCTToFail(t, v, sigTestSCTRSA(t), "Sucessfully verified with mismatched signature algorithm")
-}
-
-func TestVerifySCTSignatureFailsForUnknownSignatureAlgorithm(t *testing.T) {
-	v := mustCreateSignatureVerifier(t, sigTestECPublicKey(t))
-	expectVerifySCTToFail(t, v, sigTestSCTWithSignature(t, sigTestCertSCTSignatureUnsupportedSignatureAlgorithm, sigTestKeyIDEC),
-		"Successfully verified signature with unsupported signature algorithm")
-}
-
-func TestVerifySCTSignatureFailsForUnknownHashAlgorithm(t *testing.T) {
-	v := mustCreateSignatureVerifier(t, sigTestECPublicKey(t))
-	expectVerifySCTToFail(t, v, sigTestSCTWithSignature(t, sigTestCertSCTSignatureUnsupportedHashAlgorithm, sigTestKeyIDEC),
-		"Successfully verified signature with unsupported hash algorithm")
-}
-
-func testVerifySCTSignatureFailsForIncorrectLeafBytes(t *testing.T, sct SignedCertificateTimestamp, sv SignatureVerifier) {
-	entry := sigTestCertLogEntry(t)
-	for i := range entry.Leaf.TimestampedEntry.X509Entry {
-		old := entry.Leaf.TimestampedEntry.X509Entry[i]
-		corruptByteAt(entry.Leaf.TimestampedEntry.X509Entry, i)
-		if err := sv.VerifySCTSignature(sct, entry); err == nil {
-			t.Fatalf("Incorrectly verfied signature over corrupted leaf data, uncovered byte at %d?", i)
-		}
-		entry.Leaf.TimestampedEntry.X509Entry[i] = old
-	}
-	// Ensure we were only corrupting one byte at a time, should be correct again now.
-	if err := sv.VerifySCTSignature(sct, entry); err != nil {
-		t.Fatalf("Input data appears to still be corrupt, bug? %v", err)
-	}
-}
-
-func testVerifySCTSignatureFailsForIncorrectSignature(t *testing.T, sct SignedCertificateTimestamp, sv SignatureVerifier) {
-	corruptBytes(sct.Signature.Signature)
-	expectVerifySCTToFail(t, sv, sct, "Incorrectly verified corrupt signature")
-}
-
-func TestVerifySCTSignatureECFailsForIncorrectLeafBytes(t *testing.T) {
-	v := mustCreateSignatureVerifier(t, sigTestECPublicKey(t))
-	testVerifySCTSignatureFailsForIncorrectLeafBytes(t, sigTestSCTEC(t), v)
-}
-
-func TestVerifySCTSignatureECFailsForIncorrectTimestamp(t *testing.T) {
-	v := mustCreateSignatureVerifier(t, sigTestECPublicKey(t))
-	sct := sigTestSCTEC(t)
-	sct.Timestamp++
-	expectVerifySCTToFail(t, v, sct, "Incorrectly verified signature with incorrect SCT timestamp.")
-}
-
-func TestVerifySCTSignatureECFailsForIncorrectVersion(t *testing.T) {
-	v := mustCreateSignatureVerifier(t, sigTestECPublicKey(t))
-	sct := sigTestSCTEC(t)
-	sct.SCTVersion++
-	expectVerifySCTToFail(t, v, sct, "Incorrectly verified signature with incorrect SCT Version.")
-}
-
-func TestVerifySCTSignatureECFailsForIncorrectSignature(t *testing.T) {
-	v := mustCreateSignatureVerifier(t, sigTestECPublicKey(t))
-	testVerifySCTSignatureFailsForIncorrectSignature(t, sigTestSCTEC(t), v)
-}
-
-func TestVerifySCTSignatureRSAFailsForIncorrectLeafBytes(t *testing.T) {
-	v := mustCreateSignatureVerifier(t, sigTestRSAPublicKey(t))
-	testVerifySCTSignatureFailsForIncorrectLeafBytes(t, sigTestSCTRSA(t), v)
-}
-
-func TestVerifySCTSignatureRSAFailsForIncorrectSignature(t *testing.T) {
-	v := mustCreateSignatureVerifier(t, sigTestRSAPublicKey(t))
-	testVerifySCTSignatureFailsForIncorrectSignature(t, sigTestSCTRSA(t), v)
-}
-
-func TestVerifySCTSignatureFailsForSignatureCreatedWithDifferentAlgorithm(t *testing.T) {
-	v := mustCreateSignatureVerifier(t, sigTestRSAPublicKey(t))
-	testVerifySCTSignatureFailsForIncorrectSignature(t, sigTestSCTEC(t), v)
-}
-
-func TestVerifySCTSignatureFailsForSignatureCreatedWithDifferentKey(t *testing.T) {
-	v := mustCreateSignatureVerifier(t, sigTestECPublicKey2(t))
-	testVerifySCTSignatureFailsForIncorrectSignature(t, sigTestSCTEC(t), v)
-}
-
-func expectVerifySTHToPass(t *testing.T, v SignatureVerifier, sth SignedTreeHead) {
-	if err := v.VerifySTHSignature(sth); err != nil {
-		t.Fatalf("Incorrectly failed to verify STH signature: %v", err)
-	}
-}
-
-func expectVerifySTHToFail(t *testing.T, v SignatureVerifier, sth SignedTreeHead) {
-	if err := v.VerifySTHSignature(sth); err == nil {
-		t.Fatal("Incorrectly verified STH signature")
-	}
-}
-
-func TestVerifyValidSTH(t *testing.T) {
-	v := mustCreateSignatureVerifier(t, sigTestECPublicKey(t))
-	sth := sigTestDefaultSTH(t)
-	expectVerifySTHToPass(t, v, sth)
-}
-
-func TestVerifySTHCatchesCorruptSignature(t *testing.T) {
-	v := mustCreateSignatureVerifier(t, sigTestECPublicKey(t))
-	sth := sigTestDefaultSTH(t)
-	corruptBytes(sth.TreeHeadSignature.Signature)
-	expectVerifySTHToFail(t, v, sth)
-}
-
-func TestVerifySTHCatchesCorruptRootHash(t *testing.T) {
-	v := mustCreateSignatureVerifier(t, sigTestECPublicKey(t))
-	sth := sigTestDefaultSTH(t)
-	for i := range sth.SHA256RootHash {
-		old := sth.SHA256RootHash[i]
-		corruptByteAt(sth.SHA256RootHash[:], i)
-		expectVerifySTHToFail(t, v, sth)
-		sth.SHA256RootHash[i] = old
-	}
-	// ensure we were only testing one corrupt byte at a time - should be correct again now.
-	expectVerifySTHToPass(t, v, sth)
-}
-
-func TestVerifySTHCatchesCorruptTimestamp(t *testing.T) {
-	v := mustCreateSignatureVerifier(t, sigTestECPublicKey(t))
-	sth := sigTestDefaultSTH(t)
-	sth.Timestamp++
-	expectVerifySTHToFail(t, v, sth)
-}
-
-func TestVerifySTHCatchesCorruptVersion(t *testing.T) {
-	v := mustCreateSignatureVerifier(t, sigTestECPublicKey(t))
-	sth := sigTestDefaultSTH(t)
-	sth.Version++
-	expectVerifySTHToFail(t, v, sth)
-}
-
-func TestVerifySTHCatchesCorruptTreeSize(t *testing.T) {
-	v := mustCreateSignatureVerifier(t, sigTestECPublicKey(t))
-	sth := sigTestDefaultSTH(t)
-	sth.TreeSize++
-	expectVerifySTHToFail(t, v, sth)
-}
-
-func TestVerifySTHFailsToVerifyForKeyWithDifferentAlgorithm(t *testing.T) {
-	v := mustCreateSignatureVerifier(t, sigTestRSAPublicKey(t))
-	sth := sigTestDefaultSTH(t)
-	expectVerifySTHToFail(t, v, sth)
-}
-
-func TestVerifySTHFailsToVerifyForDifferentKey(t *testing.T) {
-	v := mustCreateSignatureVerifier(t, sigTestECPublicKey2(t))
-	sth := sigTestDefaultSTH(t)
-	expectVerifySTHToFail(t, v, sth)
-}
-
-func TestNewSignatureVerifierFailsWithUnsupportedKeyType(t *testing.T) {
-	var k dsa.PrivateKey
-	if err := dsa.GenerateParameters(&k.Parameters, rand.Reader, dsa.L1024N160); err != nil {
-		t.Fatalf("Failed to generate DSA key parameters: %v", err)
-	}
-	if err := dsa.GenerateKey(&k, rand.Reader); err != nil {
-		t.Fatalf("Failed to generate DSA key: %v", err)
-	}
-	if _, err := NewSignatureVerifier(k); err == nil {
-		t.Fatal("Creating a SignatureVerifier with a DSA key unexpectedly succeeded")
-	}
-}
-
-func TestNewSignatureVerifierFailsWithBadKeyParametersForEC(t *testing.T) {
-	k, err := ecdsa.GenerateKey(elliptic.P224(), rand.Reader)
-	if err != nil {
-		t.Fatalf("Failed to generate ECDSA key on P224: %v", err)
-	}
-	if _, err := NewSignatureVerifier(k); err == nil {
-		t.Fatal("Incorrectly created new SignatureVerifier with EC P224 key.")
-	}
-}
-
-func TestNewSignatureVerifierFailsWithBadKeyParametersForRSA(t *testing.T) {
-	k, err := rsa.GenerateKey(rand.Reader, 1024)
-	if err != nil {
-		t.Fatalf("Failed to generate 1024 bit RSA key: %v", err)
-	}
-	if _, err := NewSignatureVerifier(k); err == nil {
-		t.Fatal("Incorrectly created new SignatureVerifier with 1024 bit RSA key.")
-	}
-}
-
-func TestWillAllowNonCompliantECKeyWithOverride(t *testing.T) {
-	*allowVerificationWithNonCompliantKeys = true
-	k, err := ecdsa.GenerateKey(elliptic.P224(), rand.Reader)
-	if err != nil {
-		t.Fatalf("Failed to generate EC key on P224: %v", err)
-	}
-	if _, err := NewSignatureVerifier(k.Public()); err != nil {
-		t.Fatalf("Incorrectly disallowed P224 EC key with override set: %v", err)
-	}
-}
-
-func TestWillAllowNonCompliantRSAKeyWithOverride(t *testing.T) {
-	*allowVerificationWithNonCompliantKeys = true
-	k, err := rsa.GenerateKey(rand.Reader, 1024)
-	if err != nil {
-		t.Fatalf("Failed to generate 1024 bit RSA key: %v", err)
-	}
-	if _, err := NewSignatureVerifier(k.Public()); err != nil {
-		t.Fatalf("Incorrectly disallowed 1024 bit RSA key with override set: %v", err)
-	}
-}
diff --git a/ct/types.go b/ct/types.go
index 8a63e98..202bcbb 100644
--- a/ct/types.go
+++ b/ct/types.go
@@ -7,9 +7,11 @@ import (
 	"encoding/json"
 	"fmt"
 
-	"github.com/google/certificate-transparency/go/x509"
+	"github.com/zmap/zcrypto/ct/x509"
 )
 
+const kMaxTimestamp = 253402300799
+
 const (
 	issuerKeyHashLength = 32
 )
@@ -239,6 +241,7 @@ type LogEntry struct {
 	X509Cert *x509.Certificate
 	Precert  *Precertificate
 	Chain    []ASN1Cert
+	Server   string
 }
 
 // SHA256Hash represents the output from the SHA256 hash function.
@@ -291,12 +294,24 @@ type SignedTreeHead struct {
 // add-chain and add-pre-chain methods after base64 decoding. (see RFC sections
 // 3.2 ,4.1 and 4.2)
 type SignedCertificateTimestamp struct {
-	SCTVersion Version    // The version of the protocol to which the SCT conforms
-	LogID      SHA256Hash // the SHA-256 hash of the log's public key, calculated over
+	SCTVersion Version    `json:"version"` // The version of the protocol to which the SCT conforms
+	LogID      SHA256Hash `json:"log_id"`  // the SHA-256 hash of the log's public key, calculated over
 	// the DER encoding of the key represented as SubjectPublicKeyInfo.
-	Timestamp  uint64          // Timestamp (in ms since unix epoc) at which the SCT was issued
-	Extensions CTExtensions    // For future extensions to the protocol
-	Signature  DigitallySigned // The Log's signature for this SCT
+	Timestamp  uint64          `json:"timestamp,omitempty"`  // Timestamp (in ms since unix epoc) at which the SCT was issued
+	Extensions CTExtensions    `json:"extensions,omitempty"` // For future extensions to the protocol
+	Signature  DigitallySigned `json:"signature"`            // The Log's signature for this SCT
+}
+
+type auxSignedCertificateTimestamp SignedCertificateTimestamp
+
+// MarshalJSON implements the JSON.Marshaller interface.
+func (sct *SignedCertificateTimestamp) MarshalJSON() ([]byte, error) {
+	aux := auxSignedCertificateTimestamp(*sct)
+	aux.Timestamp = sct.Timestamp / 1000 // convert ms to sec
+	if aux.Timestamp > kMaxTimestamp {
+		aux.Timestamp = 0
+	}
+	return json.Marshal(&aux)
 }
 
 func (s SignedCertificateTimestamp) String() string {
diff --git a/ct/types_test.go b/ct/types_test.go
deleted file mode 100644
index 16f3754..0000000
--- a/ct/types_test.go
+++ /dev/null
@@ -1,71 +0,0 @@
-package ct
-
-import (
-	"bytes"
-	"encoding/base64"
-	"strings"
-	"testing"
-)
-
-const (
-	PrecertEntryB64 = "AAAAAAFLSYHwyAABN2DieQ8zpJj5tsFJ/s/KOZOVS1NvvzatRdCoQVt5M30ABHowggR2oAMCAQICEAUyKYw5aj4l/KoZd+gntfMwDQYJKoZIhvcNAQELBQAwbTELMAkGA1UEBhMCVVMxFjAUBgNVBAoTDUdlb1RydXN0IEluYy4xHzAdBgNVBAsTFkZPUiBURVNUIFBVUlBPU0VTIE9OTFkxJTAjBgNVBAMTHEdlb1RydXN0IEVWIFNTTCBURVNUIENBIC0gRzQwHhcNMTUwMjAyMDAwMDAwWhcNMTYwMjI3MjM1OTU5WjCBwzETMBEGCysGAQQBgjc8AgEDEwJHQjEbMBkGCysGAQQBgjc8AgECFApDYWxpZm9ybmlhMR4wHAYLKwYBBAGCNzwCAQEMDU1vdW50YWluIFZpZXcxCzAJBgNVBAYTAkdCMRMwEQYDVQQIDApDYWxpZm9ybmlhMRYwFAYDVQQHDA1Nb3VudGFpbiBWaWV3MR0wGwYDVQQKDBRTeW1hbnRlYyBDb3Jwb3JhdGlvbjEWMBQGA1UEAwwNc2RmZWRzZi50cnVzdDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALGdl97zn/gpxl6gmaMlcpizP/Z1RR/cVkGiIjR67kpWIB9MGkBvLxmBXYbewaYRdo59VWyOM6fxtMeNsZzOrlQOl64fBmCy7k+M/yBFuEqdoig0l0RAbs6u0LCNRv2rNUOz2G6nCGJ6YaUpt5Onatxrd2vI1bPU/iHixKqSz9M7RedBIGjgaDor7/rR3y/DILjdvwL/tgPSz3R5gnf9lla1rNRWWbDl12HgLc+VxTCVVVqTGtW/qbSWfARdXxLeLWtTfNk68q2LReVUC9QyeYdtE+N2+2SXeOEN+lYWW5Ab036d7k5GAntMBzLKftZEkYYquvaiSkqu2PSaCSLKT7UCAwEAAaOCAdEwggHNMEcGA1UdEQRAMD6CDWtqYXNkaGYudHJ1c3SCC3NzZGZzLnRydXN0gg1zZGZlZHNmLnRydXN0ghF3d3cuc2RmZWRzZi50cnVzdDAJBgNVHRMEAjAAMA4GA1UdDwEB/wQEAwIFoDArBgNVHR8EJDAiMCCgHqAchhpodHRwOi8vZ20uc3ltY2IuY29tL2dtLmNybDCBoAYDVR0gBIGYMIGVMIGSBgkrBgEEAfAiAQYwgYQwPwYIKwYBBQUHAgEWM2h0dHBzOi8vd3d3Lmdlb3RydXN0LmNvbS9yZXNvdXJjZXMvcmVwb3NpdG9yeS9sZWdhbDBBBggrBgEFBQcCAjA1DDNodHRwczovL3d3dy5nZW90cnVzdC5jb20vcmVzb3VyY2VzL3JlcG9zaXRvcnkvbGVnYWwwHQYDVR0lBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMCMB8GA1UdIwQYMBaAFLFplGGr5ssMTOdZr1pJixgzweFHMFcGCCsGAQUFBwEBBEswSTAfBggrBgEFBQcwAYYTaHR0cDovL2dtLnN5bWNkLmNvbTAmBggrBgEFBQcwAoYaaHR0cDovL2dtLnN5bWNiLmNvbS9nbS5jcnQAAA=="
-	CertEntryB64    = "AAAAAAFJpuA6vgAAAAZRMIIGTTCCBTWgAwIBAgIMal1BYfXJtoBDJwsMMA0GCSqGSIb3DQEBBQUAMF4xCzAJBgNVBAYTAkJFMRkwFwYDVQQKExBHbG9iYWxTaWduIG52LXNhMTQwMgYDVQQDEytHbG9iYWxTaWduIEV4dGVuZGVkIFZhbGlkYXRpb24gQ0EgLSBHMiBURVNUMB4XDTE0MTExMzAxNTgwMVoXDTE2MTExMzAxNTgwMVowggETMRgwFgYDVQQPDA9CdXNpbmVzcyBFbnRpdHkxEjAQBgNVBAUTCTY2NjY2NjY2NjETMBEGCysGAQQBgjc8AgEDEwJERTEpMCcGCysGAQQBgjc8AgEBExhldiBqdXJpc2RpY3Rpb24gbG9jYWxpdHkxJjAkBgsrBgEEAYI3PAIBAhMVZXYganVyaXNkaWN0aW9uIHN0YXRlMQswCQYDVQQGEwJKUDEKMAgGA1UECAwBUzEKMAgGA1UEBwwBTDEVMBMGA1UECRMMZXYgYWRkcmVzcyAzMQwwCgYDVQQLDANPVTExDDAKBgNVBAsMA09VMjEKMAgGA1UECgwBTzEXMBUGA1UEAwwOY3NyY24uc3NsMjQuanAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCNufDWs1lGbf/pW6Q9waVoDu3I88q7xXOiNqEJv25Y34Fse7gVYUerUm7Or/0FdubhwJ6jNDPhFNflA4xpcpjHlX8Bp+EUIyCEfPI0mVu+QnmDQMuZ5qfiz6lQJ3rvbgL02W3c6wr5VBFxsPjxqk8NAkU+bmVLJaE/Kv9DV8roF3070hhVaGWRojCdn/XerYJAME4i6vzFUIWH5ratHQC1PCjluTYmmvvyFLc+29yKSKhsHCPz3OVfzOYFAsCQi8qb2yLBbAs00RtP0n6de8tWxewPxNUlAPsGsK9cQRLkIQIreLMQMMtz6f2S/8ZZGf2PNeYE/K8CW5x34+Xf90mnAgMBAAGjggJSMIICTjAOBgNVHQ8BAf8EBAMCBaAwTAYDVR0gBEUwQzBBBgkrBgEEAaAyAQEwNDAyBggrBgEFBQcCARYmaHR0cHM6Ly93d3cuZ2xvYmFsc2lnbi5jb20vcmVwb3NpdG9yeS8wSAYDVR0fBEEwPzA9oDugOYY3aHR0cDovL2NybC5nbG9iYWxzaWduLmNvbS9ncy9nc29yZ2FuaXphdGlvbnZhbGNhdGcyLmNybDCBnAYIKwYBBQUHAQEEgY8wgYwwSgYIKwYBBQUHMAKGPmh0dHA6Ly9zZWN1cmUuZ2xvYmFsc2lnbi5jb20vY2FjZXJ0L2dzb3JnYW5pemF0aW9udmFsY2F0ZzIuY3J0MD4GCCsGAQUFBzABhjJodHRwOi8vb2NzcDIuZ2xvYmFsc2lnbi5jb20vZ3Nvcmdhbml6YXRpb252YWxjYXRnMjAdBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIwGQYDVR0RBBIwEIIOY3NyY24uc3NsMjQuanAwHQYDVR0OBBYEFH+DSykD417/9lFhkIOi79aabXD0MB8GA1UdIwQYMBaAFKswpAbZctACmrLH0/QkG+L8pTICMIGKBgorBgEEAdZ5AgQCBHwEegB4AHYAsMyD5aX5fWuvfAnMKEkEhyrH6IsTLGNQt8b9JuFsbHcAAAFJptw0awAABAMARzBFAiBGn03AVTt4Mr1WYzw7nVP6rshN9BS3oFqxstVE0UasPgIhAO6JlBn9T5VUR5j3iD/gk2kv60yQ6E1lFgD3AZFmpDcBMA0GCSqGSIb3DQEBBQUAA4IBAQB9zT4ijWjNwHNMdin9fUDNdC0O0dDZ9JpkOvEtzbxhOUY4t8UZu3yuUwzNw6UDfVzdik0sAavcg02vGZP3oi7iwiM3epTaTmisaaC1DS1HPsd2UeABxfcaI8wt7+dhb9bGSRqn+aK7Frkwzj+Mw3z2pHv7BP1O/324QzzG/bBRRqSjH+ZSEYdfLFESm/BynOLcfOGlr8bqoes6NilsueCRN17fxAjHJ/bVS7pAjaYLRsSWo2TFBK30fuBJapJg/iI8iyPBSDJjXD3/DbqKDIzdlXp38YRDt3gqm2x2NrfWbfQmNQuVlTfpEYiORbLAshjlDQP9z6f3WOjmDdGhmWvAAAA="
-)
-
-func TestReadMerkleTreeLeafForX509Cert(t *testing.T) {
-	entry, err := base64.StdEncoding.DecodeString(CertEntryB64)
-	if err != nil {
-		t.Fatal(err)
-	}
-
-	m, err := ReadMerkleTreeLeaf(bytes.NewReader(entry))
-	if err != nil {
-		t.Fatal(err)
-	}
-	if m.Version != V1 {
-		t.Fatal("Invalid version number")
-	}
-	if m.LeafType != TimestampedEntryLeafType {
-		t.Fatal("Invalid LeafType")
-	}
-	if m.TimestampedEntry.EntryType != X509LogEntryType {
-		t.Fatal("Incorrect EntryType")
-	}
-}
-
-func TestReadMerkleTreeLeafForPrecert(t *testing.T) {
-	entry, err := base64.StdEncoding.DecodeString(PrecertEntryB64)
-	if err != nil {
-		t.Fatal(err)
-	}
-
-	m, err := ReadMerkleTreeLeaf(bytes.NewReader(entry))
-	if err != nil {
-		t.Fatal(err)
-	}
-	if m.Version != V1 {
-		t.Fatal("Invalid version number")
-	}
-	if m.LeafType != TimestampedEntryLeafType {
-		t.Fatal("Invalid LeafType")
-	}
-	if m.TimestampedEntry.EntryType != PrecertLogEntryType {
-		t.Fatal("Incorrect EntryType")
-	}
-}
-
-func TestReadMerkleTreeLeafChecksVersion(t *testing.T) {
-	buffer := []byte{1}
-	_, err := ReadMerkleTreeLeaf(bytes.NewReader(buffer))
-	if err == nil || !strings.Contains(err.Error(), "unknown Version") {
-		t.Fatal("Failed to check Version - accepted 1")
-	}
-}
-
-func TestReadMerkleTreeLeafChecksLeafType(t *testing.T) {
-	buffer := []byte{0, 0x12, 0x34}
-	_, err := ReadMerkleTreeLeaf(bytes.NewReader(buffer))
-	if err == nil || !strings.Contains(err.Error(), "unknown LeafType") {
-		t.Fatal("Failed to check LeafType - accepted 0x1234")
-	}
-}
diff --git a/ct/x509/pkcs1.go b/ct/x509/pkcs1.go
index 638bc67..31f81cd 100755
--- a/ct/x509/pkcs1.go
+++ b/ct/x509/pkcs1.go
@@ -7,7 +7,7 @@ package x509
 import (
 	"crypto/rsa"
 	// START CT CHANGES
-	"github.com/google/certificate-transparency/go/asn1"
+	"github.com/zmap/zcrypto/ct/asn1"
 	// END CT CHANGES
 	"errors"
 	"math/big"
diff --git a/ct/x509/pkcs8.go b/ct/x509/pkcs8.go
index c6ad70b..ad723fd 100755
--- a/ct/x509/pkcs8.go
+++ b/ct/x509/pkcs8.go
@@ -6,8 +6,8 @@ package x509
 
 import (
 	// START CT CHANGES
-	"github.com/google/certificate-transparency/go/asn1"
-	"github.com/google/certificate-transparency/go/x509/pkix"
+	"github.com/zmap/zcrypto/ct/asn1"
+	"github.com/zmap/zcrypto/ct/x509/pkix"
 	// END CT CHANGES
 	"errors"
 	"fmt"
diff --git a/ct/x509/pkix/oid_names.go b/ct/x509/pkix/oid_names.go
new file mode 100644
index 0000000..498a68b
--- /dev/null
+++ b/ct/x509/pkix/oid_names.go
@@ -0,0 +1,1013 @@
+// Copyright 2015 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+package pkix
+
+// OIDName stores the short and long version of the name of an IANA-assigned OID
+type OIDName struct {
+	ShortName string `json:"short_name"`
+	LongName  string `json:"long_name"`
+}
+
+var oidDotNotationToNames map[string]OIDName
+
+func init() {
+	oidDotNotationToNames = make(map[string]OIDName, 1024)
+
+	oidDotNotationToNames["0.0"] = OIDName{ShortName: "UNDEF", LongName: "undefined"}
+	oidDotNotationToNames["1.2.840.113549"] = OIDName{ShortName: "rsadsi", LongName: "RSA Data Security"}
+	oidDotNotationToNames["1.2.840.113549.1"] = OIDName{ShortName: "pkcs", LongName: "RSA Data Security"}
+	oidDotNotationToNames["1.2.840.113549.2.2"] = OIDName{ShortName: "MD2", LongName: "md2"}
+	oidDotNotationToNames["1.2.840.113549.2.5"] = OIDName{ShortName: "MD5", LongName: "md5"}
+	oidDotNotationToNames["1.2.840.113549.3.4"] = OIDName{ShortName: "RC4", LongName: "rc4"}
+	oidDotNotationToNames["1.2.840.113549.1.1.1"] = OIDName{ShortName: "rsaEncryption", LongName: "rsaEncryption"}
+	oidDotNotationToNames["1.2.840.113549.1.1.2"] = OIDName{ShortName: "RSA-MD2", LongName: "md2WithRSAEncryption"}
+	oidDotNotationToNames["1.2.840.113549.1.1.4"] = OIDName{ShortName: "RSA-MD5", LongName: "md5WithRSAEncryption"}
+	oidDotNotationToNames["1.2.840.113549.1.5.1"] = OIDName{ShortName: "PBE-MD2-DES", LongName: "pbeWithMD2AndDES-CBC"}
+	oidDotNotationToNames["1.2.840.113549.1.5.3"] = OIDName{ShortName: "PBE-MD5-DES", LongName: "pbeWithMD5AndDES-CBC"}
+	oidDotNotationToNames["2.5"] = OIDName{ShortName: "X500", LongName: "directory services (X.500)"}
+	oidDotNotationToNames["2.5.4"] = OIDName{ShortName: "X509", LongName: "X509"}
+	oidDotNotationToNames["2.5.4.3"] = OIDName{ShortName: "CN", LongName: "commonName"}
+	oidDotNotationToNames["2.5.4.6"] = OIDName{ShortName: "C", LongName: "countryName"}
+	oidDotNotationToNames["2.5.4.7"] = OIDName{ShortName: "L", LongName: "localityName"}
+	oidDotNotationToNames["2.5.4.8"] = OIDName{ShortName: "ST", LongName: "stateOrProvinceName"}
+	oidDotNotationToNames["2.5.4.10"] = OIDName{ShortName: "O", LongName: "organizationName"}
+	oidDotNotationToNames["2.5.4.11"] = OIDName{ShortName: "OU", LongName: "organizationalUnitName"}
+	oidDotNotationToNames["2.5.8.1.1"] = OIDName{ShortName: "RSA", LongName: "rsa"}
+	oidDotNotationToNames["1.2.840.113549.1.7"] = OIDName{ShortName: "pkcs7", LongName: "pkcs7"}
+	oidDotNotationToNames["1.2.840.113549.1.7.1"] = OIDName{ShortName: "pkcs7-data", LongName: "pkcs7-data"}
+	oidDotNotationToNames["1.2.840.113549.1.7.2"] = OIDName{ShortName: "pkcs7-signedData", LongName: "pkcs7-signedData"}
+	oidDotNotationToNames["1.2.840.113549.1.7.3"] = OIDName{ShortName: "pkcs7-envelopedData", LongName: "pkcs7-envelopedData"}
+	oidDotNotationToNames["1.2.840.113549.1.7.4"] = OIDName{ShortName: "pkcs7-signedAndEnvelopedData", LongName: "pkcs7-signedAndEnvelopedData"}
+	oidDotNotationToNames["1.2.840.113549.1.7.5"] = OIDName{ShortName: "pkcs7-digestData", LongName: "pkcs7-digestData"}
+	oidDotNotationToNames["1.2.840.113549.1.7.6"] = OIDName{ShortName: "pkcs7-encryptedData", LongName: "pkcs7-encryptedData"}
+	oidDotNotationToNames["1.2.840.113549.1.3"] = OIDName{ShortName: "pkcs3", LongName: "pkcs3"}
+	oidDotNotationToNames["1.2.840.113549.1.3.1"] = OIDName{ShortName: "dhKeyAgreement", LongName: "dhKeyAgreement"}
+	oidDotNotationToNames["1.3.14.3.2.6"] = OIDName{ShortName: "DES-ECB", LongName: "des-ecb"}
+	oidDotNotationToNames["1.3.14.3.2.9"] = OIDName{ShortName: "DES-CFB", LongName: "des-cfb"}
+	oidDotNotationToNames["1.3.14.3.2.7"] = OIDName{ShortName: "DES-CBC", LongName: "des-cbc"}
+	oidDotNotationToNames["1.3.14.3.2.17"] = OIDName{ShortName: "DES-EDE", LongName: "des-ede"}
+	oidDotNotationToNames["1.3.6.1.4.1.188.7.1.1.2"] = OIDName{ShortName: "IDEA-CBC", LongName: "idea-cbc"}
+	oidDotNotationToNames["1.2.840.113549.3.2"] = OIDName{ShortName: "RC2-CBC", LongName: "rc2-cbc"}
+	oidDotNotationToNames["1.3.14.3.2.18"] = OIDName{ShortName: "SHA", LongName: "sha"}
+	oidDotNotationToNames["1.3.14.3.2.15"] = OIDName{ShortName: "RSA-SHA", LongName: "shaWithRSAEncryption"}
+	oidDotNotationToNames["1.2.840.113549.3.7"] = OIDName{ShortName: "DES-EDE3-CBC", LongName: "des-ede3-cbc"}
+	oidDotNotationToNames["1.3.14.3.2.8"] = OIDName{ShortName: "DES-OFB", LongName: "des-ofb"}
+	oidDotNotationToNames["1.2.840.113549.1.9"] = OIDName{ShortName: "pkcs9", LongName: "pkcs9"}
+	oidDotNotationToNames["1.2.840.113549.1.9.1"] = OIDName{ShortName: "emailAddress", LongName: "emailAddress"}
+	oidDotNotationToNames["1.2.840.113549.1.9.2"] = OIDName{ShortName: "unstructuredName", LongName: "unstructuredName"}
+	oidDotNotationToNames["1.2.840.113549.1.9.3"] = OIDName{ShortName: "contentType", LongName: "contentType"}
+	oidDotNotationToNames["1.2.840.113549.1.9.4"] = OIDName{ShortName: "messageDigest", LongName: "messageDigest"}
+	oidDotNotationToNames["1.2.840.113549.1.9.5"] = OIDName{ShortName: "signingTime", LongName: "signingTime"}
+	oidDotNotationToNames["1.2.840.113549.1.9.6"] = OIDName{ShortName: "countersignature", LongName: "countersignature"}
+	oidDotNotationToNames["1.2.840.113549.1.9.7"] = OIDName{ShortName: "challengePassword", LongName: "challengePassword"}
+	oidDotNotationToNames["1.2.840.113549.1.9.8"] = OIDName{ShortName: "unstructuredAddress", LongName: "unstructuredAddress"}
+	oidDotNotationToNames["1.2.840.113549.1.9.9"] = OIDName{ShortName: "extendedCertificateAttributes", LongName: "extendedCertificateAttributes"}
+	oidDotNotationToNames["2.16.840.1.113730"] = OIDName{ShortName: "Netscape", LongName: "Netscape Communications Corp."}
+	oidDotNotationToNames["2.16.840.1.113730.1"] = OIDName{ShortName: "nsCertExt", LongName: "Netscape Certificate Extension"}
+	oidDotNotationToNames["2.16.840.1.113730.2"] = OIDName{ShortName: "nsDataType", LongName: "Netscape Data Type"}
+	oidDotNotationToNames["1.3.14.3.2.26"] = OIDName{ShortName: "SHA1", LongName: "sha1"}
+	oidDotNotationToNames["1.2.840.113549.1.1.5"] = OIDName{ShortName: "RSA-SHA1", LongName: "sha1WithRSAEncryption"}
+	oidDotNotationToNames["1.3.14.3.2.13"] = OIDName{ShortName: "DSA-SHA", LongName: "dsaWithSHA"}
+	oidDotNotationToNames["1.3.14.3.2.12"] = OIDName{ShortName: "DSA-old", LongName: "dsaEncryption-old"}
+	oidDotNotationToNames["1.2.840.113549.1.5.11"] = OIDName{ShortName: "PBE-SHA1-RC2-64", LongName: "pbeWithSHA1AndRC2-CBC"}
+	oidDotNotationToNames["1.2.840.113549.1.5.12"] = OIDName{ShortName: "PBKDF2", LongName: "PBKDF2"}
+	oidDotNotationToNames["1.3.14.3.2.27"] = OIDName{ShortName: "DSA-SHA1-old", LongName: "dsaWithSHA1-old"}
+	oidDotNotationToNames["2.16.840.1.113730.1.1"] = OIDName{ShortName: "nsCertType", LongName: "Netscape Cert Type"}
+	oidDotNotationToNames["2.16.840.1.113730.1.2"] = OIDName{ShortName: "nsBaseUrl", LongName: "Netscape Base Url"}
+	oidDotNotationToNames["2.16.840.1.113730.1.3"] = OIDName{ShortName: "nsRevocationUrl", LongName: "Netscape Revocation Url"}
+	oidDotNotationToNames["2.16.840.1.113730.1.4"] = OIDName{ShortName: "nsCaRevocationUrl", LongName: "Netscape CA Revocation Url"}
+	oidDotNotationToNames["2.16.840.1.113730.1.7"] = OIDName{ShortName: "nsRenewalUrl", LongName: "Netscape Renewal Url"}
+	oidDotNotationToNames["2.16.840.1.113730.1.8"] = OIDName{ShortName: "nsCaPolicyUrl", LongName: "Netscape CA Policy Url"}
+	oidDotNotationToNames["2.16.840.1.113730.1.12"] = OIDName{ShortName: "nsSslServerName", LongName: "Netscape SSL Server Name"}
+	oidDotNotationToNames["2.16.840.1.113730.1.13"] = OIDName{ShortName: "nsComment", LongName: "Netscape Comment"}
+	oidDotNotationToNames["2.16.840.1.113730.2.5"] = OIDName{ShortName: "nsCertSequence", LongName: "Netscape Certificate Sequence"}
+	oidDotNotationToNames["2.5.29"] = OIDName{ShortName: "id-ce", LongName: "id-ce"}
+	oidDotNotationToNames["2.5.29.14"] = OIDName{ShortName: "subjectKeyIdentifier", LongName: "X509v3 Subject Key Identifier"}
+	oidDotNotationToNames["2.5.29.15"] = OIDName{ShortName: "keyUsage", LongName: "X509v3 Key Usage"}
+	oidDotNotationToNames["2.5.29.16"] = OIDName{ShortName: "privateKeyUsagePeriod", LongName: "X509v3 Private Key Usage Period"}
+	oidDotNotationToNames["2.5.29.17"] = OIDName{ShortName: "subjectAltName", LongName: "X509v3 Subject Alternative Name"}
+	oidDotNotationToNames["2.5.29.18"] = OIDName{ShortName: "issuerAltName", LongName: "X509v3 Issuer Alternative Name"}
+	oidDotNotationToNames["2.5.29.19"] = OIDName{ShortName: "basicConstraints", LongName: "X509v3 Basic Constraints"}
+	oidDotNotationToNames["2.5.29.20"] = OIDName{ShortName: "crlNumber", LongName: "X509v3 CRL Number"}
+	oidDotNotationToNames["2.5.29.32"] = OIDName{ShortName: "certificatePolicies", LongName: "X509v3 Certificate Policies"}
+	oidDotNotationToNames["2.5.29.35"] = OIDName{ShortName: "authorityKeyIdentifier", LongName: "X509v3 Authority Key Identifier"}
+	oidDotNotationToNames["1.3.6.1.4.1.3029.1.2"] = OIDName{ShortName: "BF-CBC", LongName: "bf-cbc"}
+	oidDotNotationToNames["2.5.8.3.101"] = OIDName{ShortName: "MDC2", LongName: "mdc2"}
+	oidDotNotationToNames["2.5.8.3.100"] = OIDName{ShortName: "RSA-MDC2", LongName: "mdc2WithRSA"}
+	oidDotNotationToNames["2.5.4.42"] = OIDName{ShortName: "GN", LongName: "givenName"}
+	oidDotNotationToNames["2.5.4.4"] = OIDName{ShortName: "SN", LongName: "surname"}
+	oidDotNotationToNames["2.5.4.43"] = OIDName{ShortName: "initials", LongName: "initials"}
+	oidDotNotationToNames["2.5.29.31"] = OIDName{ShortName: "crlDistributionPoints", LongName: "X509v3 CRL Distribution Points"}
+	oidDotNotationToNames["1.3.14.3.2.3"] = OIDName{ShortName: "RSA-NP-MD5", LongName: "md5WithRSA"}
+	oidDotNotationToNames["2.5.4.5"] = OIDName{ShortName: "serialNumber", LongName: "serialNumber"}
+	oidDotNotationToNames["2.5.4.12"] = OIDName{ShortName: "title", LongName: "title"}
+	oidDotNotationToNames["2.5.4.13"] = OIDName{ShortName: "description", LongName: "description"}
+	oidDotNotationToNames["1.2.840.113533.7.66.10"] = OIDName{ShortName: "CAST5-CBC", LongName: "cast5-cbc"}
+	oidDotNotationToNames["1.2.840.113533.7.66.12"] = OIDName{ShortName: "pbeWithMD5AndCast5CBC", LongName: "pbeWithMD5AndCast5CBC"}
+	oidDotNotationToNames["1.2.840.10040.4.3"] = OIDName{ShortName: "DSA-SHA1", LongName: "dsaWithSHA1"}
+	oidDotNotationToNames["1.3.14.3.2.29"] = OIDName{ShortName: "RSA-SHA1-2", LongName: "sha1WithRSA"}
+	oidDotNotationToNames["1.2.840.10040.4.1"] = OIDName{ShortName: "DSA", LongName: "dsaEncryption"}
+	oidDotNotationToNames["1.3.36.3.2.1"] = OIDName{ShortName: "RIPEMD160", LongName: "ripemd160"}
+	oidDotNotationToNames["1.3.36.3.3.1.2"] = OIDName{ShortName: "RSA-RIPEMD160", LongName: "ripemd160WithRSA"}
+	oidDotNotationToNames["1.2.840.113549.3.8"] = OIDName{ShortName: "RC5-CBC", LongName: "rc5-cbc"}
+	oidDotNotationToNames["1.1.1.1.666.1"] = OIDName{ShortName: "RLE", LongName: "run length compression"}
+	oidDotNotationToNames["1.2.840.113549.1.9.16.3.8"] = OIDName{ShortName: "ZLIB", LongName: "zlib compression"}
+	oidDotNotationToNames["2.5.29.37"] = OIDName{ShortName: "extendedKeyUsage", LongName: "X509v3 Extended Key Usage"}
+	oidDotNotationToNames["1.3.6.1.5.5.7"] = OIDName{ShortName: "PKIX", LongName: "PKIX"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.3"] = OIDName{ShortName: "id-kp", LongName: "id-kp"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.3.1"] = OIDName{ShortName: "serverAuth", LongName: "TLS Web Server Authentication"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.3.2"] = OIDName{ShortName: "clientAuth", LongName: "TLS Web Client Authentication"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.3.3"] = OIDName{ShortName: "codeSigning", LongName: "Code Signing"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.3.4"] = OIDName{ShortName: "emailProtection", LongName: "E-mail Protection"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.3.8"] = OIDName{ShortName: "timeStamping", LongName: "Time Stamping"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.2.1.21"] = OIDName{ShortName: "msCodeInd", LongName: "Microsoft Individual Code Signing"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.2.1.22"] = OIDName{ShortName: "msCodeCom", LongName: "Microsoft Commercial Code Signing"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.10.3.1"] = OIDName{ShortName: "msCTLSign", LongName: "Microsoft Trust List Signing"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.10.3.3"] = OIDName{ShortName: "msSGC", LongName: "Microsoft Server Gated Crypto"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.10.3.4"] = OIDName{ShortName: "msEFS", LongName: "Microsoft Encrypted File System"}
+	oidDotNotationToNames["2.16.840.1.113730.4.1"] = OIDName{ShortName: "nsSGC", LongName: "Netscape Server Gated Crypto"}
+	oidDotNotationToNames["2.5.29.27"] = OIDName{ShortName: "deltaCRL", LongName: "X509v3 Delta CRL Indicator"}
+	oidDotNotationToNames["2.5.29.21"] = OIDName{ShortName: "CRLReason", LongName: "X509v3 CRL Reason Code"}
+	oidDotNotationToNames["2.5.29.24"] = OIDName{ShortName: "invalidityDate", LongName: "Invalidity Date"}
+	oidDotNotationToNames["1.3.101.1.4.1"] = OIDName{ShortName: "SXNetID", LongName: "Strong Extranet ID"}
+	oidDotNotationToNames["1.2.840.113549.1.12.1.1"] = OIDName{ShortName: "PBE-SHA1-RC4-128", LongName: "pbeWithSHA1And128BitRC4"}
+	oidDotNotationToNames["1.2.840.113549.1.12.1.2"] = OIDName{ShortName: "PBE-SHA1-RC4-40", LongName: "pbeWithSHA1And40BitRC4"}
+	oidDotNotationToNames["1.2.840.113549.1.12.1.3"] = OIDName{ShortName: "PBE-SHA1-3DES", LongName: "pbeWithSHA1And3-KeyTripleDES-CBC"}
+	oidDotNotationToNames["1.2.840.113549.1.12.1.4"] = OIDName{ShortName: "PBE-SHA1-2DES", LongName: "pbeWithSHA1And2-KeyTripleDES-CBC"}
+	oidDotNotationToNames["1.2.840.113549.1.12.1.5"] = OIDName{ShortName: "PBE-SHA1-RC2-128", LongName: "pbeWithSHA1And128BitRC2-CBC"}
+	oidDotNotationToNames["1.2.840.113549.1.12.1.6"] = OIDName{ShortName: "PBE-SHA1-RC2-40", LongName: "pbeWithSHA1And40BitRC2-CBC"}
+	oidDotNotationToNames["1.2.840.113549.1.12.10.1.1"] = OIDName{ShortName: "keyBag", LongName: "keyBag"}
+	oidDotNotationToNames["1.2.840.113549.1.12.10.1.2"] = OIDName{ShortName: "pkcs8ShroudedKeyBag", LongName: "pkcs8ShroudedKeyBag"}
+	oidDotNotationToNames["1.2.840.113549.1.12.10.1.3"] = OIDName{ShortName: "certBag", LongName: "certBag"}
+	oidDotNotationToNames["1.2.840.113549.1.12.10.1.4"] = OIDName{ShortName: "crlBag", LongName: "crlBag"}
+	oidDotNotationToNames["1.2.840.113549.1.12.10.1.5"] = OIDName{ShortName: "secretBag", LongName: "secretBag"}
+	oidDotNotationToNames["1.2.840.113549.1.12.10.1.6"] = OIDName{ShortName: "safeContentsBag", LongName: "safeContentsBag"}
+	oidDotNotationToNames["1.2.840.113549.1.9.20"] = OIDName{ShortName: "friendlyName", LongName: "friendlyName"}
+	oidDotNotationToNames["1.2.840.113549.1.9.21"] = OIDName{ShortName: "localKeyID", LongName: "localKeyID"}
+	oidDotNotationToNames["1.2.840.113549.1.9.22.1"] = OIDName{ShortName: "x509Certificate", LongName: "x509Certificate"}
+	oidDotNotationToNames["1.2.840.113549.1.9.22.2"] = OIDName{ShortName: "sdsiCertificate", LongName: "sdsiCertificate"}
+	oidDotNotationToNames["1.2.840.113549.1.9.23.1"] = OIDName{ShortName: "x509Crl", LongName: "x509Crl"}
+	oidDotNotationToNames["1.2.840.113549.1.5.13"] = OIDName{ShortName: "PBES2", LongName: "PBES2"}
+	oidDotNotationToNames["1.2.840.113549.1.5.14"] = OIDName{ShortName: "PBMAC1", LongName: "PBMAC1"}
+	oidDotNotationToNames["1.2.840.113549.2.7"] = OIDName{ShortName: "hmacWithSHA1", LongName: "hmacWithSHA1"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.2.1"] = OIDName{ShortName: "id-qt-cps", LongName: "Policy Qualifier CPS"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.2.2"] = OIDName{ShortName: "id-qt-unotice", LongName: "Policy Qualifier User Notice"}
+	oidDotNotationToNames["1.2.840.113549.1.9.15"] = OIDName{ShortName: "SMIME-CAPS", LongName: "S/MIME Capabilities"}
+	oidDotNotationToNames["1.2.840.113549.1.5.4"] = OIDName{ShortName: "PBE-MD2-RC2-64", LongName: "pbeWithMD2AndRC2-CBC"}
+	oidDotNotationToNames["1.2.840.113549.1.5.6"] = OIDName{ShortName: "PBE-MD5-RC2-64", LongName: "pbeWithMD5AndRC2-CBC"}
+	oidDotNotationToNames["1.2.840.113549.1.5.10"] = OIDName{ShortName: "PBE-SHA1-DES", LongName: "pbeWithSHA1AndDES-CBC"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.2.1.14"] = OIDName{ShortName: "msExtReq", LongName: "Microsoft Extension Request"}
+	oidDotNotationToNames["1.2.840.113549.1.9.14"] = OIDName{ShortName: "extReq", LongName: "Extension Request"}
+	oidDotNotationToNames["2.5.4.41"] = OIDName{ShortName: "name", LongName: "name"}
+	oidDotNotationToNames["2.5.4.46"] = OIDName{ShortName: "dnQualifier", LongName: "dnQualifier"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.1"] = OIDName{ShortName: "id-pe", LongName: "id-pe"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.48"] = OIDName{ShortName: "id-ad", LongName: "id-ad"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.1.1"] = OIDName{ShortName: "authorityInfoAccess", LongName: "Authority Information Access"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.48.1"] = OIDName{ShortName: "OCSP", LongName: "OCSP"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.48.2"] = OIDName{ShortName: "caIssuers", LongName: "CA Issuers"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.3.9"] = OIDName{ShortName: "OCSPSigning", LongName: "OCSP Signing"}
+	oidDotNotationToNames["1.0"] = OIDName{ShortName: "ISO", LongName: "iso"}
+	oidDotNotationToNames["1.2"] = OIDName{ShortName: "member-body", LongName: "ISO Member Body"}
+	oidDotNotationToNames["1.2.840"] = OIDName{ShortName: "ISO-US", LongName: "ISO US Member Body"}
+	oidDotNotationToNames["1.2.840.10040"] = OIDName{ShortName: "X9-57", LongName: "X9.57"}
+	oidDotNotationToNames["1.2.840.10040.4"] = OIDName{ShortName: "X9cm", LongName: "X9.57 CM ?"}
+	oidDotNotationToNames["1.2.840.113549.1.1"] = OIDName{ShortName: "pkcs1", LongName: "pkcs1"}
+	oidDotNotationToNames["1.2.840.113549.1.5"] = OIDName{ShortName: "pkcs5", LongName: "pkcs5"}
+	oidDotNotationToNames["1.2.840.113549.1.9.16"] = OIDName{ShortName: "SMIME", LongName: "S/MIME"}
+	oidDotNotationToNames["1.2.840.113549.1.9.16.0"] = OIDName{ShortName: "id-smime-mod", LongName: "id-smime-mod"}
+	oidDotNotationToNames["1.2.840.113549.1.9.16.1"] = OIDName{ShortName: "id-smime-ct", LongName: "id-smime-ct"}
+	oidDotNotationToNames["1.2.840.113549.1.9.16.2"] = OIDName{ShortName: "id-smime-aa", LongName: "id-smime-aa"}
+	oidDotNotationToNames["1.2.840.113549.1.9.16.3"] = OIDName{ShortName: "id-smime-alg", LongName: "id-smime-alg"}
+	oidDotNotationToNames["1.2.840.113549.1.9.16.4"] = OIDName{ShortName: "id-smime-cd", LongName: "id-smime-cd"}
+	oidDotNotationToNames["1.2.840.113549.1.9.16.5"] = OIDName{ShortName: "id-smime-spq", LongName: "id-smime-spq"}
+	oidDotNotationToNames["1.2.840.113549.1.9.16.6"] = OIDName{ShortName: "id-smime-cti", LongName: "id-smime-cti"}
+	oidDotNotationToNames["1.2.840.113549.1.9.16.0.1"] = OIDName{ShortName: "id-smime-mod-cms", LongName: "id-smime-mod-cms"}
+	oidDotNotationToNames["1.2.840.113549.1.9.16.0.2"] = OIDName{ShortName: "id-smime-mod-ess", LongName: "id-smime-mod-ess"}
+	oidDotNotationToNames["1.2.840.113549.1.9.16.0.3"] = OIDName{ShortName: "id-smime-mod-oid", LongName: "id-smime-mod-oid"}
+	oidDotNotationToNames["1.2.840.113549.1.9.16.0.4"] = OIDName{ShortName: "id-smime-mod-msg-v3", LongName: "id-smime-mod-msg-v3"}
+	oidDotNotationToNames["1.2.840.113549.1.9.16.0.5"] = OIDName{ShortName: "id-smime-mod-ets-eSignature-88", LongName: "id-smime-mod-ets-eSignature-88"}
+	oidDotNotationToNames["1.2.840.113549.1.9.16.0.6"] = OIDName{ShortName: "id-smime-mod-ets-eSignature-97", LongName: "id-smime-mod-ets-eSignature-97"}
+	oidDotNotationToNames["1.2.840.113549.1.9.16.0.7"] = OIDName{ShortName: "id-smime-mod-ets-eSigPolicy-88", LongName: "id-smime-mod-ets-eSigPolicy-88"}
+	oidDotNotationToNames["1.2.840.113549.1.9.16.0.8"] = OIDName{ShortName: "id-smime-mod-ets-eSigPolicy-97", LongName: "id-smime-mod-ets-eSigPolicy-97"}
+	oidDotNotationToNames["1.2.840.113549.1.9.16.1.1"] = OIDName{ShortName: "id-smime-ct-receipt", LongName: "id-smime-ct-receipt"}
+	oidDotNotationToNames["1.2.840.113549.1.9.16.1.2"] = OIDName{ShortName: "id-smime-ct-authData", LongName: "id-smime-ct-authData"}
+	oidDotNotationToNames["1.2.840.113549.1.9.16.1.3"] = OIDName{ShortName: "id-smime-ct-publishCert", LongName: "id-smime-ct-publishCert"}
+	oidDotNotationToNames["1.2.840.113549.1.9.16.1.4"] = OIDName{ShortName: "id-smime-ct-TSTInfo", LongName: "id-smime-ct-TSTInfo"}
+	oidDotNotationToNames["1.2.840.113549.1.9.16.1.5"] = OIDName{ShortName: "id-smime-ct-TDTInfo", LongName: "id-smime-ct-TDTInfo"}
+	oidDotNotationToNames["1.2.840.113549.1.9.16.1.6"] = OIDName{ShortName: "id-smime-ct-contentInfo", LongName: "id-smime-ct-contentInfo"}
+	oidDotNotationToNames["1.2.840.113549.1.9.16.1.7"] = OIDName{ShortName: "id-smime-ct-DVCSRequestData", LongName: "id-smime-ct-DVCSRequestData"}
+	oidDotNotationToNames["1.2.840.113549.1.9.16.1.8"] = OIDName{ShortName: "id-smime-ct-DVCSResponseData", LongName: "id-smime-ct-DVCSResponseData"}
+	oidDotNotationToNames["1.2.840.113549.1.9.16.2.1"] = OIDName{ShortName: "id-smime-aa-receiptRequest", LongName: "id-smime-aa-receiptRequest"}
+	oidDotNotationToNames["1.2.840.113549.1.9.16.2.2"] = OIDName{ShortName: "id-smime-aa-securityLabel", LongName: "id-smime-aa-securityLabel"}
+	oidDotNotationToNames["1.2.840.113549.1.9.16.2.3"] = OIDName{ShortName: "id-smime-aa-mlExpandHistory", LongName: "id-smime-aa-mlExpandHistory"}
+	oidDotNotationToNames["1.2.840.113549.1.9.16.2.4"] = OIDName{ShortName: "id-smime-aa-contentHint", LongName: "id-smime-aa-contentHint"}
+	oidDotNotationToNames["1.2.840.113549.1.9.16.2.5"] = OIDName{ShortName: "id-smime-aa-msgSigDigest", LongName: "id-smime-aa-msgSigDigest"}
+	oidDotNotationToNames["1.2.840.113549.1.9.16.2.6"] = OIDName{ShortName: "id-smime-aa-encapContentType", LongName: "id-smime-aa-encapContentType"}
+	oidDotNotationToNames["1.2.840.113549.1.9.16.2.7"] = OIDName{ShortName: "id-smime-aa-contentIdentifier", LongName: "id-smime-aa-contentIdentifier"}
+	oidDotNotationToNames["1.2.840.113549.1.9.16.2.8"] = OIDName{ShortName: "id-smime-aa-macValue", LongName: "id-smime-aa-macValue"}
+	oidDotNotationToNames["1.2.840.113549.1.9.16.2.9"] = OIDName{ShortName: "id-smime-aa-equivalentLabels", LongName: "id-smime-aa-equivalentLabels"}
+	oidDotNotationToNames["1.2.840.113549.1.9.16.2.10"] = OIDName{ShortName: "id-smime-aa-contentReference", LongName: "id-smime-aa-contentReference"}
+	oidDotNotationToNames["1.2.840.113549.1.9.16.2.11"] = OIDName{ShortName: "id-smime-aa-encrypKeyPref", LongName: "id-smime-aa-encrypKeyPref"}
+	oidDotNotationToNames["1.2.840.113549.1.9.16.2.12"] = OIDName{ShortName: "id-smime-aa-signingCertificate", LongName: "id-smime-aa-signingCertificate"}
+	oidDotNotationToNames["1.2.840.113549.1.9.16.2.13"] = OIDName{ShortName: "id-smime-aa-smimeEncryptCerts", LongName: "id-smime-aa-smimeEncryptCerts"}
+	oidDotNotationToNames["1.2.840.113549.1.9.16.2.14"] = OIDName{ShortName: "id-smime-aa-timeStampToken", LongName: "id-smime-aa-timeStampToken"}
+	oidDotNotationToNames["1.2.840.113549.1.9.16.2.15"] = OIDName{ShortName: "id-smime-aa-ets-sigPolicyId", LongName: "id-smime-aa-ets-sigPolicyId"}
+	oidDotNotationToNames["1.2.840.113549.1.9.16.2.16"] = OIDName{ShortName: "id-smime-aa-ets-commitmentType", LongName: "id-smime-aa-ets-commitmentType"}
+	oidDotNotationToNames["1.2.840.113549.1.9.16.2.17"] = OIDName{ShortName: "id-smime-aa-ets-signerLocation", LongName: "id-smime-aa-ets-signerLocation"}
+	oidDotNotationToNames["1.2.840.113549.1.9.16.2.18"] = OIDName{ShortName: "id-smime-aa-ets-signerAttr", LongName: "id-smime-aa-ets-signerAttr"}
+	oidDotNotationToNames["1.2.840.113549.1.9.16.2.19"] = OIDName{ShortName: "id-smime-aa-ets-otherSigCert", LongName: "id-smime-aa-ets-otherSigCert"}
+	oidDotNotationToNames["1.2.840.113549.1.9.16.2.20"] = OIDName{ShortName: "id-smime-aa-ets-contentTimestamp", LongName: "id-smime-aa-ets-contentTimestamp"}
+	oidDotNotationToNames["1.2.840.113549.1.9.16.2.21"] = OIDName{ShortName: "id-smime-aa-ets-CertificateRefs", LongName: "id-smime-aa-ets-CertificateRefs"}
+	oidDotNotationToNames["1.2.840.113549.1.9.16.2.22"] = OIDName{ShortName: "id-smime-aa-ets-RevocationRefs", LongName: "id-smime-aa-ets-RevocationRefs"}
+	oidDotNotationToNames["1.2.840.113549.1.9.16.2.23"] = OIDName{ShortName: "id-smime-aa-ets-certValues", LongName: "id-smime-aa-ets-certValues"}
+	oidDotNotationToNames["1.2.840.113549.1.9.16.2.24"] = OIDName{ShortName: "id-smime-aa-ets-revocationValues", LongName: "id-smime-aa-ets-revocationValues"}
+	oidDotNotationToNames["1.2.840.113549.1.9.16.2.25"] = OIDName{ShortName: "id-smime-aa-ets-escTimeStamp", LongName: "id-smime-aa-ets-escTimeStamp"}
+	oidDotNotationToNames["1.2.840.113549.1.9.16.2.26"] = OIDName{ShortName: "id-smime-aa-ets-certCRLTimestamp", LongName: "id-smime-aa-ets-certCRLTimestamp"}
+	oidDotNotationToNames["1.2.840.113549.1.9.16.2.27"] = OIDName{ShortName: "id-smime-aa-ets-archiveTimeStamp", LongName: "id-smime-aa-ets-archiveTimeStamp"}
+	oidDotNotationToNames["1.2.840.113549.1.9.16.2.28"] = OIDName{ShortName: "id-smime-aa-signatureType", LongName: "id-smime-aa-signatureType"}
+	oidDotNotationToNames["1.2.840.113549.1.9.16.2.29"] = OIDName{ShortName: "id-smime-aa-dvcs-dvc", LongName: "id-smime-aa-dvcs-dvc"}
+	oidDotNotationToNames["1.2.840.113549.1.9.16.3.1"] = OIDName{ShortName: "id-smime-alg-ESDHwith3DES", LongName: "id-smime-alg-ESDHwith3DES"}
+	oidDotNotationToNames["1.2.840.113549.1.9.16.3.2"] = OIDName{ShortName: "id-smime-alg-ESDHwithRC2", LongName: "id-smime-alg-ESDHwithRC2"}
+	oidDotNotationToNames["1.2.840.113549.1.9.16.3.3"] = OIDName{ShortName: "id-smime-alg-3DESwrap", LongName: "id-smime-alg-3DESwrap"}
+	oidDotNotationToNames["1.2.840.113549.1.9.16.3.4"] = OIDName{ShortName: "id-smime-alg-RC2wrap", LongName: "id-smime-alg-RC2wrap"}
+	oidDotNotationToNames["1.2.840.113549.1.9.16.3.5"] = OIDName{ShortName: "id-smime-alg-ESDH", LongName: "id-smime-alg-ESDH"}
+	oidDotNotationToNames["1.2.840.113549.1.9.16.3.6"] = OIDName{ShortName: "id-smime-alg-CMS3DESwrap", LongName: "id-smime-alg-CMS3DESwrap"}
+	oidDotNotationToNames["1.2.840.113549.1.9.16.3.7"] = OIDName{ShortName: "id-smime-alg-CMSRC2wrap", LongName: "id-smime-alg-CMSRC2wrap"}
+	oidDotNotationToNames["1.2.840.113549.1.9.16.4.1"] = OIDName{ShortName: "id-smime-cd-ldap", LongName: "id-smime-cd-ldap"}
+	oidDotNotationToNames["1.2.840.113549.1.9.16.5.1"] = OIDName{ShortName: "id-smime-spq-ets-sqt-uri", LongName: "id-smime-spq-ets-sqt-uri"}
+	oidDotNotationToNames["1.2.840.113549.1.9.16.5.2"] = OIDName{ShortName: "id-smime-spq-ets-sqt-unotice", LongName: "id-smime-spq-ets-sqt-unotice"}
+	oidDotNotationToNames["1.2.840.113549.1.9.16.6.1"] = OIDName{ShortName: "id-smime-cti-ets-proofOfOrigin", LongName: "id-smime-cti-ets-proofOfOrigin"}
+	oidDotNotationToNames["1.2.840.113549.1.9.16.6.2"] = OIDName{ShortName: "id-smime-cti-ets-proofOfReceipt", LongName: "id-smime-cti-ets-proofOfReceipt"}
+	oidDotNotationToNames["1.2.840.113549.1.9.16.6.3"] = OIDName{ShortName: "id-smime-cti-ets-proofOfDelivery", LongName: "id-smime-cti-ets-proofOfDelivery"}
+	oidDotNotationToNames["1.2.840.113549.1.9.16.6.4"] = OIDName{ShortName: "id-smime-cti-ets-proofOfSender", LongName: "id-smime-cti-ets-proofOfSender"}
+	oidDotNotationToNames["1.2.840.113549.1.9.16.6.5"] = OIDName{ShortName: "id-smime-cti-ets-proofOfApproval", LongName: "id-smime-cti-ets-proofOfApproval"}
+	oidDotNotationToNames["1.2.840.113549.1.9.16.6.6"] = OIDName{ShortName: "id-smime-cti-ets-proofOfCreation", LongName: "id-smime-cti-ets-proofOfCreation"}
+	oidDotNotationToNames["1.2.840.113549.2.4"] = OIDName{ShortName: "MD4", LongName: "md4"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.0"] = OIDName{ShortName: "id-pkix-mod", LongName: "id-pkix-mod"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.2"] = OIDName{ShortName: "id-qt", LongName: "id-qt"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.4"] = OIDName{ShortName: "id-it", LongName: "id-it"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.5"] = OIDName{ShortName: "id-pkip", LongName: "id-pkip"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.6"] = OIDName{ShortName: "id-alg", LongName: "id-alg"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.7"] = OIDName{ShortName: "id-cmc", LongName: "id-cmc"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.8"] = OIDName{ShortName: "id-on", LongName: "id-on"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.9"] = OIDName{ShortName: "id-pda", LongName: "id-pda"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.10"] = OIDName{ShortName: "id-aca", LongName: "id-aca"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.11"] = OIDName{ShortName: "id-qcs", LongName: "id-qcs"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.12"] = OIDName{ShortName: "id-cct", LongName: "id-cct"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.0.1"] = OIDName{ShortName: "id-pkix1-explicit-88", LongName: "id-pkix1-explicit-88"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.0.2"] = OIDName{ShortName: "id-pkix1-implicit-88", LongName: "id-pkix1-implicit-88"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.0.3"] = OIDName{ShortName: "id-pkix1-explicit-93", LongName: "id-pkix1-explicit-93"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.0.4"] = OIDName{ShortName: "id-pkix1-implicit-93", LongName: "id-pkix1-implicit-93"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.0.5"] = OIDName{ShortName: "id-mod-crmf", LongName: "id-mod-crmf"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.0.6"] = OIDName{ShortName: "id-mod-cmc", LongName: "id-mod-cmc"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.0.7"] = OIDName{ShortName: "id-mod-kea-profile-88", LongName: "id-mod-kea-profile-88"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.0.8"] = OIDName{ShortName: "id-mod-kea-profile-93", LongName: "id-mod-kea-profile-93"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.0.9"] = OIDName{ShortName: "id-mod-cmp", LongName: "id-mod-cmp"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.0.10"] = OIDName{ShortName: "id-mod-qualified-cert-88", LongName: "id-mod-qualified-cert-88"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.0.11"] = OIDName{ShortName: "id-mod-qualified-cert-93", LongName: "id-mod-qualified-cert-93"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.0.12"] = OIDName{ShortName: "id-mod-attribute-cert", LongName: "id-mod-attribute-cert"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.0.13"] = OIDName{ShortName: "id-mod-timestamp-protocol", LongName: "id-mod-timestamp-protocol"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.0.14"] = OIDName{ShortName: "id-mod-ocsp", LongName: "id-mod-ocsp"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.0.15"] = OIDName{ShortName: "id-mod-dvcs", LongName: "id-mod-dvcs"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.0.16"] = OIDName{ShortName: "id-mod-cmp2000", LongName: "id-mod-cmp2000"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.1.2"] = OIDName{ShortName: "biometricInfo", LongName: "Biometric Info"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.1.3"] = OIDName{ShortName: "qcStatements", LongName: "qcStatements"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.1.4"] = OIDName{ShortName: "ac-auditEntity", LongName: "ac-auditEntity"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.1.5"] = OIDName{ShortName: "ac-targeting", LongName: "ac-targeting"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.1.6"] = OIDName{ShortName: "aaControls", LongName: "aaControls"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.1.7"] = OIDName{ShortName: "sbgp-ipAddrBlock", LongName: "sbgp-ipAddrBlock"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.1.8"] = OIDName{ShortName: "sbgp-autonomousSysNum", LongName: "sbgp-autonomousSysNum"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.1.9"] = OIDName{ShortName: "sbgp-routerIdentifier", LongName: "sbgp-routerIdentifier"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.2.3"] = OIDName{ShortName: "textNotice", LongName: "textNotice"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.3.5"] = OIDName{ShortName: "ipsecEndSystem", LongName: "IPSec End System"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.3.6"] = OIDName{ShortName: "ipsecTunnel", LongName: "IPSec Tunnel"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.3.7"] = OIDName{ShortName: "ipsecUser", LongName: "IPSec User"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.3.10"] = OIDName{ShortName: "DVCS", LongName: "dvcs"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.4.1"] = OIDName{ShortName: "id-it-caProtEncCert", LongName: "id-it-caProtEncCert"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.4.2"] = OIDName{ShortName: "id-it-signKeyPairTypes", LongName: "id-it-signKeyPairTypes"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.4.3"] = OIDName{ShortName: "id-it-encKeyPairTypes", LongName: "id-it-encKeyPairTypes"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.4.4"] = OIDName{ShortName: "id-it-preferredSymmAlg", LongName: "id-it-preferredSymmAlg"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.4.5"] = OIDName{ShortName: "id-it-caKeyUpdateInfo", LongName: "id-it-caKeyUpdateInfo"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.4.6"] = OIDName{ShortName: "id-it-currentCRL", LongName: "id-it-currentCRL"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.4.7"] = OIDName{ShortName: "id-it-unsupportedOIDs", LongName: "id-it-unsupportedOIDs"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.4.8"] = OIDName{ShortName: "id-it-subscriptionRequest", LongName: "id-it-subscriptionRequest"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.4.9"] = OIDName{ShortName: "id-it-subscriptionResponse", LongName: "id-it-subscriptionResponse"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.4.10"] = OIDName{ShortName: "id-it-keyPairParamReq", LongName: "id-it-keyPairParamReq"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.4.11"] = OIDName{ShortName: "id-it-keyPairParamRep", LongName: "id-it-keyPairParamRep"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.4.12"] = OIDName{ShortName: "id-it-revPassphrase", LongName: "id-it-revPassphrase"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.4.13"] = OIDName{ShortName: "id-it-implicitConfirm", LongName: "id-it-implicitConfirm"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.4.14"] = OIDName{ShortName: "id-it-confirmWaitTime", LongName: "id-it-confirmWaitTime"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.4.15"] = OIDName{ShortName: "id-it-origPKIMessage", LongName: "id-it-origPKIMessage"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.5.1"] = OIDName{ShortName: "id-regCtrl", LongName: "id-regCtrl"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.5.2"] = OIDName{ShortName: "id-regInfo", LongName: "id-regInfo"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.5.1.1"] = OIDName{ShortName: "id-regCtrl-regToken", LongName: "id-regCtrl-regToken"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.5.1.2"] = OIDName{ShortName: "id-regCtrl-authenticator", LongName: "id-regCtrl-authenticator"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.5.1.3"] = OIDName{ShortName: "id-regCtrl-pkiPublicationInfo", LongName: "id-regCtrl-pkiPublicationInfo"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.5.1.4"] = OIDName{ShortName: "id-regCtrl-pkiArchiveOptions", LongName: "id-regCtrl-pkiArchiveOptions"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.5.1.5"] = OIDName{ShortName: "id-regCtrl-oldCertID", LongName: "id-regCtrl-oldCertID"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.5.1.6"] = OIDName{ShortName: "id-regCtrl-protocolEncrKey", LongName: "id-regCtrl-protocolEncrKey"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.5.2.1"] = OIDName{ShortName: "id-regInfo-utf8Pairs", LongName: "id-regInfo-utf8Pairs"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.5.2.2"] = OIDName{ShortName: "id-regInfo-certReq", LongName: "id-regInfo-certReq"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.6.1"] = OIDName{ShortName: "id-alg-des40", LongName: "id-alg-des40"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.6.2"] = OIDName{ShortName: "id-alg-noSignature", LongName: "id-alg-noSignature"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.6.3"] = OIDName{ShortName: "id-alg-dh-sig-hmac-sha1", LongName: "id-alg-dh-sig-hmac-sha1"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.6.4"] = OIDName{ShortName: "id-alg-dh-pop", LongName: "id-alg-dh-pop"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.7.1"] = OIDName{ShortName: "id-cmc-statusInfo", LongName: "id-cmc-statusInfo"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.7.2"] = OIDName{ShortName: "id-cmc-identification", LongName: "id-cmc-identification"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.7.3"] = OIDName{ShortName: "id-cmc-identityProof", LongName: "id-cmc-identityProof"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.7.4"] = OIDName{ShortName: "id-cmc-dataReturn", LongName: "id-cmc-dataReturn"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.7.5"] = OIDName{ShortName: "id-cmc-transactionId", LongName: "id-cmc-transactionId"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.7.6"] = OIDName{ShortName: "id-cmc-senderNonce", LongName: "id-cmc-senderNonce"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.7.7"] = OIDName{ShortName: "id-cmc-recipientNonce", LongName: "id-cmc-recipientNonce"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.7.8"] = OIDName{ShortName: "id-cmc-addExtensions", LongName: "id-cmc-addExtensions"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.7.9"] = OIDName{ShortName: "id-cmc-encryptedPOP", LongName: "id-cmc-encryptedPOP"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.7.10"] = OIDName{ShortName: "id-cmc-decryptedPOP", LongName: "id-cmc-decryptedPOP"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.7.11"] = OIDName{ShortName: "id-cmc-lraPOPWitness", LongName: "id-cmc-lraPOPWitness"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.7.15"] = OIDName{ShortName: "id-cmc-getCert", LongName: "id-cmc-getCert"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.7.16"] = OIDName{ShortName: "id-cmc-getCRL", LongName: "id-cmc-getCRL"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.7.17"] = OIDName{ShortName: "id-cmc-revokeRequest", LongName: "id-cmc-revokeRequest"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.7.18"] = OIDName{ShortName: "id-cmc-regInfo", LongName: "id-cmc-regInfo"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.7.19"] = OIDName{ShortName: "id-cmc-responseInfo", LongName: "id-cmc-responseInfo"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.7.21"] = OIDName{ShortName: "id-cmc-queryPending", LongName: "id-cmc-queryPending"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.7.22"] = OIDName{ShortName: "id-cmc-popLinkRandom", LongName: "id-cmc-popLinkRandom"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.7.23"] = OIDName{ShortName: "id-cmc-popLinkWitness", LongName: "id-cmc-popLinkWitness"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.7.24"] = OIDName{ShortName: "id-cmc-confirmCertAcceptance", LongName: "id-cmc-confirmCertAcceptance"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.8.1"] = OIDName{ShortName: "id-on-personalData", LongName: "id-on-personalData"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.9.1"] = OIDName{ShortName: "id-pda-dateOfBirth", LongName: "id-pda-dateOfBirth"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.9.2"] = OIDName{ShortName: "id-pda-placeOfBirth", LongName: "id-pda-placeOfBirth"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.9.3"] = OIDName{ShortName: "id-pda-gender", LongName: "id-pda-gender"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.9.4"] = OIDName{ShortName: "id-pda-countryOfCitizenship", LongName: "id-pda-countryOfCitizenship"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.9.5"] = OIDName{ShortName: "id-pda-countryOfResidence", LongName: "id-pda-countryOfResidence"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.10.1"] = OIDName{ShortName: "id-aca-authenticationInfo", LongName: "id-aca-authenticationInfo"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.10.2"] = OIDName{ShortName: "id-aca-accessIdentity", LongName: "id-aca-accessIdentity"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.10.3"] = OIDName{ShortName: "id-aca-chargingIdentity", LongName: "id-aca-chargingIdentity"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.10.4"] = OIDName{ShortName: "id-aca-group", LongName: "id-aca-group"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.10.5"] = OIDName{ShortName: "id-aca-role", LongName: "id-aca-role"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.11.1"] = OIDName{ShortName: "id-qcs-pkixQCSyntax-v1", LongName: "id-qcs-pkixQCSyntax-v1"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.12.1"] = OIDName{ShortName: "id-cct-crs", LongName: "id-cct-crs"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.12.2"] = OIDName{ShortName: "id-cct-PKIData", LongName: "id-cct-PKIData"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.12.3"] = OIDName{ShortName: "id-cct-PKIResponse", LongName: "id-cct-PKIResponse"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.48.3"] = OIDName{ShortName: "ad_timestamping", LongName: "AD Time Stamping"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.48.4"] = OIDName{ShortName: "AD_DVCS", LongName: "ad dvcs"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.48.1.1"] = OIDName{ShortName: "basicOCSPResponse", LongName: "Basic OCSP Response"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.48.1.2"] = OIDName{ShortName: "Nonce", LongName: "OCSP Nonce"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.48.1.3"] = OIDName{ShortName: "CrlID", LongName: "OCSP CRL ID"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.48.1.4"] = OIDName{ShortName: "acceptableResponses", LongName: "Acceptable OCSP Responses"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.48.1.5"] = OIDName{ShortName: "noCheck", LongName: "OCSP No Check"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.48.1.6"] = OIDName{ShortName: "archiveCutoff", LongName: "OCSP Archive Cutoff"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.48.1.7"] = OIDName{ShortName: "serviceLocator", LongName: "OCSP Service Locator"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.48.1.8"] = OIDName{ShortName: "extendedStatus", LongName: "Extended OCSP Status"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.48.1.9"] = OIDName{ShortName: "valid", LongName: "valid"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.48.1.10"] = OIDName{ShortName: "path", LongName: "path"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.48.1.11"] = OIDName{ShortName: "trustRoot", LongName: "Trust Root"}
+	oidDotNotationToNames["1.3.14.3.2"] = OIDName{ShortName: "algorithm", LongName: "algorithm"}
+	oidDotNotationToNames["1.3.14.3.2.11"] = OIDName{ShortName: "rsaSignature", LongName: "rsaSignature"}
+	oidDotNotationToNames["2.5.8"] = OIDName{ShortName: "X500algorithms", LongName: "directory services - algorithms"}
+	oidDotNotationToNames["1.3"] = OIDName{ShortName: "ORG", LongName: "org"}
+	oidDotNotationToNames["1.3.6"] = OIDName{ShortName: "DOD", LongName: "dod"}
+	oidDotNotationToNames["1.3.6.1"] = OIDName{ShortName: "IANA", LongName: "iana"}
+	oidDotNotationToNames["1.3.6.1.1"] = OIDName{ShortName: "directory", LongName: "Directory"}
+	oidDotNotationToNames["1.3.6.1.2"] = OIDName{ShortName: "mgmt", LongName: "Management"}
+	oidDotNotationToNames["1.3.6.1.3"] = OIDName{ShortName: "experimental", LongName: "Experimental"}
+	oidDotNotationToNames["1.3.6.1.4"] = OIDName{ShortName: "private", LongName: "Private"}
+	oidDotNotationToNames["1.3.6.1.5"] = OIDName{ShortName: "security", LongName: "Security"}
+	oidDotNotationToNames["1.3.6.1.6"] = OIDName{ShortName: "snmpv2", LongName: "SNMPv2"}
+	oidDotNotationToNames["1.3.6.1.7"] = OIDName{ShortName: "Mail", LongName: "Mail"}
+	oidDotNotationToNames["1.3.6.1.4.1"] = OIDName{ShortName: "enterprises", LongName: "Enterprises"}
+	oidDotNotationToNames["1.3.6.1.4.1.1466.344"] = OIDName{ShortName: "dcobject", LongName: "dcObject"}
+	oidDotNotationToNames["0.9.2342.19200300.100.1.25"] = OIDName{ShortName: "DC", LongName: "domainComponent"}
+	oidDotNotationToNames["0.9.2342.19200300.100.4.13"] = OIDName{ShortName: "domain", LongName: "Domain"}
+	oidDotNotationToNames["0.0"] = OIDName{ShortName: "NULL", LongName: "NULL"}
+	oidDotNotationToNames["2.5.1.5"] = OIDName{ShortName: "selected-attribute-types", LongName: "Selected Attribute Types"}
+	oidDotNotationToNames["2.5.1.5.55"] = OIDName{ShortName: "clearance", LongName: "clearance"}
+	oidDotNotationToNames["1.2.840.113549.1.1.3"] = OIDName{ShortName: "RSA-MD4", LongName: "md4WithRSAEncryption"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.1.10"] = OIDName{ShortName: "ac-proxying", LongName: "ac-proxying"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.1.11"] = OIDName{ShortName: "subjectInfoAccess", LongName: "Subject Information Access"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.10.6"] = OIDName{ShortName: "id-aca-encAttrs", LongName: "id-aca-encAttrs"}
+	oidDotNotationToNames["2.5.4.72"] = OIDName{ShortName: "role", LongName: "role"}
+	oidDotNotationToNames["2.5.29.36"] = OIDName{ShortName: "policyConstraints", LongName: "X509v3 Policy Constraints"}
+	oidDotNotationToNames["2.5.29.55"] = OIDName{ShortName: "targetInformation", LongName: "X509v3 AC Targeting"}
+	oidDotNotationToNames["2.5.29.56"] = OIDName{ShortName: "noRevAvail", LongName: "X509v3 No Revocation Available"}
+	oidDotNotationToNames["0.0"] = OIDName{ShortName: "NULL", LongName: "NULL"}
+	oidDotNotationToNames["1.2.840.10045"] = OIDName{ShortName: "ansi-X9-62", LongName: "ANSI X9.62"}
+	oidDotNotationToNames["1.2.840.10045.1.1"] = OIDName{ShortName: "prime-field", LongName: "prime-field"}
+	oidDotNotationToNames["1.2.840.10045.1.2"] = OIDName{ShortName: "characteristic-two-field", LongName: "characteristic-two-field"}
+	oidDotNotationToNames["1.2.840.10045.2.1"] = OIDName{ShortName: "id-ecPublicKey", LongName: "id-ecPublicKey"}
+	oidDotNotationToNames["1.2.840.10045.3.1.1"] = OIDName{ShortName: "prime192v1", LongName: "prime192v1"}
+	oidDotNotationToNames["1.2.840.10045.3.1.2"] = OIDName{ShortName: "prime192v2", LongName: "prime192v2"}
+	oidDotNotationToNames["1.2.840.10045.3.1.3"] = OIDName{ShortName: "prime192v3", LongName: "prime192v3"}
+	oidDotNotationToNames["1.2.840.10045.3.1.4"] = OIDName{ShortName: "prime239v1", LongName: "prime239v1"}
+	oidDotNotationToNames["1.2.840.10045.3.1.5"] = OIDName{ShortName: "prime239v2", LongName: "prime239v2"}
+	oidDotNotationToNames["1.2.840.10045.3.1.6"] = OIDName{ShortName: "prime239v3", LongName: "prime239v3"}
+	oidDotNotationToNames["1.2.840.10045.3.1.7"] = OIDName{ShortName: "prime256v1", LongName: "prime256v1"}
+	oidDotNotationToNames["1.2.840.10045.4.1"] = OIDName{ShortName: "ecdsa-with-SHA1", LongName: "ecdsa-with-SHA1"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.17.1"] = OIDName{ShortName: "CSPName", LongName: "Microsoft CSP Name"}
+	oidDotNotationToNames["2.16.840.1.101.3.4.1.1"] = OIDName{ShortName: "AES-128-ECB", LongName: "aes-128-ecb"}
+	oidDotNotationToNames["2.16.840.1.101.3.4.1.2"] = OIDName{ShortName: "AES-128-CBC", LongName: "aes-128-cbc"}
+	oidDotNotationToNames["2.16.840.1.101.3.4.1.3"] = OIDName{ShortName: "AES-128-OFB", LongName: "aes-128-ofb"}
+	oidDotNotationToNames["2.16.840.1.101.3.4.1.4"] = OIDName{ShortName: "AES-128-CFB", LongName: "aes-128-cfb"}
+	oidDotNotationToNames["2.16.840.1.101.3.4.1.21"] = OIDName{ShortName: "AES-192-ECB", LongName: "aes-192-ecb"}
+	oidDotNotationToNames["2.16.840.1.101.3.4.1.22"] = OIDName{ShortName: "AES-192-CBC", LongName: "aes-192-cbc"}
+	oidDotNotationToNames["2.16.840.1.101.3.4.1.23"] = OIDName{ShortName: "AES-192-OFB", LongName: "aes-192-ofb"}
+	oidDotNotationToNames["2.16.840.1.101.3.4.1.24"] = OIDName{ShortName: "AES-192-CFB", LongName: "aes-192-cfb"}
+	oidDotNotationToNames["2.16.840.1.101.3.4.1.41"] = OIDName{ShortName: "AES-256-ECB", LongName: "aes-256-ecb"}
+	oidDotNotationToNames["2.16.840.1.101.3.4.1.42"] = OIDName{ShortName: "AES-256-CBC", LongName: "aes-256-cbc"}
+	oidDotNotationToNames["2.16.840.1.101.3.4.1.43"] = OIDName{ShortName: "AES-256-OFB", LongName: "aes-256-ofb"}
+	oidDotNotationToNames["2.16.840.1.101.3.4.1.44"] = OIDName{ShortName: "AES-256-CFB", LongName: "aes-256-cfb"}
+	oidDotNotationToNames["2.5.29.23"] = OIDName{ShortName: "holdInstructionCode", LongName: "Hold Instruction Code"}
+	oidDotNotationToNames["1.2.840.10040.2.1"] = OIDName{ShortName: "holdInstructionNone", LongName: "Hold Instruction None"}
+	oidDotNotationToNames["1.2.840.10040.2.2"] = OIDName{ShortName: "holdInstructionCallIssuer", LongName: "Hold Instruction Call Issuer"}
+	oidDotNotationToNames["1.2.840.10040.2.3"] = OIDName{ShortName: "holdInstructionReject", LongName: "Hold Instruction Reject"}
+	oidDotNotationToNames["0.9"] = OIDName{ShortName: "data", LongName: "data"}
+	oidDotNotationToNames["0.9.2342"] = OIDName{ShortName: "pss", LongName: "pss"}
+	oidDotNotationToNames["0.9.2342.19200300"] = OIDName{ShortName: "ucl", LongName: "ucl"}
+	oidDotNotationToNames["0.9.2342.19200300.100"] = OIDName{ShortName: "pilot", LongName: "pilot"}
+	oidDotNotationToNames["0.9.2342.19200300.100.1"] = OIDName{ShortName: "pilotAttributeType", LongName: "pilotAttributeType"}
+	oidDotNotationToNames["0.9.2342.19200300.100.3"] = OIDName{ShortName: "pilotAttributeSyntax", LongName: "pilotAttributeSyntax"}
+	oidDotNotationToNames["0.9.2342.19200300.100.4"] = OIDName{ShortName: "pilotObjectClass", LongName: "pilotObjectClass"}
+	oidDotNotationToNames["0.9.2342.19200300.100.10"] = OIDName{ShortName: "pilotGroups", LongName: "pilotGroups"}
+	oidDotNotationToNames["0.9.2342.19200300.100.3.4"] = OIDName{ShortName: "iA5StringSyntax", LongName: "iA5StringSyntax"}
+	oidDotNotationToNames["0.9.2342.19200300.100.3.5"] = OIDName{ShortName: "caseIgnoreIA5StringSyntax", LongName: "caseIgnoreIA5StringSyntax"}
+	oidDotNotationToNames["0.9.2342.19200300.100.4.3"] = OIDName{ShortName: "pilotObject", LongName: "pilotObject"}
+	oidDotNotationToNames["0.9.2342.19200300.100.4.4"] = OIDName{ShortName: "pilotPerson", LongName: "pilotPerson"}
+	oidDotNotationToNames["0.9.2342.19200300.100.4.5"] = OIDName{ShortName: "account", LongName: "account"}
+	oidDotNotationToNames["0.9.2342.19200300.100.4.6"] = OIDName{ShortName: "document", LongName: "document"}
+	oidDotNotationToNames["0.9.2342.19200300.100.4.7"] = OIDName{ShortName: "room", LongName: "room"}
+	oidDotNotationToNames["0.9.2342.19200300.100.4.9"] = OIDName{ShortName: "documentSeries", LongName: "documentSeries"}
+	oidDotNotationToNames["0.9.2342.19200300.100.4.14"] = OIDName{ShortName: "rFC822localPart", LongName: "rFC822localPart"}
+	oidDotNotationToNames["0.9.2342.19200300.100.4.15"] = OIDName{ShortName: "dNSDomain", LongName: "dNSDomain"}
+	oidDotNotationToNames["0.9.2342.19200300.100.4.17"] = OIDName{ShortName: "domainRelatedObject", LongName: "domainRelatedObject"}
+	oidDotNotationToNames["0.9.2342.19200300.100.4.18"] = OIDName{ShortName: "friendlyCountry", LongName: "friendlyCountry"}
+	oidDotNotationToNames["0.9.2342.19200300.100.4.19"] = OIDName{ShortName: "simpleSecurityObject", LongName: "simpleSecurityObject"}
+	oidDotNotationToNames["0.9.2342.19200300.100.4.20"] = OIDName{ShortName: "pilotOrganization", LongName: "pilotOrganization"}
+	oidDotNotationToNames["0.9.2342.19200300.100.4.21"] = OIDName{ShortName: "pilotDSA", LongName: "pilotDSA"}
+	oidDotNotationToNames["0.9.2342.19200300.100.4.22"] = OIDName{ShortName: "qualityLabelledData", LongName: "qualityLabelledData"}
+	oidDotNotationToNames["0.9.2342.19200300.100.1.1"] = OIDName{ShortName: "UID", LongName: "userId"}
+	oidDotNotationToNames["0.9.2342.19200300.100.1.2"] = OIDName{ShortName: "textEncodedORAddress", LongName: "textEncodedORAddress"}
+	oidDotNotationToNames["0.9.2342.19200300.100.1.3"] = OIDName{ShortName: "mail", LongName: "rfc822Mailbox"}
+	oidDotNotationToNames["0.9.2342.19200300.100.1.4"] = OIDName{ShortName: "info", LongName: "info"}
+	oidDotNotationToNames["0.9.2342.19200300.100.1.5"] = OIDName{ShortName: "favouriteDrink", LongName: "favouriteDrink"}
+	oidDotNotationToNames["0.9.2342.19200300.100.1.6"] = OIDName{ShortName: "roomNumber", LongName: "roomNumber"}
+	oidDotNotationToNames["0.9.2342.19200300.100.1.7"] = OIDName{ShortName: "photo", LongName: "photo"}
+	oidDotNotationToNames["0.9.2342.19200300.100.1.8"] = OIDName{ShortName: "userClass", LongName: "userClass"}
+	oidDotNotationToNames["0.9.2342.19200300.100.1.9"] = OIDName{ShortName: "host", LongName: "host"}
+	oidDotNotationToNames["0.9.2342.19200300.100.1.10"] = OIDName{ShortName: "manager", LongName: "manager"}
+	oidDotNotationToNames["0.9.2342.19200300.100.1.11"] = OIDName{ShortName: "documentIdentifier", LongName: "documentIdentifier"}
+	oidDotNotationToNames["0.9.2342.19200300.100.1.12"] = OIDName{ShortName: "documentTitle", LongName: "documentTitle"}
+	oidDotNotationToNames["0.9.2342.19200300.100.1.13"] = OIDName{ShortName: "documentVersion", LongName: "documentVersion"}
+	oidDotNotationToNames["0.9.2342.19200300.100.1.14"] = OIDName{ShortName: "documentAuthor", LongName: "documentAuthor"}
+	oidDotNotationToNames["0.9.2342.19200300.100.1.15"] = OIDName{ShortName: "documentLocation", LongName: "documentLocation"}
+	oidDotNotationToNames["0.9.2342.19200300.100.1.20"] = OIDName{ShortName: "homeTelephoneNumber", LongName: "homeTelephoneNumber"}
+	oidDotNotationToNames["0.9.2342.19200300.100.1.21"] = OIDName{ShortName: "secretary", LongName: "secretary"}
+	oidDotNotationToNames["0.9.2342.19200300.100.1.22"] = OIDName{ShortName: "otherMailbox", LongName: "otherMailbox"}
+	oidDotNotationToNames["0.9.2342.19200300.100.1.23"] = OIDName{ShortName: "lastModifiedTime", LongName: "lastModifiedTime"}
+	oidDotNotationToNames["0.9.2342.19200300.100.1.24"] = OIDName{ShortName: "lastModifiedBy", LongName: "lastModifiedBy"}
+	oidDotNotationToNames["0.9.2342.19200300.100.1.26"] = OIDName{ShortName: "aRecord", LongName: "aRecord"}
+	oidDotNotationToNames["0.9.2342.19200300.100.1.27"] = OIDName{ShortName: "pilotAttributeType27", LongName: "pilotAttributeType27"}
+	oidDotNotationToNames["0.9.2342.19200300.100.1.28"] = OIDName{ShortName: "mXRecord", LongName: "mXRecord"}
+	oidDotNotationToNames["0.9.2342.19200300.100.1.29"] = OIDName{ShortName: "nSRecord", LongName: "nSRecord"}
+	oidDotNotationToNames["0.9.2342.19200300.100.1.30"] = OIDName{ShortName: "sOARecord", LongName: "sOARecord"}
+	oidDotNotationToNames["0.9.2342.19200300.100.1.31"] = OIDName{ShortName: "cNAMERecord", LongName: "cNAMERecord"}
+	oidDotNotationToNames["0.9.2342.19200300.100.1.37"] = OIDName{ShortName: "associatedDomain", LongName: "associatedDomain"}
+	oidDotNotationToNames["0.9.2342.19200300.100.1.38"] = OIDName{ShortName: "associatedName", LongName: "associatedName"}
+	oidDotNotationToNames["0.9.2342.19200300.100.1.39"] = OIDName{ShortName: "homePostalAddress", LongName: "homePostalAddress"}
+	oidDotNotationToNames["0.9.2342.19200300.100.1.40"] = OIDName{ShortName: "personalTitle", LongName: "personalTitle"}
+	oidDotNotationToNames["0.9.2342.19200300.100.1.41"] = OIDName{ShortName: "mobileTelephoneNumber", LongName: "mobileTelephoneNumber"}
+	oidDotNotationToNames["0.9.2342.19200300.100.1.42"] = OIDName{ShortName: "pagerTelephoneNumber", LongName: "pagerTelephoneNumber"}
+	oidDotNotationToNames["0.9.2342.19200300.100.1.43"] = OIDName{ShortName: "friendlyCountryName", LongName: "friendlyCountryName"}
+	oidDotNotationToNames["0.9.2342.19200300.100.1.45"] = OIDName{ShortName: "organizationalStatus", LongName: "organizationalStatus"}
+	oidDotNotationToNames["0.9.2342.19200300.100.1.46"] = OIDName{ShortName: "janetMailbox", LongName: "janetMailbox"}
+	oidDotNotationToNames["0.9.2342.19200300.100.1.47"] = OIDName{ShortName: "mailPreferenceOption", LongName: "mailPreferenceOption"}
+	oidDotNotationToNames["0.9.2342.19200300.100.1.48"] = OIDName{ShortName: "buildingName", LongName: "buildingName"}
+	oidDotNotationToNames["0.9.2342.19200300.100.1.49"] = OIDName{ShortName: "dSAQuality", LongName: "dSAQuality"}
+	oidDotNotationToNames["0.9.2342.19200300.100.1.50"] = OIDName{ShortName: "singleLevelQuality", LongName: "singleLevelQuality"}
+	oidDotNotationToNames["0.9.2342.19200300.100.1.51"] = OIDName{ShortName: "subtreeMinimumQuality", LongName: "subtreeMinimumQuality"}
+	oidDotNotationToNames["0.9.2342.19200300.100.1.52"] = OIDName{ShortName: "subtreeMaximumQuality", LongName: "subtreeMaximumQuality"}
+	oidDotNotationToNames["0.9.2342.19200300.100.1.53"] = OIDName{ShortName: "personalSignature", LongName: "personalSignature"}
+	oidDotNotationToNames["0.9.2342.19200300.100.1.54"] = OIDName{ShortName: "dITRedirect", LongName: "dITRedirect"}
+	oidDotNotationToNames["0.9.2342.19200300.100.1.55"] = OIDName{ShortName: "audio", LongName: "audio"}
+	oidDotNotationToNames["0.9.2342.19200300.100.1.56"] = OIDName{ShortName: "documentPublisher", LongName: "documentPublisher"}
+	oidDotNotationToNames["2.5.4.45"] = OIDName{ShortName: "x500UniqueIdentifier", LongName: "x500UniqueIdentifier"}
+	oidDotNotationToNames["1.3.6.1.7.1"] = OIDName{ShortName: "mime-mhs", LongName: "MIME MHS"}
+	oidDotNotationToNames["1.3.6.1.7.1.1"] = OIDName{ShortName: "mime-mhs-headings", LongName: "mime-mhs-headings"}
+	oidDotNotationToNames["1.3.6.1.7.1.2"] = OIDName{ShortName: "mime-mhs-bodies", LongName: "mime-mhs-bodies"}
+	oidDotNotationToNames["1.3.6.1.7.1.1.1"] = OIDName{ShortName: "id-hex-partial-message", LongName: "id-hex-partial-message"}
+	oidDotNotationToNames["1.3.6.1.7.1.1.2"] = OIDName{ShortName: "id-hex-multipart-message", LongName: "id-hex-multipart-message"}
+	oidDotNotationToNames["2.5.4.44"] = OIDName{ShortName: "generationQualifier", LongName: "generationQualifier"}
+	oidDotNotationToNames["2.5.4.65"] = OIDName{ShortName: "pseudonym", LongName: "pseudonym"}
+	oidDotNotationToNames["2.23.42"] = OIDName{ShortName: "id-set", LongName: "Secure Electronic Transactions"}
+	oidDotNotationToNames["2.23.42.0"] = OIDName{ShortName: "set-ctype", LongName: "content types"}
+	oidDotNotationToNames["2.23.42.1"] = OIDName{ShortName: "set-msgExt", LongName: "message extensions"}
+	oidDotNotationToNames["2.23.42.3"] = OIDName{ShortName: "set-attr", LongName: "set-attr"}
+	oidDotNotationToNames["2.23.42.5"] = OIDName{ShortName: "set-policy", LongName: "set-policy"}
+	oidDotNotationToNames["2.23.42.7"] = OIDName{ShortName: "set-certExt", LongName: "certificate extensions"}
+	oidDotNotationToNames["2.23.42.8"] = OIDName{ShortName: "set-brand", LongName: "set-brand"}
+	oidDotNotationToNames["2.23.42.0.0"] = OIDName{ShortName: "setct-PANData", LongName: "setct-PANData"}
+	oidDotNotationToNames["2.23.42.0.1"] = OIDName{ShortName: "setct-PANToken", LongName: "setct-PANToken"}
+	oidDotNotationToNames["2.23.42.0.2"] = OIDName{ShortName: "setct-PANOnly", LongName: "setct-PANOnly"}
+	oidDotNotationToNames["2.23.42.0.3"] = OIDName{ShortName: "setct-OIData", LongName: "setct-OIData"}
+	oidDotNotationToNames["2.23.42.0.4"] = OIDName{ShortName: "setct-PI", LongName: "setct-PI"}
+	oidDotNotationToNames["2.23.42.0.5"] = OIDName{ShortName: "setct-PIData", LongName: "setct-PIData"}
+	oidDotNotationToNames["2.23.42.0.6"] = OIDName{ShortName: "setct-PIDataUnsigned", LongName: "setct-PIDataUnsigned"}
+	oidDotNotationToNames["2.23.42.0.7"] = OIDName{ShortName: "setct-HODInput", LongName: "setct-HODInput"}
+	oidDotNotationToNames["2.23.42.0.8"] = OIDName{ShortName: "setct-AuthResBaggage", LongName: "setct-AuthResBaggage"}
+	oidDotNotationToNames["2.23.42.0.9"] = OIDName{ShortName: "setct-AuthRevReqBaggage", LongName: "setct-AuthRevReqBaggage"}
+	oidDotNotationToNames["2.23.42.0.10"] = OIDName{ShortName: "setct-AuthRevResBaggage", LongName: "setct-AuthRevResBaggage"}
+	oidDotNotationToNames["2.23.42.0.11"] = OIDName{ShortName: "setct-CapTokenSeq", LongName: "setct-CapTokenSeq"}
+	oidDotNotationToNames["2.23.42.0.12"] = OIDName{ShortName: "setct-PInitResData", LongName: "setct-PInitResData"}
+	oidDotNotationToNames["2.23.42.0.13"] = OIDName{ShortName: "setct-PI-TBS", LongName: "setct-PI-TBS"}
+	oidDotNotationToNames["2.23.42.0.14"] = OIDName{ShortName: "setct-PResData", LongName: "setct-PResData"}
+	oidDotNotationToNames["2.23.42.0.16"] = OIDName{ShortName: "setct-AuthReqTBS", LongName: "setct-AuthReqTBS"}
+	oidDotNotationToNames["2.23.42.0.17"] = OIDName{ShortName: "setct-AuthResTBS", LongName: "setct-AuthResTBS"}
+	oidDotNotationToNames["2.23.42.0.18"] = OIDName{ShortName: "setct-AuthResTBSX", LongName: "setct-AuthResTBSX"}
+	oidDotNotationToNames["2.23.42.0.19"] = OIDName{ShortName: "setct-AuthTokenTBS", LongName: "setct-AuthTokenTBS"}
+	oidDotNotationToNames["2.23.42.0.20"] = OIDName{ShortName: "setct-CapTokenData", LongName: "setct-CapTokenData"}
+	oidDotNotationToNames["2.23.42.0.21"] = OIDName{ShortName: "setct-CapTokenTBS", LongName: "setct-CapTokenTBS"}
+	oidDotNotationToNames["2.23.42.0.22"] = OIDName{ShortName: "setct-AcqCardCodeMsg", LongName: "setct-AcqCardCodeMsg"}
+	oidDotNotationToNames["2.23.42.0.23"] = OIDName{ShortName: "setct-AuthRevReqTBS", LongName: "setct-AuthRevReqTBS"}
+	oidDotNotationToNames["2.23.42.0.24"] = OIDName{ShortName: "setct-AuthRevResData", LongName: "setct-AuthRevResData"}
+	oidDotNotationToNames["2.23.42.0.25"] = OIDName{ShortName: "setct-AuthRevResTBS", LongName: "setct-AuthRevResTBS"}
+	oidDotNotationToNames["2.23.42.0.26"] = OIDName{ShortName: "setct-CapReqTBS", LongName: "setct-CapReqTBS"}
+	oidDotNotationToNames["2.23.42.0.27"] = OIDName{ShortName: "setct-CapReqTBSX", LongName: "setct-CapReqTBSX"}
+	oidDotNotationToNames["2.23.42.0.28"] = OIDName{ShortName: "setct-CapResData", LongName: "setct-CapResData"}
+	oidDotNotationToNames["2.23.42.0.29"] = OIDName{ShortName: "setct-CapRevReqTBS", LongName: "setct-CapRevReqTBS"}
+	oidDotNotationToNames["2.23.42.0.30"] = OIDName{ShortName: "setct-CapRevReqTBSX", LongName: "setct-CapRevReqTBSX"}
+	oidDotNotationToNames["2.23.42.0.31"] = OIDName{ShortName: "setct-CapRevResData", LongName: "setct-CapRevResData"}
+	oidDotNotationToNames["2.23.42.0.32"] = OIDName{ShortName: "setct-CredReqTBS", LongName: "setct-CredReqTBS"}
+	oidDotNotationToNames["2.23.42.0.33"] = OIDName{ShortName: "setct-CredReqTBSX", LongName: "setct-CredReqTBSX"}
+	oidDotNotationToNames["2.23.42.0.34"] = OIDName{ShortName: "setct-CredResData", LongName: "setct-CredResData"}
+	oidDotNotationToNames["2.23.42.0.35"] = OIDName{ShortName: "setct-CredRevReqTBS", LongName: "setct-CredRevReqTBS"}
+	oidDotNotationToNames["2.23.42.0.36"] = OIDName{ShortName: "setct-CredRevReqTBSX", LongName: "setct-CredRevReqTBSX"}
+	oidDotNotationToNames["2.23.42.0.37"] = OIDName{ShortName: "setct-CredRevResData", LongName: "setct-CredRevResData"}
+	oidDotNotationToNames["2.23.42.0.38"] = OIDName{ShortName: "setct-PCertReqData", LongName: "setct-PCertReqData"}
+	oidDotNotationToNames["2.23.42.0.39"] = OIDName{ShortName: "setct-PCertResTBS", LongName: "setct-PCertResTBS"}
+	oidDotNotationToNames["2.23.42.0.40"] = OIDName{ShortName: "setct-BatchAdminReqData", LongName: "setct-BatchAdminReqData"}
+	oidDotNotationToNames["2.23.42.0.41"] = OIDName{ShortName: "setct-BatchAdminResData", LongName: "setct-BatchAdminResData"}
+	oidDotNotationToNames["2.23.42.0.42"] = OIDName{ShortName: "setct-CardCInitResTBS", LongName: "setct-CardCInitResTBS"}
+	oidDotNotationToNames["2.23.42.0.43"] = OIDName{ShortName: "setct-MeAqCInitResTBS", LongName: "setct-MeAqCInitResTBS"}
+	oidDotNotationToNames["2.23.42.0.44"] = OIDName{ShortName: "setct-RegFormResTBS", LongName: "setct-RegFormResTBS"}
+	oidDotNotationToNames["2.23.42.0.45"] = OIDName{ShortName: "setct-CertReqData", LongName: "setct-CertReqData"}
+	oidDotNotationToNames["2.23.42.0.46"] = OIDName{ShortName: "setct-CertReqTBS", LongName: "setct-CertReqTBS"}
+	oidDotNotationToNames["2.23.42.0.47"] = OIDName{ShortName: "setct-CertResData", LongName: "setct-CertResData"}
+	oidDotNotationToNames["2.23.42.0.48"] = OIDName{ShortName: "setct-CertInqReqTBS", LongName: "setct-CertInqReqTBS"}
+	oidDotNotationToNames["2.23.42.0.49"] = OIDName{ShortName: "setct-ErrorTBS", LongName: "setct-ErrorTBS"}
+	oidDotNotationToNames["2.23.42.0.50"] = OIDName{ShortName: "setct-PIDualSignedTBE", LongName: "setct-PIDualSignedTBE"}
+	oidDotNotationToNames["2.23.42.0.51"] = OIDName{ShortName: "setct-PIUnsignedTBE", LongName: "setct-PIUnsignedTBE"}
+	oidDotNotationToNames["2.23.42.0.52"] = OIDName{ShortName: "setct-AuthReqTBE", LongName: "setct-AuthReqTBE"}
+	oidDotNotationToNames["2.23.42.0.53"] = OIDName{ShortName: "setct-AuthResTBE", LongName: "setct-AuthResTBE"}
+	oidDotNotationToNames["2.23.42.0.54"] = OIDName{ShortName: "setct-AuthResTBEX", LongName: "setct-AuthResTBEX"}
+	oidDotNotationToNames["2.23.42.0.55"] = OIDName{ShortName: "setct-AuthTokenTBE", LongName: "setct-AuthTokenTBE"}
+	oidDotNotationToNames["2.23.42.0.56"] = OIDName{ShortName: "setct-CapTokenTBE", LongName: "setct-CapTokenTBE"}
+	oidDotNotationToNames["2.23.42.0.57"] = OIDName{ShortName: "setct-CapTokenTBEX", LongName: "setct-CapTokenTBEX"}
+	oidDotNotationToNames["2.23.42.0.58"] = OIDName{ShortName: "setct-AcqCardCodeMsgTBE", LongName: "setct-AcqCardCodeMsgTBE"}
+	oidDotNotationToNames["2.23.42.0.59"] = OIDName{ShortName: "setct-AuthRevReqTBE", LongName: "setct-AuthRevReqTBE"}
+	oidDotNotationToNames["2.23.42.0.60"] = OIDName{ShortName: "setct-AuthRevResTBE", LongName: "setct-AuthRevResTBE"}
+	oidDotNotationToNames["2.23.42.0.61"] = OIDName{ShortName: "setct-AuthRevResTBEB", LongName: "setct-AuthRevResTBEB"}
+	oidDotNotationToNames["2.23.42.0.62"] = OIDName{ShortName: "setct-CapReqTBE", LongName: "setct-CapReqTBE"}
+	oidDotNotationToNames["2.23.42.0.63"] = OIDName{ShortName: "setct-CapReqTBEX", LongName: "setct-CapReqTBEX"}
+	oidDotNotationToNames["2.23.42.0.64"] = OIDName{ShortName: "setct-CapResTBE", LongName: "setct-CapResTBE"}
+	oidDotNotationToNames["2.23.42.0.65"] = OIDName{ShortName: "setct-CapRevReqTBE", LongName: "setct-CapRevReqTBE"}
+	oidDotNotationToNames["2.23.42.0.66"] = OIDName{ShortName: "setct-CapRevReqTBEX", LongName: "setct-CapRevReqTBEX"}
+	oidDotNotationToNames["2.23.42.0.67"] = OIDName{ShortName: "setct-CapRevResTBE", LongName: "setct-CapRevResTBE"}
+	oidDotNotationToNames["2.23.42.0.68"] = OIDName{ShortName: "setct-CredReqTBE", LongName: "setct-CredReqTBE"}
+	oidDotNotationToNames["2.23.42.0.69"] = OIDName{ShortName: "setct-CredReqTBEX", LongName: "setct-CredReqTBEX"}
+	oidDotNotationToNames["2.23.42.0.70"] = OIDName{ShortName: "setct-CredResTBE", LongName: "setct-CredResTBE"}
+	oidDotNotationToNames["2.23.42.0.71"] = OIDName{ShortName: "setct-CredRevReqTBE", LongName: "setct-CredRevReqTBE"}
+	oidDotNotationToNames["2.23.42.0.72"] = OIDName{ShortName: "setct-CredRevReqTBEX", LongName: "setct-CredRevReqTBEX"}
+	oidDotNotationToNames["2.23.42.0.73"] = OIDName{ShortName: "setct-CredRevResTBE", LongName: "setct-CredRevResTBE"}
+	oidDotNotationToNames["2.23.42.0.74"] = OIDName{ShortName: "setct-BatchAdminReqTBE", LongName: "setct-BatchAdminReqTBE"}
+	oidDotNotationToNames["2.23.42.0.75"] = OIDName{ShortName: "setct-BatchAdminResTBE", LongName: "setct-BatchAdminResTBE"}
+	oidDotNotationToNames["2.23.42.0.76"] = OIDName{ShortName: "setct-RegFormReqTBE", LongName: "setct-RegFormReqTBE"}
+	oidDotNotationToNames["2.23.42.0.77"] = OIDName{ShortName: "setct-CertReqTBE", LongName: "setct-CertReqTBE"}
+	oidDotNotationToNames["2.23.42.0.78"] = OIDName{ShortName: "setct-CertReqTBEX", LongName: "setct-CertReqTBEX"}
+	oidDotNotationToNames["2.23.42.0.79"] = OIDName{ShortName: "setct-CertResTBE", LongName: "setct-CertResTBE"}
+	oidDotNotationToNames["2.23.42.0.80"] = OIDName{ShortName: "setct-CRLNotificationTBS", LongName: "setct-CRLNotificationTBS"}
+	oidDotNotationToNames["2.23.42.0.81"] = OIDName{ShortName: "setct-CRLNotificationResTBS", LongName: "setct-CRLNotificationResTBS"}
+	oidDotNotationToNames["2.23.42.0.82"] = OIDName{ShortName: "setct-BCIDistributionTBS", LongName: "setct-BCIDistributionTBS"}
+	oidDotNotationToNames["2.23.42.1.1"] = OIDName{ShortName: "setext-genCrypt", LongName: "generic cryptogram"}
+	oidDotNotationToNames["2.23.42.1.3"] = OIDName{ShortName: "setext-miAuth", LongName: "merchant initiated auth"}
+	oidDotNotationToNames["2.23.42.1.4"] = OIDName{ShortName: "setext-pinSecure", LongName: "setext-pinSecure"}
+	oidDotNotationToNames["2.23.42.1.5"] = OIDName{ShortName: "setext-pinAny", LongName: "setext-pinAny"}
+	oidDotNotationToNames["2.23.42.1.7"] = OIDName{ShortName: "setext-track2", LongName: "setext-track2"}
+	oidDotNotationToNames["2.23.42.1.8"] = OIDName{ShortName: "setext-cv", LongName: "additional verification"}
+	oidDotNotationToNames["2.23.42.5.0"] = OIDName{ShortName: "set-policy-root", LongName: "set-policy-root"}
+	oidDotNotationToNames["2.23.42.7.0"] = OIDName{ShortName: "setCext-hashedRoot", LongName: "setCext-hashedRoot"}
+	oidDotNotationToNames["2.23.42.7.1"] = OIDName{ShortName: "setCext-certType", LongName: "setCext-certType"}
+	oidDotNotationToNames["2.23.42.7.2"] = OIDName{ShortName: "setCext-merchData", LongName: "setCext-merchData"}
+	oidDotNotationToNames["2.23.42.7.3"] = OIDName{ShortName: "setCext-cCertRequired", LongName: "setCext-cCertRequired"}
+	oidDotNotationToNames["2.23.42.7.4"] = OIDName{ShortName: "setCext-tunneling", LongName: "setCext-tunneling"}
+	oidDotNotationToNames["2.23.42.7.5"] = OIDName{ShortName: "setCext-setExt", LongName: "setCext-setExt"}
+	oidDotNotationToNames["2.23.42.7.6"] = OIDName{ShortName: "setCext-setQualf", LongName: "setCext-setQualf"}
+	oidDotNotationToNames["2.23.42.7.7"] = OIDName{ShortName: "setCext-PGWYcapabilities", LongName: "setCext-PGWYcapabilities"}
+	oidDotNotationToNames["2.23.42.7.8"] = OIDName{ShortName: "setCext-TokenIdentifier", LongName: "setCext-TokenIdentifier"}
+	oidDotNotationToNames["2.23.42.7.9"] = OIDName{ShortName: "setCext-Track2Data", LongName: "setCext-Track2Data"}
+	oidDotNotationToNames["2.23.42.7.10"] = OIDName{ShortName: "setCext-TokenType", LongName: "setCext-TokenType"}
+	oidDotNotationToNames["2.23.42.7.11"] = OIDName{ShortName: "setCext-IssuerCapabilities", LongName: "setCext-IssuerCapabilities"}
+	oidDotNotationToNames["2.23.42.3.0"] = OIDName{ShortName: "setAttr-Cert", LongName: "setAttr-Cert"}
+	oidDotNotationToNames["2.23.42.3.1"] = OIDName{ShortName: "setAttr-PGWYcap", LongName: "payment gateway capabilities"}
+	oidDotNotationToNames["2.23.42.3.2"] = OIDName{ShortName: "setAttr-TokenType", LongName: "setAttr-TokenType"}
+	oidDotNotationToNames["2.23.42.3.3"] = OIDName{ShortName: "setAttr-IssCap", LongName: "issuer capabilities"}
+	oidDotNotationToNames["2.23.42.3.0.0"] = OIDName{ShortName: "set-rootKeyThumb", LongName: "set-rootKeyThumb"}
+	oidDotNotationToNames["2.23.42.3.0.1"] = OIDName{ShortName: "set-addPolicy", LongName: "set-addPolicy"}
+	oidDotNotationToNames["2.23.42.3.2.1"] = OIDName{ShortName: "setAttr-Token-EMV", LongName: "setAttr-Token-EMV"}
+	oidDotNotationToNames["2.23.42.3.2.2"] = OIDName{ShortName: "setAttr-Token-B0Prime", LongName: "setAttr-Token-B0Prime"}
+	oidDotNotationToNames["2.23.42.3.3.3"] = OIDName{ShortName: "setAttr-IssCap-CVM", LongName: "setAttr-IssCap-CVM"}
+	oidDotNotationToNames["2.23.42.3.3.4"] = OIDName{ShortName: "setAttr-IssCap-T2", LongName: "setAttr-IssCap-T2"}
+	oidDotNotationToNames["2.23.42.3.3.5"] = OIDName{ShortName: "setAttr-IssCap-Sig", LongName: "setAttr-IssCap-Sig"}
+	oidDotNotationToNames["2.23.42.3.3.3.1"] = OIDName{ShortName: "setAttr-GenCryptgrm", LongName: "generate cryptogram"}
+	oidDotNotationToNames["2.23.42.3.3.4.1"] = OIDName{ShortName: "setAttr-T2Enc", LongName: "encrypted track 2"}
+	oidDotNotationToNames["2.23.42.3.3.4.2"] = OIDName{ShortName: "setAttr-T2cleartxt", LongName: "cleartext track 2"}
+	oidDotNotationToNames["2.23.42.3.3.5.1"] = OIDName{ShortName: "setAttr-TokICCsig", LongName: "ICC or token signature"}
+	oidDotNotationToNames["2.23.42.3.3.5.2"] = OIDName{ShortName: "setAttr-SecDevSig", LongName: "secure device signature"}
+	oidDotNotationToNames["2.23.42.8.1"] = OIDName{ShortName: "set-brand-IATA-ATA", LongName: "set-brand-IATA-ATA"}
+	oidDotNotationToNames["2.23.42.8.30"] = OIDName{ShortName: "set-brand-Diners", LongName: "set-brand-Diners"}
+	oidDotNotationToNames["2.23.42.8.34"] = OIDName{ShortName: "set-brand-AmericanExpress", LongName: "set-brand-AmericanExpress"}
+	oidDotNotationToNames["2.23.42.8.35"] = OIDName{ShortName: "set-brand-JCB", LongName: "set-brand-JCB"}
+	oidDotNotationToNames["2.23.42.8.4"] = OIDName{ShortName: "set-brand-Visa", LongName: "set-brand-Visa"}
+	oidDotNotationToNames["2.23.42.8.5"] = OIDName{ShortName: "set-brand-MasterCard", LongName: "set-brand-MasterCard"}
+	oidDotNotationToNames["2.23.42.8.6011"] = OIDName{ShortName: "set-brand-Novus", LongName: "set-brand-Novus"}
+	oidDotNotationToNames["1.2.840.113549.3.10"] = OIDName{ShortName: "DES-CDMF", LongName: "des-cdmf"}
+	oidDotNotationToNames["1.2.840.113549.1.1.6"] = OIDName{ShortName: "rsaOAEPEncryptionSET", LongName: "rsaOAEPEncryptionSET"}
+	oidDotNotationToNames["0.0"] = OIDName{ShortName: "ITU-T", LongName: "itu-t"}
+	oidDotNotationToNames["2.0"] = OIDName{ShortName: "JOINT-ISO-ITU-T", LongName: "joint-iso-itu-t"}
+	oidDotNotationToNames["2.23"] = OIDName{ShortName: "international-organizations", LongName: "International Organizations"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.20.2.2"] = OIDName{ShortName: "msSmartcardLogin", LongName: "Microsoft Smartcardlogin"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.20.2.3"] = OIDName{ShortName: "msUPN", LongName: "Microsoft Universal Principal Name"}
+	oidDotNotationToNames["2.5.4.9"] = OIDName{ShortName: "street", LongName: "streetAddress"}
+	oidDotNotationToNames["2.5.4.17"] = OIDName{ShortName: "postalCode", LongName: "postalCode"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.21"] = OIDName{ShortName: "id-ppl", LongName: "id-ppl"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.1.14"] = OIDName{ShortName: "proxyCertInfo", LongName: "Proxy Certificate Information"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.21.0"] = OIDName{ShortName: "id-ppl-anyLanguage", LongName: "Any language"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.21.1"] = OIDName{ShortName: "id-ppl-inheritAll", LongName: "Inherit all"}
+	oidDotNotationToNames["2.5.29.30"] = OIDName{ShortName: "nameConstraints", LongName: "X509v3 Name Constraints"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.21.2"] = OIDName{ShortName: "id-ppl-independent", LongName: "Independent"}
+	oidDotNotationToNames["1.2.840.113549.1.1.11"] = OIDName{ShortName: "RSA-SHA256", LongName: "sha256WithRSAEncryption"}
+	oidDotNotationToNames["1.2.840.113549.1.1.12"] = OIDName{ShortName: "RSA-SHA384", LongName: "sha384WithRSAEncryption"}
+	oidDotNotationToNames["1.2.840.113549.1.1.13"] = OIDName{ShortName: "RSA-SHA512", LongName: "sha512WithRSAEncryption"}
+	oidDotNotationToNames["1.2.840.113549.1.1.14"] = OIDName{ShortName: "RSA-SHA224", LongName: "sha224WithRSAEncryption"}
+	oidDotNotationToNames["2.16.840.1.101.3.4.2.1"] = OIDName{ShortName: "SHA256", LongName: "sha256"}
+	oidDotNotationToNames["2.16.840.1.101.3.4.2.2"] = OIDName{ShortName: "SHA384", LongName: "sha384"}
+	oidDotNotationToNames["2.16.840.1.101.3.4.2.3"] = OIDName{ShortName: "SHA512", LongName: "sha512"}
+	oidDotNotationToNames["2.16.840.1.101.3.4.2.4"] = OIDName{ShortName: "SHA224", LongName: "sha224"}
+	oidDotNotationToNames["1.3"] = OIDName{ShortName: "identified-organization", LongName: "identified-organization"}
+	oidDotNotationToNames["1.3.132"] = OIDName{ShortName: "certicom-arc", LongName: "certicom-arc"}
+	oidDotNotationToNames["2.23.43"] = OIDName{ShortName: "wap", LongName: "wap"}
+	oidDotNotationToNames["2.23.43.1"] = OIDName{ShortName: "wap-wsg", LongName: "wap-wsg"}
+	oidDotNotationToNames["1.2.840.10045.1.2.3"] = OIDName{ShortName: "id-characteristic-two-basis", LongName: "id-characteristic-two-basis"}
+	oidDotNotationToNames["1.2.840.10045.1.2.3.1"] = OIDName{ShortName: "onBasis", LongName: "onBasis"}
+	oidDotNotationToNames["1.2.840.10045.1.2.3.2"] = OIDName{ShortName: "tpBasis", LongName: "tpBasis"}
+	oidDotNotationToNames["1.2.840.10045.1.2.3.3"] = OIDName{ShortName: "ppBasis", LongName: "ppBasis"}
+	oidDotNotationToNames["1.2.840.10045.3.0.1"] = OIDName{ShortName: "c2pnb163v1", LongName: "c2pnb163v1"}
+	oidDotNotationToNames["1.2.840.10045.3.0.2"] = OIDName{ShortName: "c2pnb163v2", LongName: "c2pnb163v2"}
+	oidDotNotationToNames["1.2.840.10045.3.0.3"] = OIDName{ShortName: "c2pnb163v3", LongName: "c2pnb163v3"}
+	oidDotNotationToNames["1.2.840.10045.3.0.4"] = OIDName{ShortName: "c2pnb176v1", LongName: "c2pnb176v1"}
+	oidDotNotationToNames["1.2.840.10045.3.0.5"] = OIDName{ShortName: "c2tnb191v1", LongName: "c2tnb191v1"}
+	oidDotNotationToNames["1.2.840.10045.3.0.6"] = OIDName{ShortName: "c2tnb191v2", LongName: "c2tnb191v2"}
+	oidDotNotationToNames["1.2.840.10045.3.0.7"] = OIDName{ShortName: "c2tnb191v3", LongName: "c2tnb191v3"}
+	oidDotNotationToNames["1.2.840.10045.3.0.8"] = OIDName{ShortName: "c2onb191v4", LongName: "c2onb191v4"}
+	oidDotNotationToNames["1.2.840.10045.3.0.9"] = OIDName{ShortName: "c2onb191v5", LongName: "c2onb191v5"}
+	oidDotNotationToNames["1.2.840.10045.3.0.10"] = OIDName{ShortName: "c2pnb208w1", LongName: "c2pnb208w1"}
+	oidDotNotationToNames["1.2.840.10045.3.0.11"] = OIDName{ShortName: "c2tnb239v1", LongName: "c2tnb239v1"}
+	oidDotNotationToNames["1.2.840.10045.3.0.12"] = OIDName{ShortName: "c2tnb239v2", LongName: "c2tnb239v2"}
+	oidDotNotationToNames["1.2.840.10045.3.0.13"] = OIDName{ShortName: "c2tnb239v3", LongName: "c2tnb239v3"}
+	oidDotNotationToNames["1.2.840.10045.3.0.14"] = OIDName{ShortName: "c2onb239v4", LongName: "c2onb239v4"}
+	oidDotNotationToNames["1.2.840.10045.3.0.15"] = OIDName{ShortName: "c2onb239v5", LongName: "c2onb239v5"}
+	oidDotNotationToNames["1.2.840.10045.3.0.16"] = OIDName{ShortName: "c2pnb272w1", LongName: "c2pnb272w1"}
+	oidDotNotationToNames["1.2.840.10045.3.0.17"] = OIDName{ShortName: "c2pnb304w1", LongName: "c2pnb304w1"}
+	oidDotNotationToNames["1.2.840.10045.3.0.18"] = OIDName{ShortName: "c2tnb359v1", LongName: "c2tnb359v1"}
+	oidDotNotationToNames["1.2.840.10045.3.0.19"] = OIDName{ShortName: "c2pnb368w1", LongName: "c2pnb368w1"}
+	oidDotNotationToNames["1.2.840.10045.3.0.20"] = OIDName{ShortName: "c2tnb431r1", LongName: "c2tnb431r1"}
+	oidDotNotationToNames["1.3.132.0.6"] = OIDName{ShortName: "secp112r1", LongName: "secp112r1"}
+	oidDotNotationToNames["1.3.132.0.7"] = OIDName{ShortName: "secp112r2", LongName: "secp112r2"}
+	oidDotNotationToNames["1.3.132.0.28"] = OIDName{ShortName: "secp128r1", LongName: "secp128r1"}
+	oidDotNotationToNames["1.3.132.0.29"] = OIDName{ShortName: "secp128r2", LongName: "secp128r2"}
+	oidDotNotationToNames["1.3.132.0.9"] = OIDName{ShortName: "secp160k1", LongName: "secp160k1"}
+	oidDotNotationToNames["1.3.132.0.8"] = OIDName{ShortName: "secp160r1", LongName: "secp160r1"}
+	oidDotNotationToNames["1.3.132.0.30"] = OIDName{ShortName: "secp160r2", LongName: "secp160r2"}
+	oidDotNotationToNames["1.3.132.0.31"] = OIDName{ShortName: "secp192k1", LongName: "secp192k1"}
+	oidDotNotationToNames["1.3.132.0.32"] = OIDName{ShortName: "secp224k1", LongName: "secp224k1"}
+	oidDotNotationToNames["1.3.132.0.33"] = OIDName{ShortName: "secp224r1", LongName: "secp224r1"}
+	oidDotNotationToNames["1.3.132.0.10"] = OIDName{ShortName: "secp256k1", LongName: "secp256k1"}
+	oidDotNotationToNames["1.3.132.0.34"] = OIDName{ShortName: "secp384r1", LongName: "secp384r1"}
+	oidDotNotationToNames["1.3.132.0.35"] = OIDName{ShortName: "secp521r1", LongName: "secp521r1"}
+	oidDotNotationToNames["1.3.132.0.4"] = OIDName{ShortName: "sect113r1", LongName: "sect113r1"}
+	oidDotNotationToNames["1.3.132.0.5"] = OIDName{ShortName: "sect113r2", LongName: "sect113r2"}
+	oidDotNotationToNames["1.3.132.0.22"] = OIDName{ShortName: "sect131r1", LongName: "sect131r1"}
+	oidDotNotationToNames["1.3.132.0.23"] = OIDName{ShortName: "sect131r2", LongName: "sect131r2"}
+	oidDotNotationToNames["1.3.132.0.1"] = OIDName{ShortName: "sect163k1", LongName: "sect163k1"}
+	oidDotNotationToNames["1.3.132.0.2"] = OIDName{ShortName: "sect163r1", LongName: "sect163r1"}
+	oidDotNotationToNames["1.3.132.0.15"] = OIDName{ShortName: "sect163r2", LongName: "sect163r2"}
+	oidDotNotationToNames["1.3.132.0.24"] = OIDName{ShortName: "sect193r1", LongName: "sect193r1"}
+	oidDotNotationToNames["1.3.132.0.25"] = OIDName{ShortName: "sect193r2", LongName: "sect193r2"}
+	oidDotNotationToNames["1.3.132.0.26"] = OIDName{ShortName: "sect233k1", LongName: "sect233k1"}
+	oidDotNotationToNames["1.3.132.0.27"] = OIDName{ShortName: "sect233r1", LongName: "sect233r1"}
+	oidDotNotationToNames["1.3.132.0.3"] = OIDName{ShortName: "sect239k1", LongName: "sect239k1"}
+	oidDotNotationToNames["1.3.132.0.16"] = OIDName{ShortName: "sect283k1", LongName: "sect283k1"}
+	oidDotNotationToNames["1.3.132.0.17"] = OIDName{ShortName: "sect283r1", LongName: "sect283r1"}
+	oidDotNotationToNames["1.3.132.0.36"] = OIDName{ShortName: "sect409k1", LongName: "sect409k1"}
+	oidDotNotationToNames["1.3.132.0.37"] = OIDName{ShortName: "sect409r1", LongName: "sect409r1"}
+	oidDotNotationToNames["1.3.132.0.38"] = OIDName{ShortName: "sect571k1", LongName: "sect571k1"}
+	oidDotNotationToNames["1.3.132.0.39"] = OIDName{ShortName: "sect571r1", LongName: "sect571r1"}
+	oidDotNotationToNames["2.23.43.1.4.1"] = OIDName{ShortName: "wap-wsg-idm-ecid-wtls1", LongName: "wap-wsg-idm-ecid-wtls1"}
+	oidDotNotationToNames["2.23.43.1.4.3"] = OIDName{ShortName: "wap-wsg-idm-ecid-wtls3", LongName: "wap-wsg-idm-ecid-wtls3"}
+	oidDotNotationToNames["2.23.43.1.4.4"] = OIDName{ShortName: "wap-wsg-idm-ecid-wtls4", LongName: "wap-wsg-idm-ecid-wtls4"}
+	oidDotNotationToNames["2.23.43.1.4.5"] = OIDName{ShortName: "wap-wsg-idm-ecid-wtls5", LongName: "wap-wsg-idm-ecid-wtls5"}
+	oidDotNotationToNames["2.23.43.1.4.6"] = OIDName{ShortName: "wap-wsg-idm-ecid-wtls6", LongName: "wap-wsg-idm-ecid-wtls6"}
+	oidDotNotationToNames["2.23.43.1.4.7"] = OIDName{ShortName: "wap-wsg-idm-ecid-wtls7", LongName: "wap-wsg-idm-ecid-wtls7"}
+	oidDotNotationToNames["2.23.43.1.4.8"] = OIDName{ShortName: "wap-wsg-idm-ecid-wtls8", LongName: "wap-wsg-idm-ecid-wtls8"}
+	oidDotNotationToNames["2.23.43.1.4.9"] = OIDName{ShortName: "wap-wsg-idm-ecid-wtls9", LongName: "wap-wsg-idm-ecid-wtls9"}
+	oidDotNotationToNames["2.23.43.1.4.10"] = OIDName{ShortName: "wap-wsg-idm-ecid-wtls10", LongName: "wap-wsg-idm-ecid-wtls10"}
+	oidDotNotationToNames["2.23.43.1.4.11"] = OIDName{ShortName: "wap-wsg-idm-ecid-wtls11", LongName: "wap-wsg-idm-ecid-wtls11"}
+	oidDotNotationToNames["2.23.43.1.4.12"] = OIDName{ShortName: "wap-wsg-idm-ecid-wtls12", LongName: "wap-wsg-idm-ecid-wtls12"}
+	oidDotNotationToNames["2.5.29.32.0"] = OIDName{ShortName: "anyPolicy", LongName: "X509v3 Any Policy"}
+	oidDotNotationToNames["2.5.29.33"] = OIDName{ShortName: "policyMappings", LongName: "X509v3 Policy Mappings"}
+	oidDotNotationToNames["2.5.29.54"] = OIDName{ShortName: "inhibitAnyPolicy", LongName: "X509v3 Inhibit Any Policy"}
+	oidDotNotationToNames["1.2.392.200011.61.1.1.1.2"] = OIDName{ShortName: "CAMELLIA-128-CBC", LongName: "camellia-128-cbc"}
+	oidDotNotationToNames["1.2.392.200011.61.1.1.1.3"] = OIDName{ShortName: "CAMELLIA-192-CBC", LongName: "camellia-192-cbc"}
+	oidDotNotationToNames["1.2.392.200011.61.1.1.1.4"] = OIDName{ShortName: "CAMELLIA-256-CBC", LongName: "camellia-256-cbc"}
+	oidDotNotationToNames["0.3.4401.5.3.1.9.1"] = OIDName{ShortName: "CAMELLIA-128-ECB", LongName: "camellia-128-ecb"}
+	oidDotNotationToNames["0.3.4401.5.3.1.9.21"] = OIDName{ShortName: "CAMELLIA-192-ECB", LongName: "camellia-192-ecb"}
+	oidDotNotationToNames["0.3.4401.5.3.1.9.41"] = OIDName{ShortName: "CAMELLIA-256-ECB", LongName: "camellia-256-ecb"}
+	oidDotNotationToNames["0.3.4401.5.3.1.9.4"] = OIDName{ShortName: "CAMELLIA-128-CFB", LongName: "camellia-128-cfb"}
+	oidDotNotationToNames["0.3.4401.5.3.1.9.24"] = OIDName{ShortName: "CAMELLIA-192-CFB", LongName: "camellia-192-cfb"}
+	oidDotNotationToNames["0.3.4401.5.3.1.9.44"] = OIDName{ShortName: "CAMELLIA-256-CFB", LongName: "camellia-256-cfb"}
+	oidDotNotationToNames["0.3.4401.5.3.1.9.3"] = OIDName{ShortName: "CAMELLIA-128-OFB", LongName: "camellia-128-ofb"}
+	oidDotNotationToNames["0.3.4401.5.3.1.9.23"] = OIDName{ShortName: "CAMELLIA-192-OFB", LongName: "camellia-192-ofb"}
+	oidDotNotationToNames["0.3.4401.5.3.1.9.43"] = OIDName{ShortName: "CAMELLIA-256-OFB", LongName: "camellia-256-ofb"}
+	oidDotNotationToNames["2.5.29.9"] = OIDName{ShortName: "subjectDirectoryAttributes", LongName: "X509v3 Subject Directory Attributes"}
+	oidDotNotationToNames["2.5.29.28"] = OIDName{ShortName: "issuingDistributionPoint", LongName: "X509v3 Issuing Distribution Point"}
+	oidDotNotationToNames["2.5.29.29"] = OIDName{ShortName: "certificateIssuer", LongName: "X509v3 Certificate Issuer"}
+	oidDotNotationToNames["1.2.410.200004"] = OIDName{ShortName: "KISA", LongName: "kisa"}
+	oidDotNotationToNames["1.2.410.200004.1.3"] = OIDName{ShortName: "SEED-ECB", LongName: "seed-ecb"}
+	oidDotNotationToNames["1.2.410.200004.1.4"] = OIDName{ShortName: "SEED-CBC", LongName: "seed-cbc"}
+	oidDotNotationToNames["1.2.410.200004.1.6"] = OIDName{ShortName: "SEED-OFB", LongName: "seed-ofb"}
+	oidDotNotationToNames["1.2.410.200004.1.5"] = OIDName{ShortName: "SEED-CFB", LongName: "seed-cfb"}
+	oidDotNotationToNames["1.3.6.1.5.5.8.1.1"] = OIDName{ShortName: "HMAC-MD5", LongName: "hmac-md5"}
+	oidDotNotationToNames["1.3.6.1.5.5.8.1.2"] = OIDName{ShortName: "HMAC-SHA1", LongName: "hmac-sha1"}
+	oidDotNotationToNames["1.2.840.113533.7.66.13"] = OIDName{ShortName: "id-PasswordBasedMAC", LongName: "password based MAC"}
+	oidDotNotationToNames["1.2.840.113533.7.66.30"] = OIDName{ShortName: "id-DHBasedMac", LongName: "Diffie-Hellman based MAC"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.4.16"] = OIDName{ShortName: "id-it-suppLangTags", LongName: "id-it-suppLangTags"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.48.5"] = OIDName{ShortName: "caRepository", LongName: "CA Repository"}
+	oidDotNotationToNames["1.2.840.113549.1.9.16.1.9"] = OIDName{ShortName: "id-smime-ct-compressedData", LongName: "id-smime-ct-compressedData"}
+	oidDotNotationToNames["1.2.840.113549.1.9.16.1.27"] = OIDName{ShortName: "id-ct-asciiTextWithCRLF", LongName: "id-ct-asciiTextWithCRLF"}
+	oidDotNotationToNames["2.16.840.1.101.3.4.1.5"] = OIDName{ShortName: "id-aes128-wrap", LongName: "id-aes128-wrap"}
+	oidDotNotationToNames["2.16.840.1.101.3.4.1.25"] = OIDName{ShortName: "id-aes192-wrap", LongName: "id-aes192-wrap"}
+	oidDotNotationToNames["2.16.840.1.101.3.4.1.45"] = OIDName{ShortName: "id-aes256-wrap", LongName: "id-aes256-wrap"}
+	oidDotNotationToNames["1.2.840.10045.4.2"] = OIDName{ShortName: "ecdsa-with-Recommended", LongName: "ecdsa-with-Recommended"}
+	oidDotNotationToNames["1.2.840.10045.4.3"] = OIDName{ShortName: "ecdsa-with-Specified", LongName: "ecdsa-with-Specified"}
+	oidDotNotationToNames["1.2.840.10045.4.3.1"] = OIDName{ShortName: "ecdsa-with-SHA224", LongName: "ecdsa-with-SHA224"}
+	oidDotNotationToNames["1.2.840.10045.4.3.2"] = OIDName{ShortName: "ecdsa-with-SHA256", LongName: "ecdsa-with-SHA256"}
+	oidDotNotationToNames["1.2.840.10045.4.3.3"] = OIDName{ShortName: "ecdsa-with-SHA384", LongName: "ecdsa-with-SHA384"}
+	oidDotNotationToNames["1.2.840.10045.4.3.4"] = OIDName{ShortName: "ecdsa-with-SHA512", LongName: "ecdsa-with-SHA512"}
+	oidDotNotationToNames["1.2.840.113549.2.6"] = OIDName{ShortName: "hmacWithMD5", LongName: "hmacWithMD5"}
+	oidDotNotationToNames["1.2.840.113549.2.8"] = OIDName{ShortName: "hmacWithSHA224", LongName: "hmacWithSHA224"}
+	oidDotNotationToNames["1.2.840.113549.2.9"] = OIDName{ShortName: "hmacWithSHA256", LongName: "hmacWithSHA256"}
+	oidDotNotationToNames["1.2.840.113549.2.10"] = OIDName{ShortName: "hmacWithSHA384", LongName: "hmacWithSHA384"}
+	oidDotNotationToNames["1.2.840.113549.2.11"] = OIDName{ShortName: "hmacWithSHA512", LongName: "hmacWithSHA512"}
+	oidDotNotationToNames["2.16.840.1.101.3.4.3.1"] = OIDName{ShortName: "dsa_with_SHA224", LongName: "dsa_with_SHA224"}
+	oidDotNotationToNames["2.16.840.1.101.3.4.3.2"] = OIDName{ShortName: "dsa_with_SHA256", LongName: "dsa_with_SHA256"}
+	oidDotNotationToNames["1.0.10118.3.0.55"] = OIDName{ShortName: "whirlpool", LongName: "whirlpool"}
+	oidDotNotationToNames["1.2.643.2.2"] = OIDName{ShortName: "cryptopro", LongName: "cryptopro"}
+	oidDotNotationToNames["1.2.643.2.9"] = OIDName{ShortName: "cryptocom", LongName: "cryptocom"}
+	oidDotNotationToNames["1.2.643.2.2.3"] = OIDName{ShortName: "id-GostR3411-94-with-GostR3410-2001", LongName: "GOST R 34.11-94 with GOST R 34.10-2001"}
+	oidDotNotationToNames["1.2.643.2.2.4"] = OIDName{ShortName: "id-GostR3411-94-with-GostR3410-94", LongName: "GOST R 34.11-94 with GOST R 34.10-94"}
+	oidDotNotationToNames["1.2.643.2.2.9"] = OIDName{ShortName: "md_gost94", LongName: "GOST R 34.11-94"}
+	oidDotNotationToNames["1.2.643.2.2.10"] = OIDName{ShortName: "id-HMACGostR3411-94", LongName: "HMAC GOST 34.11-94"}
+	oidDotNotationToNames["1.2.643.2.2.19"] = OIDName{ShortName: "gost2001", LongName: "GOST R 34.10-2001"}
+	oidDotNotationToNames["1.2.643.2.2.20"] = OIDName{ShortName: "gost94", LongName: "GOST R 34.10-94"}
+	oidDotNotationToNames["1.2.643.2.2.21"] = OIDName{ShortName: "gost89", LongName: "GOST 28147-89"}
+	oidDotNotationToNames["1.2.643.2.2.22"] = OIDName{ShortName: "gost-mac", LongName: "GOST 28147-89 MAC"}
+	oidDotNotationToNames["1.2.643.2.2.23"] = OIDName{ShortName: "prf-gostr3411-94", LongName: "GOST R 34.11-94 PRF"}
+	oidDotNotationToNames["1.2.643.2.2.98"] = OIDName{ShortName: "id-GostR3410-2001DH", LongName: "GOST R 34.10-2001 DH"}
+	oidDotNotationToNames["1.2.643.2.2.99"] = OIDName{ShortName: "id-GostR3410-94DH", LongName: "GOST R 34.10-94 DH"}
+	oidDotNotationToNames["1.2.643.2.2.14.1"] = OIDName{ShortName: "id-Gost28147-89-CryptoPro-KeyMeshing", LongName: "id-Gost28147-89-CryptoPro-KeyMeshing"}
+	oidDotNotationToNames["1.2.643.2.2.14.0"] = OIDName{ShortName: "id-Gost28147-89-None-KeyMeshing", LongName: "id-Gost28147-89-None-KeyMeshing"}
+	oidDotNotationToNames["1.2.643.2.2.30.0"] = OIDName{ShortName: "id-GostR3411-94-TestParamSet", LongName: "id-GostR3411-94-TestParamSet"}
+	oidDotNotationToNames["1.2.643.2.2.30.1"] = OIDName{ShortName: "id-GostR3411-94-CryptoProParamSet", LongName: "id-GostR3411-94-CryptoProParamSet"}
+	oidDotNotationToNames["1.2.643.2.2.31.0"] = OIDName{ShortName: "id-Gost28147-89-TestParamSet", LongName: "id-Gost28147-89-TestParamSet"}
+	oidDotNotationToNames["1.2.643.2.2.31.1"] = OIDName{ShortName: "id-Gost28147-89-CryptoPro-A-ParamSet", LongName: "id-Gost28147-89-CryptoPro-A-ParamSet"}
+	oidDotNotationToNames["1.2.643.2.2.31.2"] = OIDName{ShortName: "id-Gost28147-89-CryptoPro-B-ParamSet", LongName: "id-Gost28147-89-CryptoPro-B-ParamSet"}
+	oidDotNotationToNames["1.2.643.2.2.31.3"] = OIDName{ShortName: "id-Gost28147-89-CryptoPro-C-ParamSet", LongName: "id-Gost28147-89-CryptoPro-C-ParamSet"}
+	oidDotNotationToNames["1.2.643.2.2.31.4"] = OIDName{ShortName: "id-Gost28147-89-CryptoPro-D-ParamSet", LongName: "id-Gost28147-89-CryptoPro-D-ParamSet"}
+	oidDotNotationToNames["1.2.643.2.2.31.5"] = OIDName{ShortName: "id-Gost28147-89-CryptoPro-Oscar-1-1-ParamSet", LongName: "id-Gost28147-89-CryptoPro-Oscar-1-1-ParamSet"}
+	oidDotNotationToNames["1.2.643.2.2.31.6"] = OIDName{ShortName: "id-Gost28147-89-CryptoPro-Oscar-1-0-ParamSet", LongName: "id-Gost28147-89-CryptoPro-Oscar-1-0-ParamSet"}
+	oidDotNotationToNames["1.2.643.2.2.31.7"] = OIDName{ShortName: "id-Gost28147-89-CryptoPro-RIC-1-ParamSet", LongName: "id-Gost28147-89-CryptoPro-RIC-1-ParamSet"}
+	oidDotNotationToNames["1.2.643.2.2.32.0"] = OIDName{ShortName: "id-GostR3410-94-TestParamSet", LongName: "id-GostR3410-94-TestParamSet"}
+	oidDotNotationToNames["1.2.643.2.2.32.2"] = OIDName{ShortName: "id-GostR3410-94-CryptoPro-A-ParamSet", LongName: "id-GostR3410-94-CryptoPro-A-ParamSet"}
+	oidDotNotationToNames["1.2.643.2.2.32.3"] = OIDName{ShortName: "id-GostR3410-94-CryptoPro-B-ParamSet", LongName: "id-GostR3410-94-CryptoPro-B-ParamSet"}
+	oidDotNotationToNames["1.2.643.2.2.32.4"] = OIDName{ShortName: "id-GostR3410-94-CryptoPro-C-ParamSet", LongName: "id-GostR3410-94-CryptoPro-C-ParamSet"}
+	oidDotNotationToNames["1.2.643.2.2.32.5"] = OIDName{ShortName: "id-GostR3410-94-CryptoPro-D-ParamSet", LongName: "id-GostR3410-94-CryptoPro-D-ParamSet"}
+	oidDotNotationToNames["1.2.643.2.2.33.1"] = OIDName{ShortName: "id-GostR3410-94-CryptoPro-XchA-ParamSet", LongName: "id-GostR3410-94-CryptoPro-XchA-ParamSet"}
+	oidDotNotationToNames["1.2.643.2.2.33.2"] = OIDName{ShortName: "id-GostR3410-94-CryptoPro-XchB-ParamSet", LongName: "id-GostR3410-94-CryptoPro-XchB-ParamSet"}
+	oidDotNotationToNames["1.2.643.2.2.33.3"] = OIDName{ShortName: "id-GostR3410-94-CryptoPro-XchC-ParamSet", LongName: "id-GostR3410-94-CryptoPro-XchC-ParamSet"}
+	oidDotNotationToNames["1.2.643.2.2.35.0"] = OIDName{ShortName: "id-GostR3410-2001-TestParamSet", LongName: "id-GostR3410-2001-TestParamSet"}
+	oidDotNotationToNames["1.2.643.2.2.35.1"] = OIDName{ShortName: "id-GostR3410-2001-CryptoPro-A-ParamSet", LongName: "id-GostR3410-2001-CryptoPro-A-ParamSet"}
+	oidDotNotationToNames["1.2.643.2.2.35.2"] = OIDName{ShortName: "id-GostR3410-2001-CryptoPro-B-ParamSet", LongName: "id-GostR3410-2001-CryptoPro-B-ParamSet"}
+	oidDotNotationToNames["1.2.643.2.2.35.3"] = OIDName{ShortName: "id-GostR3410-2001-CryptoPro-C-ParamSet", LongName: "id-GostR3410-2001-CryptoPro-C-ParamSet"}
+	oidDotNotationToNames["1.2.643.2.2.36.0"] = OIDName{ShortName: "id-GostR3410-2001-CryptoPro-XchA-ParamSet", LongName: "id-GostR3410-2001-CryptoPro-XchA-ParamSet"}
+	oidDotNotationToNames["1.2.643.2.2.36.1"] = OIDName{ShortName: "id-GostR3410-2001-CryptoPro-XchB-ParamSet", LongName: "id-GostR3410-2001-CryptoPro-XchB-ParamSet"}
+	oidDotNotationToNames["1.2.643.2.2.20.1"] = OIDName{ShortName: "id-GostR3410-94-a", LongName: "id-GostR3410-94-a"}
+	oidDotNotationToNames["1.2.643.2.2.20.2"] = OIDName{ShortName: "id-GostR3410-94-aBis", LongName: "id-GostR3410-94-aBis"}
+	oidDotNotationToNames["1.2.643.2.2.20.3"] = OIDName{ShortName: "id-GostR3410-94-b", LongName: "id-GostR3410-94-b"}
+	oidDotNotationToNames["1.2.643.2.2.20.4"] = OIDName{ShortName: "id-GostR3410-94-bBis", LongName: "id-GostR3410-94-bBis"}
+	oidDotNotationToNames["1.2.643.2.9.1.6.1"] = OIDName{ShortName: "id-Gost28147-89-cc", LongName: "GOST 28147-89 Cryptocom ParamSet"}
+	oidDotNotationToNames["1.2.643.2.9.1.5.3"] = OIDName{ShortName: "gost94cc", LongName: "GOST 34.10-94 Cryptocom"}
+	oidDotNotationToNames["1.2.643.2.9.1.5.4"] = OIDName{ShortName: "gost2001cc", LongName: "GOST 34.10-2001 Cryptocom"}
+	oidDotNotationToNames["1.2.643.2.9.1.3.3"] = OIDName{ShortName: "id-GostR3411-94-with-GostR3410-94-cc", LongName: "GOST R 34.11-94 with GOST R 34.10-94 Cryptocom"}
+	oidDotNotationToNames["1.2.643.2.9.1.3.4"] = OIDName{ShortName: "id-GostR3411-94-with-GostR3410-2001-cc", LongName: "GOST R 34.11-94 with GOST R 34.10-2001 Cryptocom"}
+	oidDotNotationToNames["1.2.643.2.9.1.8.1"] = OIDName{ShortName: "id-GostR3410-2001-ParamSet-cc", LongName: "GOST R 3410-2001 Parameter Set Cryptocom"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.17.2"] = OIDName{ShortName: "LocalKeySet", LongName: "Microsoft Local Key set"}
+	oidDotNotationToNames["2.5.29.46"] = OIDName{ShortName: "freshestCRL", LongName: "X509v3 Freshest CRL"}
+	oidDotNotationToNames["1.3.6.1.5.5.7.8.3"] = OIDName{ShortName: "id-on-permanentIdentifier", LongName: "Permanent Identifier"}
+	oidDotNotationToNames["2.5.4.14"] = OIDName{ShortName: "searchGuide", LongName: "searchGuide"}
+	oidDotNotationToNames["2.5.4.15"] = OIDName{ShortName: "businessCategory", LongName: "businessCategory"}
+	oidDotNotationToNames["2.5.4.16"] = OIDName{ShortName: "postalAddress", LongName: "postalAddress"}
+	oidDotNotationToNames["2.5.4.18"] = OIDName{ShortName: "postOfficeBox", LongName: "postOfficeBox"}
+	oidDotNotationToNames["2.5.4.19"] = OIDName{ShortName: "physicalDeliveryOfficeName", LongName: "physicalDeliveryOfficeName"}
+	oidDotNotationToNames["2.5.4.20"] = OIDName{ShortName: "telephoneNumber", LongName: "telephoneNumber"}
+	oidDotNotationToNames["2.5.4.21"] = OIDName{ShortName: "telexNumber", LongName: "telexNumber"}
+	oidDotNotationToNames["2.5.4.22"] = OIDName{ShortName: "teletexTerminalIdentifier", LongName: "teletexTerminalIdentifier"}
+	oidDotNotationToNames["2.5.4.23"] = OIDName{ShortName: "facsimileTelephoneNumber", LongName: "facsimileTelephoneNumber"}
+	oidDotNotationToNames["2.5.4.24"] = OIDName{ShortName: "x121Address", LongName: "x121Address"}
+	oidDotNotationToNames["2.5.4.25"] = OIDName{ShortName: "internationaliSDNNumber", LongName: "internationaliSDNNumber"}
+	oidDotNotationToNames["2.5.4.26"] = OIDName{ShortName: "registeredAddress", LongName: "registeredAddress"}
+	oidDotNotationToNames["2.5.4.27"] = OIDName{ShortName: "destinationIndicator", LongName: "destinationIndicator"}
+	oidDotNotationToNames["2.5.4.28"] = OIDName{ShortName: "preferredDeliveryMethod", LongName: "preferredDeliveryMethod"}
+	oidDotNotationToNames["2.5.4.29"] = OIDName{ShortName: "presentationAddress", LongName: "presentationAddress"}
+	oidDotNotationToNames["2.5.4.30"] = OIDName{ShortName: "supportedApplicationContext", LongName: "supportedApplicationContext"}
+	oidDotNotationToNames["2.5.4.31"] = OIDName{ShortName: "member", LongName: "member"}
+	oidDotNotationToNames["2.5.4.32"] = OIDName{ShortName: "owner", LongName: "owner"}
+	oidDotNotationToNames["2.5.4.33"] = OIDName{ShortName: "roleOccupant", LongName: "roleOccupant"}
+	oidDotNotationToNames["2.5.4.34"] = OIDName{ShortName: "seeAlso", LongName: "seeAlso"}
+	oidDotNotationToNames["2.5.4.35"] = OIDName{ShortName: "userPassword", LongName: "userPassword"}
+	oidDotNotationToNames["2.5.4.36"] = OIDName{ShortName: "userCertificate", LongName: "userCertificate"}
+	oidDotNotationToNames["2.5.4.37"] = OIDName{ShortName: "cACertificate", LongName: "cACertificate"}
+	oidDotNotationToNames["2.5.4.38"] = OIDName{ShortName: "authorityRevocationList", LongName: "authorityRevocationList"}
+	oidDotNotationToNames["2.5.4.39"] = OIDName{ShortName: "certificateRevocationList", LongName: "certificateRevocationList"}
+	oidDotNotationToNames["2.5.4.40"] = OIDName{ShortName: "crossCertificatePair", LongName: "crossCertificatePair"}
+	oidDotNotationToNames["2.5.4.47"] = OIDName{ShortName: "enhancedSearchGuide", LongName: "enhancedSearchGuide"}
+	oidDotNotationToNames["2.5.4.48"] = OIDName{ShortName: "protocolInformation", LongName: "protocolInformation"}
+	oidDotNotationToNames["2.5.4.49"] = OIDName{ShortName: "distinguishedName", LongName: "distinguishedName"}
+	oidDotNotationToNames["2.5.4.50"] = OIDName{ShortName: "uniqueMember", LongName: "uniqueMember"}
+	oidDotNotationToNames["2.5.4.51"] = OIDName{ShortName: "houseIdentifier", LongName: "houseIdentifier"}
+	oidDotNotationToNames["2.5.4.52"] = OIDName{ShortName: "supportedAlgorithms", LongName: "supportedAlgorithms"}
+	oidDotNotationToNames["2.5.4.53"] = OIDName{ShortName: "deltaRevocationList", LongName: "deltaRevocationList"}
+	oidDotNotationToNames["2.5.4.54"] = OIDName{ShortName: "dmdName", LongName: "dmdName"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.17.1"] = OIDName{ShortName: "MS_LOCAL_MACHINE_KEYSET", LongName: "MS_LOCAL_MACHINE_KEYSET"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.10.4.1"] = OIDName{ShortName: "MS_YESNO_TRUST_ATTR", LongName: "MS_YESNO_TRUST_ATTR"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.13.2.1"] = OIDName{ShortName: "MS_ENROLLMENT_NAME_VALUE_PAIR", LongName: "MS_ENROLLMENT_NAME_VALUE_PAIR"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.13.2.3"] = OIDName{ShortName: "MS_OS_VERSION", LongName: "MS_OS_VERSION"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.13.2.2"] = OIDName{ShortName: "MS_ENROLLMENT_CSP_PROVIDER", LongName: "MS_ENROLLMENT_CSP_PROVIDER"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.12.1.2"] = OIDName{ShortName: "MS_CATALOG_LIST_MEMBER", LongName: "MS_CATALOG_LIST_MEMBER"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.10.11"] = OIDName{ShortName: "MS_CERT_PROP_ID_PREFIX", LongName: "MS_CERT_PROP_ID_PREFIX"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.13.1"] = OIDName{ShortName: "MS_RENEWAL_CERTIFICATE", LongName: "MS_RENEWAL_CERTIFICATE"}
+	oidDotNotationToNames["1.3.6.1.4.1.311"] = OIDName{ShortName: "MS_OID", LongName: "MS_OID"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.2.1.30"] = OIDName{ShortName: "MS_SPC_SIPINFO_OBJID", LongName: "MS_SPC_SIPINFO_OBJID"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.88.3"] = OIDName{ShortName: "MS_CAPICOM_ENCRYPTED_DATA", LongName: "MS_CAPICOM_ENCRYPTED_DATA"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.88.2"] = OIDName{ShortName: "MS_CAPICOM_ATTRIBUTE", LongName: "MS_CAPICOM_ATTRIBUTE"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.88.1"] = OIDName{ShortName: "MS_CAPICOM_VERSION", LongName: "MS_CAPICOM_VERSION"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.10.6.2"] = OIDName{ShortName: "MS_LICENSE_SERVER", LongName: "MS_LICENSE_SERVER"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.10.10.1"] = OIDName{ShortName: "MS_CMC_ADD_ATTRIBUTES", LongName: "MS_CMC_ADD_ATTRIBUTES"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.3.2.1"] = OIDName{ShortName: "MS_SPC_TIME_STAMP_REQUEST_OBJID", LongName: "MS_SPC_TIME_STAMP_REQUEST_OBJID"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.10.12.1"] = OIDName{ShortName: "MS_ANY_APPLICATION_POLICY", LongName: "MS_ANY_APPLICATION_POLICY"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.44.0.4"] = OIDName{ShortName: "MS_PEERNET_CERT_VERSION", LongName: "MS_PEERNET_CERT_VERSION"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.21.19"] = OIDName{ShortName: "MS_DS_EMAIL_REPLICATION", LongName: "MS_DS_EMAIL_REPLICATION"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.21.16"] = OIDName{ShortName: "MS_ARCHIVED_KEY_CERT_HASH", LongName: "MS_ARCHIVED_KEY_CERT_HASH"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.21.17"] = OIDName{ShortName: "MS_ISSUED_CERT_HASH", LongName: "MS_ISSUED_CERT_HASH"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.21.14"] = OIDName{ShortName: "MS_CRL_SELF_CDP", LongName: "MS_CRL_SELF_CDP"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.21.15"] = OIDName{ShortName: "MS_REQUIRE_CERT_CHAIN_POLICY", LongName: "MS_REQUIRE_CERT_CHAIN_POLICY"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.21.12"] = OIDName{ShortName: "MS_APPLICATION_POLICY_CONSTRAINTS", LongName: "MS_APPLICATION_POLICY_CONSTRAINTS"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.21.13"] = OIDName{ShortName: "MS_ARCHIVED_KEY_ATTR", LongName: "MS_ARCHIVED_KEY_ATTR"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.21.10"] = OIDName{ShortName: "MS_APPLICATION_CERT_POLICIES", LongName: "MS_APPLICATION_CERT_POLICIES"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.21.11"] = OIDName{ShortName: "MS_APPLICATION_POLICY_MAPPINGS", LongName: "MS_APPLICATION_POLICY_MAPPINGS"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.44"] = OIDName{ShortName: "MS_Peer_Networking", LongName: "MS_Peer_Networking"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.12.2.1"] = OIDName{ShortName: "MS_CAT_NAMEVALUE_OBJID", LongName: "MS_CAT_NAMEVALUE_OBJID"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.10.5.1"] = OIDName{ShortName: "MS_DRM", LongName: "MS_DRM"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.43"] = OIDName{ShortName: "MS_WWOps_BizExt", LongName: "MS_WWOps_BizExt"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.10.5.2"] = OIDName{ShortName: "MS_DRM_INDIVIDUALIZATION", LongName: "MS_DRM_INDIVIDUALIZATION"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.10.3.13"] = OIDName{ShortName: "MS_KP_LIFETIME_SIGNING", LongName: "MS_KP_LIFETIME_SIGNING"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.10.3.12"] = OIDName{ShortName: "MS_KP_DOCUMENT_SIGNING", LongName: "MS_KP_DOCUMENT_SIGNING"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.10.3.11"] = OIDName{ShortName: "MS_KP_KEY_RECOVERY", LongName: "MS_KP_KEY_RECOVERY"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.10.3.10"] = OIDName{ShortName: "MS_KP_QUALIFIED_SUBORDINATION", LongName: "MS_KP_QUALIFIED_SUBORDINATION"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.18.1"] = OIDName{ShortName: "MS_PKIX_LICENSE_INFO", LongName: "MS_PKIX_LICENSE_INFO"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.18.2"] = OIDName{ShortName: "MS_PKIX_MANUFACTURER", LongName: "MS_PKIX_MANUFACTURER"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.18.3"] = OIDName{ShortName: "MS_PKIX_MANUFACTURER_MS_SPECIFIC", LongName: "MS_PKIX_MANUFACTURER_MS_SPECIFIC"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.18.4"] = OIDName{ShortName: "MS_PKIX_HYDRA_CERT_VERSION", LongName: "MS_PKIX_HYDRA_CERT_VERSION"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.18.5"] = OIDName{ShortName: "MS_PKIX_LICENSED_PRODUCT_INFO", LongName: "MS_PKIX_LICENSED_PRODUCT_INFO"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.18.6"] = OIDName{ShortName: "MS_PKIX_MS_LICENSE_SERVER_INFO", LongName: "MS_PKIX_MS_LICENSE_SERVER_INFO"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.18.7"] = OIDName{ShortName: "MS_PKIS_PRODUCT_SPECIFIC_OID", LongName: "MS_PKIS_PRODUCT_SPECIFIC_OID"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.21.22"] = OIDName{ShortName: "MS_CERTSRV_CROSSCA_VERSION", LongName: "MS_CERTSRV_CROSSCA_VERSION"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.21.21"] = OIDName{ShortName: "MS_ENCRYPTED_KEY_HASH", LongName: "MS_ENCRYPTED_KEY_HASH"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.21.20"] = OIDName{ShortName: "MS_REQUEST_CLIENT_INFO", LongName: "MS_REQUEST_CLIENT_INFO"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.20.3"] = OIDName{ShortName: "MS_CERT_MANIFOLD", LongName: "MS_CERT_MANIFOLD"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.10.1.1"] = OIDName{ShortName: "MS_SORTED_CTL", LongName: "MS_SORTED_CTL"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.44.1.3"] = OIDName{ShortName: "MS_PEERNET_PNRP_PAYLOAD", LongName: "MS_PEERNET_PNRP_PAYLOAD"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.10.7.1"] = OIDName{ShortName: "MS_KEYID_RDN", LongName: "MS_KEYID_RDN"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.44.1.1"] = OIDName{ShortName: "MS_PEERNET_PNRP_ADDRESS", LongName: "MS_PEERNET_PNRP_ADDRESS"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.21.8"] = OIDName{ShortName: "MS_ENTERPRISE_OID_ROOT", LongName: "MS_ENTERPRISE_OID_ROOT"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.44.1.4"] = OIDName{ShortName: "MS_PEERNET_PNRP_ID", LongName: "MS_PEERNET_PNRP_ID"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.44.3.1"] = OIDName{ShortName: "MS_PEERNET_GROUPING_PEERNAME", LongName: "MS_PEERNET_GROUPING_PEERNAME"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.10.12"] = OIDName{ShortName: "MS_CryptUI", LongName: "MS_CryptUI"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.10.10"] = OIDName{ShortName: "MS_CMC_OIDs", LongName: "MS_CMC_OIDs"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.10.11"] = OIDName{ShortName: "MS_certificate_property_OIDs", LongName: "MS_certificate_property_OIDs"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.2.1.4"] = OIDName{ShortName: "MS_SPC_INDIRECT_DATA_OBJID", LongName: "MS_SPC_INDIRECT_DATA_OBJID"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.2.2"] = OIDName{ShortName: "MS_CTL_for_Software_Publishers_Trusted_CAs", LongName: "MS_CTL_for_Software_Publishers_Trusted_CAs"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.44.3.5"] = OIDName{ShortName: "MS_PEERNET_GROUPING_CLASSIFIERS", LongName: "MS_PEERNET_GROUPING_CLASSIFIERS"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.2"] = OIDName{ShortName: "MS_Authenticode", LongName: "MS_Authenticode"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.3"] = OIDName{ShortName: "MS_Time_Stamping", LongName: "MS_Time_Stamping"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.21.7"] = OIDName{ShortName: "MS_CERTIFICATE_TEMPLATE", LongName: "MS_CERTIFICATE_TEMPLATE"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.4"] = OIDName{ShortName: "MS_Permissions", LongName: "MS_Permissions"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.30"] = OIDName{ShortName: "MS_IIS", LongName: "MS_IIS"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.19"] = OIDName{ShortName: "MS_ISPU_Test", LongName: "MS_ISPU_Test"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.10.3.7"] = OIDName{ShortName: "MS_OEM_WHQL_CRYPTO", LongName: "MS_OEM_WHQL_CRYPTO"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.10.3.6"] = OIDName{ShortName: "MS_NT5_CRYPTO", LongName: "MS_NT5_CRYPTO"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.10.3.5"] = OIDName{ShortName: "MS_WHQL_CRYPTO", LongName: "MS_WHQL_CRYPTO"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.10.3.4"] = OIDName{ShortName: "MS_EFS_CRYPTO", LongName: "MS_EFS_CRYPTO"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.20.2.3"] = OIDName{ShortName: "MS_NT_PRINCIPAL_NAME", LongName: "MS_NT_PRINCIPAL_NAME"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.20.2.2"] = OIDName{ShortName: "MS_KP_SMARTCARD_LOGON", LongName: "MS_KP_SMARTCARD_LOGON"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.20.2.1"] = OIDName{ShortName: "MS_ENROLLMENT_AGENT", LongName: "MS_ENROLLMENT_AGENT"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.10.3.9"] = OIDName{ShortName: "MS_ROOT_LIST_SIGNER", LongName: "MS_ROOT_LIST_SIGNER"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.10.3.8"] = OIDName{ShortName: "MS_EMBEDDED_NT_CRYPTO", LongName: "MS_EMBEDDED_NT_CRYPTO"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.18.8"] = OIDName{ShortName: "MS_PKIS_TLSERVER_SPK_OID", LongName: "MS_PKIS_TLSERVER_SPK_OID"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.2.2.2"] = OIDName{ShortName: "MS_TRUSTED_CLIENT_AUTH_CA_LIST", LongName: "MS_TRUSTED_CLIENT_AUTH_CA_LIST"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.2.2.3"] = OIDName{ShortName: "MS_TRUSTED_SERVER_AUTH_CA_LIST", LongName: "MS_TRUSTED_SERVER_AUTH_CA_LIST"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.12.1.1"] = OIDName{ShortName: "MS_CATALOG_LIST", LongName: "MS_CATALOG_LIST"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.2.2.1"] = OIDName{ShortName: "MS_TRUSTED_CODESIGNING_CA_LIST", LongName: "MS_TRUSTED_CODESIGNING_CA_LIST"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.45"] = OIDName{ShortName: "MS_Mobile_Devices_Code_Signing", LongName: "MS_Mobile_Devices_Code_Signing"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.30.1"] = OIDName{ShortName: "MS_IIS_VIRTUAL_SERVER", LongName: "MS_IIS_VIRTUAL_SERVER"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.10.3.14"] = OIDName{ShortName: "MS_KP_MOBILE_DEVICE_SOFTWARE", LongName: "MS_KP_MOBILE_DEVICE_SOFTWARE"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.10.8.1"] = OIDName{ShortName: "MS_REMOVE_CERTIFICATE", LongName: "MS_REMOVE_CERTIFICATE"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.42"] = OIDName{ShortName: "MS_Corporate_PKI_(ITG)", LongName: "MS_Corporate_PKI_(ITG)"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.2.1.26"] = OIDName{ShortName: "MS_SPC_MINIMAL_CRITERIA_OBJID", LongName: "MS_SPC_MINIMAL_CRITERIA_OBJID"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.44.3.2"] = OIDName{ShortName: "MS_PEERNET_GROUPING_FLAGS", LongName: "MS_PEERNET_GROUPING_FLAGS"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.44.3.3"] = OIDName{ShortName: "MS_PEERNET_GROUPING_ROLES", LongName: "MS_PEERNET_GROUPING_ROLES"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.41"] = OIDName{ShortName: "MS_Licensing_and_Registration", LongName: "MS_Licensing_and_Registration"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.20"] = OIDName{ShortName: "MS_Enrollment_Infrastructure", LongName: "MS_Enrollment_Infrastructure"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.40"] = OIDName{ShortName: "MS_Fonts", LongName: "MS_Fonts"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.21"] = OIDName{ShortName: "MS_CertSrv_Infrastructure", LongName: "MS_CertSrv_Infrastructure"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.10.3.3.1"] = OIDName{ShortName: "MS_SERIALIZED", LongName: "MS_SERIALIZED"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.12.2.2"] = OIDName{ShortName: "MS_CAT_MEMBERINFO_OBJID", LongName: "MS_CAT_MEMBERINFO_OBJID"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.25"] = OIDName{ShortName: "MS_Directory_Service", LongName: "MS_Directory_Service"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.44.0.3"] = OIDName{ShortName: "MS_PEERNET_CLASSIFIER", LongName: "MS_PEERNET_CLASSIFIER"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.44.0.1"] = OIDName{ShortName: "MS_PEERNET_CERT_TYPE", LongName: "MS_PEERNET_CERT_TYPE"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.44.1"] = OIDName{ShortName: "MS_PEERNET_PNRP", LongName: "MS_PEERNET_PNRP"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.88.3.1"] = OIDName{ShortName: "MS_CAPICOM_ENCRYPTED_CONTENT", LongName: "MS_CAPICOM_ENCRYPTED_CONTENT"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.44.0.2"] = OIDName{ShortName: "MS_PEERNET_PEERNAME", LongName: "MS_PEERNET_PEERNAME"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.44.3"] = OIDName{ShortName: "MS_PEERNET_GROUPING", LongName: "MS_PEERNET_GROUPING"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.44.1.2"] = OIDName{ShortName: "MS_PEERNET_PNRP_FLAGS", LongName: "MS_PEERNET_PNRP_FLAGS"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.15"] = OIDName{ShortName: "MS_Java", LongName: "MS_Java"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.16"] = OIDName{ShortName: "MS_Outlook/Exchange", LongName: "MS_Outlook/Exchange"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.17"] = OIDName{ShortName: "MS_PKCS12_attributes", LongName: "MS_PKCS12_attributes"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.10"] = OIDName{ShortName: "MS_Crypto_2.0", LongName: "MS_Crypto_2.0"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.21.9"] = OIDName{ShortName: "MS_RDN_DUMMY_SIGNER", LongName: "MS_RDN_DUMMY_SIGNER"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.12"] = OIDName{ShortName: "MS_Catalog", LongName: "MS_Catalog"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.13"] = OIDName{ShortName: "MS_PKCS10_OIDs", LongName: "MS_PKCS10_OIDs"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.21.4"] = OIDName{ShortName: "MS_CRL_NEXT_PUBLISH", LongName: "MS_CRL_NEXT_PUBLISH"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.21.5"] = OIDName{ShortName: "MS_KP_CA_EXCHANGE", LongName: "MS_KP_CA_EXCHANGE"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.21.6"] = OIDName{ShortName: "MS_KP_KEY_RECOVERY_AGENT", LongName: "MS_KP_KEY_RECOVERY_AGENT"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.10.6.1"] = OIDName{ShortName: "MS_LICENSES", LongName: "MS_LICENSES"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.18"] = OIDName{ShortName: "MS_Hydra", LongName: "MS_Hydra"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.21.1"] = OIDName{ShortName: "MS_CERTSRV_CA_VERSION", LongName: "MS_CERTSRV_CA_VERSION"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.21.2"] = OIDName{ShortName: "MS_CERTSRV_PREVIOUS_CERT_HASH", LongName: "MS_CERTSRV_PREVIOUS_CERT_HASH"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.21.3"] = OIDName{ShortName: "MS_CRL_VIRTUAL_BASE", LongName: "MS_CRL_VIRTUAL_BASE"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.31.1"] = OIDName{ShortName: "MS_PRODUCT_UPDATE", LongName: "MS_PRODUCT_UPDATE"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.16.4"] = OIDName{ShortName: "MS_MICROSOFT_Encryption_Key_Preference", LongName: "MS_MICROSOFT_Encryption_Key_Preference"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.44.2"] = OIDName{ShortName: "MS_PEERNET_IDENTITY", LongName: "MS_PEERNET_IDENTITY"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.88"] = OIDName{ShortName: "MS_CAPICOM", LongName: "MS_CAPICOM"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.10.9.1"] = OIDName{ShortName: "MS_CROSS_CERT_DIST_POINTS", LongName: "MS_CROSS_CERT_DIST_POINTS"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.2.1.19"] = OIDName{ShortName: "MS_SPC_STRUCTURED_STORAGE_DATA_OBJID", LongName: "MS_SPC_STRUCTURED_STORAGE_DATA_OBJID"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.2.1.18"] = OIDName{ShortName: "MS_SPC_RAW_FILE_DATA_OBJID", LongName: "MS_SPC_RAW_FILE_DATA_OBJID"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.2.1.25"] = OIDName{ShortName: "MS_SPC_GLUE_RDN_OBJID", LongName: "MS_SPC_GLUE_RDN_OBJID"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.2.1.11"] = OIDName{ShortName: "MS_SPC_STATEMENT_TYPE_OBJID", LongName: "MS_SPC_STATEMENT_TYPE_OBJID"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.2.1.10"] = OIDName{ShortName: "MS_SPC_SP_AGENCY_INFO_OBJID", LongName: "MS_SPC_SP_AGENCY_INFO_OBJID"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.10.3.4.1"] = OIDName{ShortName: "MS_EFS_RECOVERY", LongName: "MS_EFS_RECOVERY"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.2.1.12"] = OIDName{ShortName: "MS_SPC_SP_OPUS_INFO_OBJID", LongName: "MS_SPC_SP_OPUS_INFO_OBJID"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.2.1.15"] = OIDName{ShortName: "MS_SPC_PE_IMAGE_DATA_OBJID", LongName: "MS_SPC_PE_IMAGE_DATA_OBJID"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.2.1.14"] = OIDName{ShortName: "MS_SPC_CERT_EXTENSIONS_OBJID", LongName: "MS_SPC_CERT_EXTENSIONS_OBJID"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.25.1"] = OIDName{ShortName: "MS_NTDS_REPLICATION", LongName: "MS_NTDS_REPLICATION"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.2.1.27"] = OIDName{ShortName: "MS_SPC_FINANCIAL_CRITERIA_OBJID", LongName: "MS_SPC_FINANCIAL_CRITERIA_OBJID"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.10.3.3"] = OIDName{ShortName: "MS_SERVER_GATED_CRYPTO", LongName: "MS_SERVER_GATED_CRYPTO"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.10.11.1"] = OIDName{ShortName: "MS_CERT_PROP_ID_PREFIX", LongName: "MS_CERT_PROP_ID_PREFIX"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.10.3.2"] = OIDName{ShortName: "MS_KP_TIME_STAMP_SIGNING", LongName: "MS_KP_TIME_STAMP_SIGNING"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.10.3.1"] = OIDName{ShortName: "MS_KP_CTL_USAGE_SIGNING", LongName: "MS_KP_CTL_USAGE_SIGNING"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.31"] = OIDName{ShortName: "MS_Windows_updates_and_service_packs", LongName: "MS_Windows_updates_and_service_packs"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.88.2.1"] = OIDName{ShortName: "MS_CAPICOM_DOCUMENT_NAME", LongName: "MS_CAPICOM_DOCUMENT_NAME"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.88.2.2"] = OIDName{ShortName: "MS_CAPICOM_DOCUMENT_DESCRIPTION", LongName: "MS_CAPICOM_DOCUMENT_DESCRIPTION"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.44.2.2"] = OIDName{ShortName: "MS_PEERNET_IDENTITY_FLAGS", LongName: "MS_PEERNET_IDENTITY_FLAGS"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.20.1"] = OIDName{ShortName: "MS_AUTO_ENROLL_CTL_USAGE", LongName: "MS_AUTO_ENROLL_CTL_USAGE"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.10.1"] = OIDName{ShortName: "MS_CTL", LongName: "MS_CTL"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.10.2"] = OIDName{ShortName: "MS_NEXT_UPDATE_LOCATION", LongName: "MS_NEXT_UPDATE_LOCATION"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.20.2"] = OIDName{ShortName: "MS_ENROLL_CERTTYPE_EXTENSION", LongName: "MS_ENROLL_CERTTYPE_EXTENSION"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.2.1.20"] = OIDName{ShortName: "MS_SPC_JAVA_CLASS_DATA_OBJID", LongName: "MS_SPC_JAVA_CLASS_DATA_OBJID"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.2.1.21"] = OIDName{ShortName: "MS_SPC_INDIVIDUAL_SP_KEY_PURPOSE_OBJID", LongName: "MS_SPC_INDIVIDUAL_SP_KEY_PURPOSE_OBJID"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.2.1.22"] = OIDName{ShortName: "MS_SPC_COMMERCIAL_SP_KEY_PURPOSE_OBJID", LongName: "MS_SPC_COMMERCIAL_SP_KEY_PURPOSE_OBJID"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.10.7"] = OIDName{ShortName: "MS_MICROSOFT_RDN_PREFIX", LongName: "MS_MICROSOFT_RDN_PREFIX"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.2.1.28"] = OIDName{ShortName: "MS_SPC_LINK_OBJID", LongName: "MS_SPC_LINK_OBJID"}
+	// EV Certificates
+	oidDotNotationToNames["1.3.6.1.4.1.311.60.2.1.1"] = OIDName{ShortName: "jurisdictionLocality", LongName: "jurisdictionLocalityName"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.60.2.1.2"] = OIDName{ShortName: "jurisdictionStateOrProvince", LongName: "jurisdictionStateOrProvinceName"}
+	oidDotNotationToNames["1.3.6.1.4.1.311.60.2.1.3"] = OIDName{ShortName: "jurisdictionCountry", LongName: "jurisdictionCountryName"}
+
+}
diff --git a/ct/x509/pkix/pkix.go b/ct/x509/pkix/pkix.go
index 67db6ae..5bf9e85 100755
--- a/ct/x509/pkix/pkix.go
+++ b/ct/x509/pkix/pkix.go
@@ -8,7 +8,8 @@ package pkix
 
 import (
 	// START CT CHANGES
-	"github.com/google/certificate-transparency/go/asn1"
+	"github.com/zmap/zcrypto/ct/asn1"
+	"strings"
 	// END CT CHANGES
 	"math/big"
 	"time"
@@ -120,16 +121,16 @@ func appendRDNs(in RDNSequence, values []string, oid asn1.ObjectIdentifier) RDNS
 }
 
 func (n Name) ToRDNSequence() (ret RDNSequence) {
-	ret = appendRDNs(ret, n.Country, oidCountry)
-	ret = appendRDNs(ret, n.Organization, oidOrganization)
+	if len(n.CommonName) > 0 {
+		ret = appendRDNs(ret, []string{n.CommonName}, oidCommonName)
+	}
 	ret = appendRDNs(ret, n.OrganizationalUnit, oidOrganizationalUnit)
+	ret = appendRDNs(ret, n.Organization, oidOrganization)
+	ret = appendRDNs(ret, n.StreetAddress, oidStreetAddress)
 	ret = appendRDNs(ret, n.Locality, oidLocality)
 	ret = appendRDNs(ret, n.Province, oidProvince)
-	ret = appendRDNs(ret, n.StreetAddress, oidStreetAddress)
 	ret = appendRDNs(ret, n.PostalCode, oidPostalCode)
-	if len(n.CommonName) > 0 {
-		ret = appendRDNs(ret, []string{n.CommonName}, oidCommonName)
-	}
+	ret = appendRDNs(ret, n.Country, oidCountry)
 	if len(n.SerialNumber) > 0 {
 		ret = appendRDNs(ret, []string{n.SerialNumber}, oidSerialNumber)
 	}
@@ -137,6 +138,32 @@ func (n Name) ToRDNSequence() (ret RDNSequence) {
 	return ret
 }
 
+func (n *Name) String() string {
+	parts := make([]string, 0, 8)
+	for _, name := range n.Names {
+		oidString := name.Type.String()
+		attrParts := make([]string, 0, 2)
+		oidName, ok := oidDotNotationToNames[oidString]
+		if ok {
+			attrParts = append(attrParts, oidName.ShortName)
+		} else {
+			attrParts = append(attrParts, oidString)
+		}
+		switch value := name.Value.(type) {
+		case string:
+			attrParts = append(attrParts, value)
+		case []byte:
+			attrParts = append(attrParts, string(value))
+		default:
+			continue
+		}
+		attrString := strings.Join(attrParts, "=")
+		parts = append(parts, attrString)
+	}
+	joined := strings.Join(parts, ", ")
+	return joined
+}
+
 // CertificateList represents the ASN.1 structure of the same name. See RFC
 // 5280, section 5.1. Use Certificate.CheckCRLSignature to verify the
 // signature.
diff --git a/ct/x509/sec1.go b/ct/x509/sec1.go
index dbc255f..b0ea06e 100755
--- a/ct/x509/sec1.go
+++ b/ct/x509/sec1.go
@@ -8,7 +8,7 @@ import (
 	"crypto/ecdsa"
 	"crypto/elliptic"
 	// START CT CHANGES
-	"github.com/google/certificate-transparency/go/asn1"
+	"github.com/zmap/zcrypto/ct/asn1"
 	// START CT CHANGES
 	"errors"
 	"fmt"
diff --git a/ct/x509/verify_test.go b/ct/x509/verify_test.go
index f9368a7..1f659bd 100755
--- a/ct/x509/verify_test.go
+++ b/ct/x509/verify_test.go
@@ -6,7 +6,7 @@ package x509
 
 import (
 	// START CT CHANGES
-	"github.com/google/certificate-transparency/go/x509/pkix"
+	"github.com/zmap/zcrypto/ct/x509/pkix"
 	// END CT CHANGES
 	"encoding/pem"
 	"errors"
diff --git a/ct/x509/x509.go b/ct/x509/x509.go
index cda7220..09f5d9a 100755
--- a/ct/x509/x509.go
+++ b/ct/x509/x509.go
@@ -20,8 +20,8 @@ import (
 	"crypto/rsa"
 	"crypto/sha1"
 	// START CT CHANGES
-	"github.com/google/certificate-transparency/go/asn1"
-	"github.com/google/certificate-transparency/go/x509/pkix"
+	"github.com/zmap/zcrypto/ct/asn1"
+	"github.com/zmap/zcrypto/ct/x509/pkix"
 	// END CT CHANGES
 	"encoding/pem"
 	"errors"
@@ -237,18 +237,19 @@ const (
 //    us(840) ansi-X9-62(10045) signatures(4) ecdsa-with-SHA2(3) 4 }
 
 var (
-	oidSignatureMD2WithRSA      = asn1.ObjectIdentifier{1, 2, 840, 113549, 1, 1, 2}
-	oidSignatureMD5WithRSA      = asn1.ObjectIdentifier{1, 2, 840, 113549, 1, 1, 4}
-	oidSignatureSHA1WithRSA     = asn1.ObjectIdentifier{1, 2, 840, 113549, 1, 1, 5}
-	oidSignatureSHA256WithRSA   = asn1.ObjectIdentifier{1, 2, 840, 113549, 1, 1, 11}
-	oidSignatureSHA384WithRSA   = asn1.ObjectIdentifier{1, 2, 840, 113549, 1, 1, 12}
-	oidSignatureSHA512WithRSA   = asn1.ObjectIdentifier{1, 2, 840, 113549, 1, 1, 13}
-	oidSignatureDSAWithSHA1     = asn1.ObjectIdentifier{1, 2, 840, 10040, 4, 3}
-	oidSignatureDSAWithSHA256   = asn1.ObjectIdentifier{2, 16, 840, 1, 101, 4, 3, 2}
-	oidSignatureECDSAWithSHA1   = asn1.ObjectIdentifier{1, 2, 840, 10045, 4, 1}
-	oidSignatureECDSAWithSHA256 = asn1.ObjectIdentifier{1, 2, 840, 10045, 4, 3, 2}
-	oidSignatureECDSAWithSHA384 = asn1.ObjectIdentifier{1, 2, 840, 10045, 4, 3, 3}
-	oidSignatureECDSAWithSHA512 = asn1.ObjectIdentifier{1, 2, 840, 10045, 4, 3, 4}
+	oidSignatureMD2WithRSA             = asn1.ObjectIdentifier{1, 2, 840, 113549, 1, 1, 2}
+	oidSignatureMD5WithRSA             = asn1.ObjectIdentifier{1, 2, 840, 113549, 1, 1, 4}
+	oidSignatureSHA1WithRSA            = asn1.ObjectIdentifier{1, 2, 840, 113549, 1, 1, 5}
+	oidSignatureSHA256WithRSA          = asn1.ObjectIdentifier{1, 2, 840, 113549, 1, 1, 11}
+	oidSignatureSHA384WithRSA          = asn1.ObjectIdentifier{1, 2, 840, 113549, 1, 1, 12}
+	oidSignatureSHA512WithRSA          = asn1.ObjectIdentifier{1, 2, 840, 113549, 1, 1, 13}
+	oidSignatureDSAWithSHA1            = asn1.ObjectIdentifier{1, 2, 840, 10040, 4, 3}
+	oidSignatureDSAWithSHA256          = asn1.ObjectIdentifier{2, 16, 840, 1, 101, 4, 3, 2}
+	oidSignatureECDSAWithSHA1          = asn1.ObjectIdentifier{1, 2, 840, 10045, 4, 1}
+	oidSignatureECDSAWithSHA256        = asn1.ObjectIdentifier{1, 2, 840, 10045, 4, 3, 2}
+	oidSignatureECDSAWithSHA384        = asn1.ObjectIdentifier{1, 2, 840, 10045, 4, 3, 3}
+	oidSignatureECDSAWithSHA512        = asn1.ObjectIdentifier{1, 2, 840, 10045, 4, 3, 4}
+	oidExtensionCTPrecertificatePoison = asn1.ObjectIdentifier{1, 3, 6, 1, 4, 1, 11129, 2, 4, 3}
 )
 
 func getSignatureAlgorithmFromOID(oid asn1.ObjectIdentifier) SignatureAlgorithm {
@@ -523,6 +524,7 @@ type Certificate struct {
 	// CRL Distribution Points
 	CRLDistributionPoints []string
 
+	IsPrecert         bool
 	PolicyIdentifiers []asn1.ObjectIdentifier
 }
 
@@ -617,6 +619,10 @@ func (c *Certificate) CheckSignatureFrom(parent *Certificate) (err error) {
 
 	// TODO(agl): don't ignore the path length constraint.
 
+	if parent.Subject.String() != c.Issuer.String() {
+		return errors.New(fmt.Sprintf("Mis-match issuer/subject (%s!=%s)", parent.Subject.String(), c.Issuer.String()))
+	}
+
 	return parent.CheckSignature(c.SignatureAlgorithm, c.RawTBSCertificate, c.Signature)
 }
 
@@ -1123,6 +1129,13 @@ func parseCertificate(in *certificate) (*Certificate, error) {
 					out.IssuingCertificateURL = append(out.IssuingCertificateURL, string(v.Location.Bytes))
 				}
 			}
+		} else if e.Id.Equal(oidExtensionCTPrecertificatePoison) {
+			if e.Value[0] == 5 && e.Value[1] == 0 {
+				out.IsPrecert = true
+				continue
+			} else {
+				return nil, UnhandledCriticalExtension{}
+			}
 		}
 
 		if e.Critical {
diff --git a/ct/x509/x509_test.go b/ct/x509/x509_test.go
index a2e90e3..41d64e3 100755
--- a/ct/x509/x509_test.go
+++ b/ct/x509/x509_test.go
@@ -14,8 +14,8 @@ import (
 	_ "crypto/sha256"
 	_ "crypto/sha512"
 	// START CT CHANGES
-	"github.com/google/certificate-transparency/go/asn1"
-	"github.com/google/certificate-transparency/go/x509/pkix"
+	"github.com/zmap/zcrypto/ct/asn1"
+	"github.com/zmap/zcrypto/ct/x509/pkix"
 	// END CT CHANGES
 	"encoding/base64"
 	"encoding/hex"
